Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMENTARIO_BLOQUE
    COMENTARIO_LINEA
    CORCHETE_ABRE
    CORCHETE_CIERRA
    PUNTO

Grammar

Rule 0     S' -> programa
Rule 1     programa -> statement
Rule 2     programa -> empty
Rule 3     empty -> <empty>
Rule 4     statement -> content PUNTO_Y_COMA
Rule 5     statement -> content PUNTO_Y_COMA statement
Rule 6     statement -> no_semicolon
Rule 7     statement -> no_semicolon statement
Rule 8     content -> define
Rule 9     content -> declare
Rule 10    content -> assign
Rule 11    no_semicolon -> condition
Rule 12    no_semicolon -> loop
Rule 13    no_semicolon -> function_def
Rule 14    define -> TYPE CADENA_NO_COMILLAS ASIGNACION ajson
Rule 15    ajson -> LLAVE_ABRE lista LLAVE_CIERRA
Rule 16    ajson -> LLAVE_ABRE LLAVE_CIERRA
Rule 17    lista -> elemento
Rule 18    lista -> elemento COMA
Rule 19    lista -> elemento COMA lista
Rule 20    elemento -> clave DOS_PUNTOS valor_t
Rule 21    clave -> CADENA_NO_COMILLAS
Rule 22    clave -> CADENA_COMILLAS
Rule 23    valor_t -> CADENA_COMILLAS
Rule 24    valor_t -> num
Rule 25    valor_t -> operacion
Rule 26    valor_t -> bool
Rule 27    valor_t -> NULL
Rule 28    valor_t -> ajson
Rule 29    valor_t -> tipo
Rule 30    valor_t -> CARACTER
Rule 31    valor_t -> CADENA_NO_COMILLAS
Rule 32    operacion -> aritmetica
Rule 33    operacion -> booleana
Rule 34    operacion -> comparacion
Rule 35    operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA
Rule 36    aritmetica -> ex operador1 ex
Rule 37    aritmetica -> ex2 operador2 ex2
Rule 38    operador1 -> SUMA
Rule 39    operador1 -> RESTA
Rule 40    operador2 -> MULTIPLICACION
Rule 41    operador2 -> DIVISION
Rule 42    comparacion -> ex comparador ex
Rule 43    comparacion -> ex1 IGUAL ex1
Rule 44    comparador -> MAYOR
Rule 45    comparador -> MENOR
Rule 46    comparador -> MAYOR_IGUAL
Rule 47    comparador -> MENOR_IGUAL
Rule 48    booleana -> ex3 comparador2 ex3
Rule 49    booleana -> NEGACION ex3
Rule 50    comparador2 -> CONJUNCION
Rule 51    comparador2 -> DISYUNCION
Rule 52    ex -> num
Rule 53    ex -> CHARACTER
Rule 54    ex -> CADENA_NO_COMILLAS
Rule 55    ex -> aritmetica
Rule 56    ex -> comparacion
Rule 57    ex -> PARENTESIS_ABRE ex PARENTESIS_CIERRA
Rule 58    ex1 -> ex
Rule 59    ex1 -> bool
Rule 60    ex1 -> booleana
Rule 61    ex1 -> aritmetica
Rule 62    ex1 -> comparacion
Rule 63    ex1 -> PARENTESIS_ABRE ex1 PARENTESIS_CIERRA
Rule 64    ex2 -> num
Rule 65    ex2 -> CADENA_NO_COMILLAS
Rule 66    ex2 -> aritmetica
Rule 67    ex2 -> PARENTESIS_ABRE ex2 PARENTESIS_CIERRA
Rule 68    ex3 -> bool
Rule 69    ex3 -> CADENA_NO_COMILLAS
Rule 70    ex3 -> comparacion
Rule 71    ex3 -> PARENTESIS_ABRE ex3 PARENTESIS_CIERRA
Rule 72    bool -> TR
Rule 73    bool -> FL
Rule 74    num -> ENTERO
Rule 75    num -> DECIMAL
Rule 76    tipo -> INT
Rule 77    tipo -> FLOAT
Rule 78    tipo -> CHARACTER
Rule 79    tipo -> BOOLEAN
Rule 80    tipo -> CADENA_NO_COMILLAS
Rule 81    declare -> LET id
Rule 82    id -> variable
Rule 83    id -> variable COMA id
Rule 84    variable -> CADENA_NO_COMILLAS DOS_PUNTOS tipo
Rule 85    variable -> CADENA_NO_COMILLAS
Rule 86    assign -> variable ASIGNACION valor
Rule 87    valor -> CADENA_COMILLAS
Rule 88    valor -> num
Rule 89    valor -> operacion
Rule 90    valor -> bool
Rule 91    valor -> NULL
Rule 92    valor -> ajson
Rule 93    valor -> CARACTER
Rule 94    valor -> CADENA_NO_COMILLAS
Rule 95    valor -> function_call
Rule 96    condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
Rule 97    condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
Rule 98    expersion -> ex3
Rule 99    expersion -> booleana
Rule 100   expersion -> function_call
Rule 101   loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
Rule 102   function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
Rule 103   function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
Rule 104   function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
Rule 105   function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
Rule 106   function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
Rule 107   function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA

Terminals, with rules where they appear

ASIGNACION           : 14 86
BOOLEAN              : 79
CADENA_COMILLAS      : 22 23 87
CADENA_NO_COMILLAS   : 14 21 31 54 65 69 80 84 85 94 102 103 104 105 106 107
CARACTER             : 30 93
CHARACTER            : 53 78
COMA                 : 18 19 83
COMENTARIO_BLOQUE    : 
COMENTARIO_LINEA     : 
CONJUNCION           : 50
CORCHETE_ABRE        : 
CORCHETE_CIERRA      : 
DECIMAL              : 75
DISYUNCION           : 51
DIVISION             : 41
DOS_PUNTOS           : 20 84 102 103 104 105
ELSE                 : 97
ENTERO               : 74
FL                   : 73
FLOAT                : 77
FUNCTION             : 102 103 104 105
IF                   : 96 97
IGUAL                : 43
INT                  : 76
LET                  : 81
LLAVE_ABRE           : 15 16 96 97 97 101 102 103 104 105
LLAVE_CIERRA         : 15 16 96 97 97 101 102 103 104 105
MAYOR                : 44
MAYOR_IGUAL          : 46
MENOR                : 45
MENOR_IGUAL          : 47
MULTIPLICACION       : 40
NEGACION             : 49
NULL                 : 27 91
PARENTESIS_ABRE      : 35 57 63 67 71 96 97 101 102 103 104 105 106 107
PARENTESIS_CIERRA    : 35 57 63 67 71 96 97 101 102 103 104 105 106 107
PUNTO                : 
PUNTO_Y_COMA         : 4 5 102 103 104 105
RESTA                : 39
RETURN               : 102 103 104 105
SUMA                 : 38
TR                   : 72
TYPE                 : 14
WHILE                : 101
error                : 

Nonterminals, with rules where they appear

ajson                : 14 28 92
aritmetica           : 32 55 61 66
assign               : 10
bool                 : 26 59 68 90
booleana             : 33 60 99
clave                : 20
comparacion          : 34 56 62 70
comparador           : 42
comparador2          : 48
condition            : 11
content              : 4 5
declare              : 9
define               : 8
elemento             : 17 18 19
empty                : 2
ex                   : 36 36 42 42 57 58
ex1                  : 43 43 63
ex2                  : 37 37 67
ex3                  : 48 48 49 71 98
expersion            : 96 97 101
function_call        : 95 100
function_def         : 13
id                   : 81 83 102 103
lista                : 15 19
loop                 : 12
no_semicolon         : 6 7
num                  : 24 52 64 88
operacion            : 25 35 89
operador1            : 36
operador2            : 37
programa             : 0
statement            : 1 5 7 96 97 97 101 102 104
tipo                 : 29 84 102 103 104 105
valor                : 86 102 103 104 105 106
valor_t              : 20
variable             : 82 83 86

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . statement
    (2) programa -> . empty
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (3) empty -> .
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (14) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (81) declare -> . LET id
    (86) assign -> . variable ASIGNACION valor
    (96) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (97) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (101) loop -> . WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (102) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (103) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (104) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (105) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (85) variable -> . CADENA_NO_COMILLAS

    $end            reduce using rule 3 (empty -> .)
    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    programa                       shift and go to state 1
    statement                      shift and go to state 2
    empty                          shift and go to state 3
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 1

    (0) S' -> programa .



state 2

    (1) programa -> statement .

    $end            reduce using rule 1 (programa -> statement .)


state 3

    (2) programa -> empty .

    $end            reduce using rule 2 (programa -> empty .)


state 4

    (4) statement -> content . PUNTO_Y_COMA
    (5) statement -> content . PUNTO_Y_COMA statement

    PUNTO_Y_COMA    shift and go to state 19


state 5

    (6) statement -> no_semicolon .
    (7) statement -> no_semicolon . statement
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (14) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (81) declare -> . LET id
    (86) assign -> . variable ASIGNACION valor
    (96) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (97) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (101) loop -> . WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (102) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (103) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (104) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (105) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (85) variable -> . CADENA_NO_COMILLAS

    $end            reduce using rule 6 (statement -> no_semicolon .)
    LLAVE_CIERRA    reduce using rule 6 (statement -> no_semicolon .)
    RETURN          reduce using rule 6 (statement -> no_semicolon .)
    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    no_semicolon                   shift and go to state 5
    statement                      shift and go to state 20
    content                        shift and go to state 4
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 6

    (8) content -> define .

    PUNTO_Y_COMA    reduce using rule 8 (content -> define .)


state 7

    (9) content -> declare .

    PUNTO_Y_COMA    reduce using rule 9 (content -> declare .)


state 8

    (10) content -> assign .

    PUNTO_Y_COMA    reduce using rule 10 (content -> assign .)


state 9

    (11) no_semicolon -> condition .

    TYPE            reduce using rule 11 (no_semicolon -> condition .)
    LET             reduce using rule 11 (no_semicolon -> condition .)
    IF              reduce using rule 11 (no_semicolon -> condition .)
    WHILE           reduce using rule 11 (no_semicolon -> condition .)
    FUNCTION        reduce using rule 11 (no_semicolon -> condition .)
    CADENA_NO_COMILLAS reduce using rule 11 (no_semicolon -> condition .)
    $end            reduce using rule 11 (no_semicolon -> condition .)
    LLAVE_CIERRA    reduce using rule 11 (no_semicolon -> condition .)
    RETURN          reduce using rule 11 (no_semicolon -> condition .)


state 10

    (12) no_semicolon -> loop .

    TYPE            reduce using rule 12 (no_semicolon -> loop .)
    LET             reduce using rule 12 (no_semicolon -> loop .)
    IF              reduce using rule 12 (no_semicolon -> loop .)
    WHILE           reduce using rule 12 (no_semicolon -> loop .)
    FUNCTION        reduce using rule 12 (no_semicolon -> loop .)
    CADENA_NO_COMILLAS reduce using rule 12 (no_semicolon -> loop .)
    $end            reduce using rule 12 (no_semicolon -> loop .)
    LLAVE_CIERRA    reduce using rule 12 (no_semicolon -> loop .)
    RETURN          reduce using rule 12 (no_semicolon -> loop .)


state 11

    (13) no_semicolon -> function_def .

    TYPE            reduce using rule 13 (no_semicolon -> function_def .)
    LET             reduce using rule 13 (no_semicolon -> function_def .)
    IF              reduce using rule 13 (no_semicolon -> function_def .)
    WHILE           reduce using rule 13 (no_semicolon -> function_def .)
    FUNCTION        reduce using rule 13 (no_semicolon -> function_def .)
    CADENA_NO_COMILLAS reduce using rule 13 (no_semicolon -> function_def .)
    $end            reduce using rule 13 (no_semicolon -> function_def .)
    LLAVE_CIERRA    reduce using rule 13 (no_semicolon -> function_def .)
    RETURN          reduce using rule 13 (no_semicolon -> function_def .)


state 12

    (14) define -> TYPE . CADENA_NO_COMILLAS ASIGNACION ajson

    CADENA_NO_COMILLAS shift and go to state 21


state 13

    (84) variable -> CADENA_NO_COMILLAS . DOS_PUNTOS tipo
    (85) variable -> CADENA_NO_COMILLAS .

    DOS_PUNTOS      shift and go to state 22
    ASIGNACION      reduce using rule 85 (variable -> CADENA_NO_COMILLAS .)
    COMA            reduce using rule 85 (variable -> CADENA_NO_COMILLAS .)
    PUNTO_Y_COMA    reduce using rule 85 (variable -> CADENA_NO_COMILLAS .)
    PARENTESIS_CIERRA reduce using rule 85 (variable -> CADENA_NO_COMILLAS .)


state 14

    (81) declare -> LET . id
    (82) id -> . variable
    (83) id -> . variable COMA id
    (84) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (85) variable -> . CADENA_NO_COMILLAS

    CADENA_NO_COMILLAS shift and go to state 13

    id                             shift and go to state 23
    variable                       shift and go to state 24

state 15

    (86) assign -> variable . ASIGNACION valor

    ASIGNACION      shift and go to state 25


state 16

    (96) condition -> IF . PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (97) condition -> IF . PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA

    PARENTESIS_ABRE shift and go to state 26


state 17

    (101) loop -> WHILE . PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA

    PARENTESIS_ABRE shift and go to state 27


state 18

    (102) function_def -> FUNCTION . CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (103) function_def -> FUNCTION . CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (104) function_def -> FUNCTION . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (105) function_def -> FUNCTION . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    CADENA_NO_COMILLAS shift and go to state 28


state 19

    (4) statement -> content PUNTO_Y_COMA .
    (5) statement -> content PUNTO_Y_COMA . statement
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (14) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (81) declare -> . LET id
    (86) assign -> . variable ASIGNACION valor
    (96) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (97) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (101) loop -> . WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (102) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (103) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (104) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (105) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (85) variable -> . CADENA_NO_COMILLAS

    $end            reduce using rule 4 (statement -> content PUNTO_Y_COMA .)
    LLAVE_CIERRA    reduce using rule 4 (statement -> content PUNTO_Y_COMA .)
    RETURN          reduce using rule 4 (statement -> content PUNTO_Y_COMA .)
    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    content                        shift and go to state 4
    statement                      shift and go to state 29
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 20

    (7) statement -> no_semicolon statement .

    $end            reduce using rule 7 (statement -> no_semicolon statement .)
    LLAVE_CIERRA    reduce using rule 7 (statement -> no_semicolon statement .)
    RETURN          reduce using rule 7 (statement -> no_semicolon statement .)


state 21

    (14) define -> TYPE CADENA_NO_COMILLAS . ASIGNACION ajson

    ASIGNACION      shift and go to state 30


state 22

    (84) variable -> CADENA_NO_COMILLAS DOS_PUNTOS . tipo
    (76) tipo -> . INT
    (77) tipo -> . FLOAT
    (78) tipo -> . CHARACTER
    (79) tipo -> . BOOLEAN
    (80) tipo -> . CADENA_NO_COMILLAS

    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    CHARACTER       shift and go to state 35
    BOOLEAN         shift and go to state 36
    CADENA_NO_COMILLAS shift and go to state 31

    tipo                           shift and go to state 32

state 23

    (81) declare -> LET id .

    PUNTO_Y_COMA    reduce using rule 81 (declare -> LET id .)


state 24

    (82) id -> variable .
    (83) id -> variable . COMA id

    PUNTO_Y_COMA    reduce using rule 82 (id -> variable .)
    PARENTESIS_CIERRA reduce using rule 82 (id -> variable .)
    COMA            shift and go to state 37


state 25

    (86) assign -> variable ASIGNACION . valor
    (87) valor -> . CADENA_COMILLAS
    (88) valor -> . num
    (89) valor -> . operacion
    (90) valor -> . bool
    (91) valor -> . NULL
    (92) valor -> . ajson
    (93) valor -> . CARACTER
    (94) valor -> . CADENA_NO_COMILLAS
    (95) valor -> . function_call
    (74) num -> . ENTERO
    (75) num -> . DECIMAL
    (32) operacion -> . aritmetica
    (33) operacion -> . booleana
    (34) operacion -> . comparacion
    (35) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (72) bool -> . TR
    (73) bool -> . FL
    (15) ajson -> . LLAVE_ABRE lista LLAVE_CIERRA
    (16) ajson -> . LLAVE_ABRE LLAVE_CIERRA
    (106) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (107) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (36) aritmetica -> . ex operador1 ex
    (37) aritmetica -> . ex2 operador2 ex2
    (48) booleana -> . ex3 comparador2 ex3
    (49) booleana -> . NEGACION ex3
    (42) comparacion -> . ex comparador ex
    (43) comparacion -> . ex1 IGUAL ex1
    (52) ex -> . num
    (53) ex -> . CHARACTER
    (54) ex -> . CADENA_NO_COMILLAS
    (55) ex -> . aritmetica
    (56) ex -> . comparacion
    (57) ex -> . PARENTESIS_ABRE ex PARENTESIS_CIERRA
    (64) ex2 -> . num
    (65) ex2 -> . CADENA_NO_COMILLAS
    (66) ex2 -> . aritmetica
    (67) ex2 -> . PARENTESIS_ABRE ex2 PARENTESIS_CIERRA
    (68) ex3 -> . bool
    (69) ex3 -> . CADENA_NO_COMILLAS
    (70) ex3 -> . comparacion
    (71) ex3 -> . PARENTESIS_ABRE ex3 PARENTESIS_CIERRA
    (58) ex1 -> . ex
    (59) ex1 -> . bool
    (60) ex1 -> . booleana
    (61) ex1 -> . aritmetica
    (62) ex1 -> . comparacion
    (63) ex1 -> . PARENTESIS_ABRE ex1 PARENTESIS_CIERRA

    CADENA_COMILLAS shift and go to state 39
    NULL            shift and go to state 43
    CARACTER        shift and go to state 45
    CADENA_NO_COMILLAS shift and go to state 46
    ENTERO          shift and go to state 48
    DECIMAL         shift and go to state 49
    PARENTESIS_ABRE shift and go to state 53
    TR              shift and go to state 54
    FL              shift and go to state 55
    LLAVE_ABRE      shift and go to state 56
    NEGACION        shift and go to state 60
    CHARACTER       shift and go to state 62

    valor                          shift and go to state 38
    num                            shift and go to state 40
    operacion                      shift and go to state 41
    bool                           shift and go to state 42
    ajson                          shift and go to state 44
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 50
    booleana                       shift and go to state 51
    comparacion                    shift and go to state 52
    ex                             shift and go to state 57
    ex2                            shift and go to state 58
    ex3                            shift and go to state 59
    ex1                            shift and go to state 61

state 26

    (96) condition -> IF PARENTESIS_ABRE . expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (97) condition -> IF PARENTESIS_ABRE . expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (98) expersion -> . ex3
    (99) expersion -> . booleana
    (100) expersion -> . function_call
    (68) ex3 -> . bool
    (69) ex3 -> . CADENA_NO_COMILLAS
    (70) ex3 -> . comparacion
    (71) ex3 -> . PARENTESIS_ABRE ex3 PARENTESIS_CIERRA
    (48) booleana -> . ex3 comparador2 ex3
    (49) booleana -> . NEGACION ex3
    (106) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (107) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (72) bool -> . TR
    (73) bool -> . FL
    (42) comparacion -> . ex comparador ex
    (43) comparacion -> . ex1 IGUAL ex1
    (52) ex -> . num
    (53) ex -> . CHARACTER
    (54) ex -> . CADENA_NO_COMILLAS
    (55) ex -> . aritmetica
    (56) ex -> . comparacion
    (57) ex -> . PARENTESIS_ABRE ex PARENTESIS_CIERRA
    (58) ex1 -> . ex
    (59) ex1 -> . bool
    (60) ex1 -> . booleana
    (61) ex1 -> . aritmetica
    (62) ex1 -> . comparacion
    (63) ex1 -> . PARENTESIS_ABRE ex1 PARENTESIS_CIERRA
    (74) num -> . ENTERO
    (75) num -> . DECIMAL
    (36) aritmetica -> . ex operador1 ex
    (37) aritmetica -> . ex2 operador2 ex2
    (64) ex2 -> . num
    (65) ex2 -> . CADENA_NO_COMILLAS
    (66) ex2 -> . aritmetica
    (67) ex2 -> . PARENTESIS_ABRE ex2 PARENTESIS_CIERRA

    CADENA_NO_COMILLAS shift and go to state 69
    PARENTESIS_ABRE shift and go to state 63
    NEGACION        shift and go to state 60
    TR              shift and go to state 54
    FL              shift and go to state 55
    CHARACTER       shift and go to state 62
    ENTERO          shift and go to state 48
    DECIMAL         shift and go to state 49

    expersion                      shift and go to state 64
    ex3                            shift and go to state 65
    booleana                       shift and go to state 66
    function_call                  shift and go to state 67
    bool                           shift and go to state 68
    comparacion                    shift and go to state 70
    ex                             shift and go to state 71
    ex1                            shift and go to state 61
    num                            shift and go to state 72
    aritmetica                     shift and go to state 73
    ex2                            shift and go to state 58

state 27

    (101) loop -> WHILE PARENTESIS_ABRE . expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (98) expersion -> . ex3
    (99) expersion -> . booleana
    (100) expersion -> . function_call
    (68) ex3 -> . bool
    (69) ex3 -> . CADENA_NO_COMILLAS
    (70) ex3 -> . comparacion
    (71) ex3 -> . PARENTESIS_ABRE ex3 PARENTESIS_CIERRA
    (48) booleana -> . ex3 comparador2 ex3
    (49) booleana -> . NEGACION ex3
    (106) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (107) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (72) bool -> . TR
    (73) bool -> . FL
    (42) comparacion -> . ex comparador ex
    (43) comparacion -> . ex1 IGUAL ex1
    (52) ex -> . num
    (53) ex -> . CHARACTER
    (54) ex -> . CADENA_NO_COMILLAS
    (55) ex -> . aritmetica
    (56) ex -> . comparacion
    (57) ex -> . PARENTESIS_ABRE ex PARENTESIS_CIERRA
    (58) ex1 -> . ex
    (59) ex1 -> . bool
    (60) ex1 -> . booleana
    (61) ex1 -> . aritmetica
    (62) ex1 -> . comparacion
    (63) ex1 -> . PARENTESIS_ABRE ex1 PARENTESIS_CIERRA
    (74) num -> . ENTERO
    (75) num -> . DECIMAL
    (36) aritmetica -> . ex operador1 ex
    (37) aritmetica -> . ex2 operador2 ex2
    (64) ex2 -> . num
    (65) ex2 -> . CADENA_NO_COMILLAS
    (66) ex2 -> . aritmetica
    (67) ex2 -> . PARENTESIS_ABRE ex2 PARENTESIS_CIERRA

    CADENA_NO_COMILLAS shift and go to state 69
    PARENTESIS_ABRE shift and go to state 63
    NEGACION        shift and go to state 60
    TR              shift and go to state 54
    FL              shift and go to state 55
    CHARACTER       shift and go to state 62
    ENTERO          shift and go to state 48
    DECIMAL         shift and go to state 49

    expersion                      shift and go to state 74
    ex3                            shift and go to state 65
    booleana                       shift and go to state 66
    function_call                  shift and go to state 67
    bool                           shift and go to state 68
    comparacion                    shift and go to state 70
    ex                             shift and go to state 71
    ex1                            shift and go to state 61
    num                            shift and go to state 72
    aritmetica                     shift and go to state 73
    ex2                            shift and go to state 58

state 28

    (102) function_def -> FUNCTION CADENA_NO_COMILLAS . PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (103) function_def -> FUNCTION CADENA_NO_COMILLAS . PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (104) function_def -> FUNCTION CADENA_NO_COMILLAS . PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (105) function_def -> FUNCTION CADENA_NO_COMILLAS . PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    PARENTESIS_ABRE shift and go to state 75


state 29

    (5) statement -> content PUNTO_Y_COMA statement .

    $end            reduce using rule 5 (statement -> content PUNTO_Y_COMA statement .)
    LLAVE_CIERRA    reduce using rule 5 (statement -> content PUNTO_Y_COMA statement .)
    RETURN          reduce using rule 5 (statement -> content PUNTO_Y_COMA statement .)


state 30

    (14) define -> TYPE CADENA_NO_COMILLAS ASIGNACION . ajson
    (15) ajson -> . LLAVE_ABRE lista LLAVE_CIERRA
    (16) ajson -> . LLAVE_ABRE LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 56

    ajson                          shift and go to state 76

state 31

    (80) tipo -> CADENA_NO_COMILLAS .

    ASIGNACION      reduce using rule 80 (tipo -> CADENA_NO_COMILLAS .)
    COMA            reduce using rule 80 (tipo -> CADENA_NO_COMILLAS .)
    PUNTO_Y_COMA    reduce using rule 80 (tipo -> CADENA_NO_COMILLAS .)
    PARENTESIS_CIERRA reduce using rule 80 (tipo -> CADENA_NO_COMILLAS .)
    LLAVE_ABRE      reduce using rule 80 (tipo -> CADENA_NO_COMILLAS .)


state 32

    (84) variable -> CADENA_NO_COMILLAS DOS_PUNTOS tipo .

    ASIGNACION      reduce using rule 84 (variable -> CADENA_NO_COMILLAS DOS_PUNTOS tipo .)
    COMA            reduce using rule 84 (variable -> CADENA_NO_COMILLAS DOS_PUNTOS tipo .)
    PUNTO_Y_COMA    reduce using rule 84 (variable -> CADENA_NO_COMILLAS DOS_PUNTOS tipo .)
    PARENTESIS_CIERRA reduce using rule 84 (variable -> CADENA_NO_COMILLAS DOS_PUNTOS tipo .)


state 33

    (76) tipo -> INT .

    ASIGNACION      reduce using rule 76 (tipo -> INT .)
    COMA            reduce using rule 76 (tipo -> INT .)
    PUNTO_Y_COMA    reduce using rule 76 (tipo -> INT .)
    PARENTESIS_CIERRA reduce using rule 76 (tipo -> INT .)
    LLAVE_CIERRA    reduce using rule 76 (tipo -> INT .)
    LLAVE_ABRE      reduce using rule 76 (tipo -> INT .)


state 34

    (77) tipo -> FLOAT .

    ASIGNACION      reduce using rule 77 (tipo -> FLOAT .)
    COMA            reduce using rule 77 (tipo -> FLOAT .)
    PUNTO_Y_COMA    reduce using rule 77 (tipo -> FLOAT .)
    PARENTESIS_CIERRA reduce using rule 77 (tipo -> FLOAT .)
    LLAVE_CIERRA    reduce using rule 77 (tipo -> FLOAT .)
    LLAVE_ABRE      reduce using rule 77 (tipo -> FLOAT .)


state 35

    (78) tipo -> CHARACTER .

    ASIGNACION      reduce using rule 78 (tipo -> CHARACTER .)
    COMA            reduce using rule 78 (tipo -> CHARACTER .)
    PUNTO_Y_COMA    reduce using rule 78 (tipo -> CHARACTER .)
    PARENTESIS_CIERRA reduce using rule 78 (tipo -> CHARACTER .)
    LLAVE_ABRE      reduce using rule 78 (tipo -> CHARACTER .)


state 36

    (79) tipo -> BOOLEAN .

    ASIGNACION      reduce using rule 79 (tipo -> BOOLEAN .)
    COMA            reduce using rule 79 (tipo -> BOOLEAN .)
    PUNTO_Y_COMA    reduce using rule 79 (tipo -> BOOLEAN .)
    PARENTESIS_CIERRA reduce using rule 79 (tipo -> BOOLEAN .)
    LLAVE_CIERRA    reduce using rule 79 (tipo -> BOOLEAN .)
    LLAVE_ABRE      reduce using rule 79 (tipo -> BOOLEAN .)


state 37

    (83) id -> variable COMA . id
    (82) id -> . variable
    (83) id -> . variable COMA id
    (84) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (85) variable -> . CADENA_NO_COMILLAS

    CADENA_NO_COMILLAS shift and go to state 13

    variable                       shift and go to state 24
    id                             shift and go to state 77

state 38

    (86) assign -> variable ASIGNACION valor .

    PUNTO_Y_COMA    reduce using rule 86 (assign -> variable ASIGNACION valor .)


state 39

    (87) valor -> CADENA_COMILLAS .

    PUNTO_Y_COMA    reduce using rule 87 (valor -> CADENA_COMILLAS .)
    PARENTESIS_CIERRA reduce using rule 87 (valor -> CADENA_COMILLAS .)


state 40

    (88) valor -> num .
    (52) ex -> num .
    (64) ex2 -> num .

    PUNTO_Y_COMA    reduce using rule 88 (valor -> num .)
    PARENTESIS_CIERRA reduce using rule 88 (valor -> num .)
    SUMA            reduce using rule 52 (ex -> num .)
    RESTA           reduce using rule 52 (ex -> num .)
    MAYOR           reduce using rule 52 (ex -> num .)
    MENOR           reduce using rule 52 (ex -> num .)
    MAYOR_IGUAL     reduce using rule 52 (ex -> num .)
    MENOR_IGUAL     reduce using rule 52 (ex -> num .)
    IGUAL           reduce using rule 52 (ex -> num .)
    MULTIPLICACION  reduce using rule 64 (ex2 -> num .)
    DIVISION        reduce using rule 64 (ex2 -> num .)


state 41

    (89) valor -> operacion .

    PUNTO_Y_COMA    reduce using rule 89 (valor -> operacion .)
    PARENTESIS_CIERRA reduce using rule 89 (valor -> operacion .)


state 42

    (90) valor -> bool .
    (68) ex3 -> bool .
    (59) ex1 -> bool .

    PUNTO_Y_COMA    reduce using rule 90 (valor -> bool .)
    PARENTESIS_CIERRA reduce using rule 90 (valor -> bool .)
    CONJUNCION      reduce using rule 68 (ex3 -> bool .)
    DISYUNCION      reduce using rule 68 (ex3 -> bool .)
    IGUAL           reduce using rule 59 (ex1 -> bool .)


state 43

    (91) valor -> NULL .

    PUNTO_Y_COMA    reduce using rule 91 (valor -> NULL .)
    PARENTESIS_CIERRA reduce using rule 91 (valor -> NULL .)


state 44

    (92) valor -> ajson .

    PUNTO_Y_COMA    reduce using rule 92 (valor -> ajson .)
    PARENTESIS_CIERRA reduce using rule 92 (valor -> ajson .)


state 45

    (93) valor -> CARACTER .

    PUNTO_Y_COMA    reduce using rule 93 (valor -> CARACTER .)
    PARENTESIS_CIERRA reduce using rule 93 (valor -> CARACTER .)


state 46

    (94) valor -> CADENA_NO_COMILLAS .
    (106) function_call -> CADENA_NO_COMILLAS . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (107) function_call -> CADENA_NO_COMILLAS . PARENTESIS_ABRE PARENTESIS_CIERRA
    (54) ex -> CADENA_NO_COMILLAS .
    (65) ex2 -> CADENA_NO_COMILLAS .
    (69) ex3 -> CADENA_NO_COMILLAS .

    PUNTO_Y_COMA    reduce using rule 94 (valor -> CADENA_NO_COMILLAS .)
    PARENTESIS_CIERRA reduce using rule 94 (valor -> CADENA_NO_COMILLAS .)
    PARENTESIS_ABRE shift and go to state 78
    SUMA            reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    RESTA           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MAYOR           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MENOR           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MAYOR_IGUAL     reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MENOR_IGUAL     reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    IGUAL           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MULTIPLICACION  reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .)
    DIVISION        reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .)
    CONJUNCION      reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .)
    DISYUNCION      reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .)


state 47

    (95) valor -> function_call .

    PUNTO_Y_COMA    reduce using rule 95 (valor -> function_call .)
    PARENTESIS_CIERRA reduce using rule 95 (valor -> function_call .)


state 48

    (74) num -> ENTERO .

    PUNTO_Y_COMA    reduce using rule 74 (num -> ENTERO .)
    SUMA            reduce using rule 74 (num -> ENTERO .)
    RESTA           reduce using rule 74 (num -> ENTERO .)
    MAYOR           reduce using rule 74 (num -> ENTERO .)
    MENOR           reduce using rule 74 (num -> ENTERO .)
    MAYOR_IGUAL     reduce using rule 74 (num -> ENTERO .)
    MENOR_IGUAL     reduce using rule 74 (num -> ENTERO .)
    IGUAL           reduce using rule 74 (num -> ENTERO .)
    MULTIPLICACION  reduce using rule 74 (num -> ENTERO .)
    DIVISION        reduce using rule 74 (num -> ENTERO .)
    PARENTESIS_CIERRA reduce using rule 74 (num -> ENTERO .)
    CONJUNCION      reduce using rule 74 (num -> ENTERO .)
    DISYUNCION      reduce using rule 74 (num -> ENTERO .)
    COMA            reduce using rule 74 (num -> ENTERO .)
    LLAVE_CIERRA    reduce using rule 74 (num -> ENTERO .)


state 49

    (75) num -> DECIMAL .

    PUNTO_Y_COMA    reduce using rule 75 (num -> DECIMAL .)
    SUMA            reduce using rule 75 (num -> DECIMAL .)
    RESTA           reduce using rule 75 (num -> DECIMAL .)
    MAYOR           reduce using rule 75 (num -> DECIMAL .)
    MENOR           reduce using rule 75 (num -> DECIMAL .)
    MAYOR_IGUAL     reduce using rule 75 (num -> DECIMAL .)
    MENOR_IGUAL     reduce using rule 75 (num -> DECIMAL .)
    IGUAL           reduce using rule 75 (num -> DECIMAL .)
    MULTIPLICACION  reduce using rule 75 (num -> DECIMAL .)
    DIVISION        reduce using rule 75 (num -> DECIMAL .)
    PARENTESIS_CIERRA reduce using rule 75 (num -> DECIMAL .)
    CONJUNCION      reduce using rule 75 (num -> DECIMAL .)
    DISYUNCION      reduce using rule 75 (num -> DECIMAL .)
    COMA            reduce using rule 75 (num -> DECIMAL .)
    LLAVE_CIERRA    reduce using rule 75 (num -> DECIMAL .)


state 50

    (32) operacion -> aritmetica .
    (55) ex -> aritmetica .
    (66) ex2 -> aritmetica .
    (61) ex1 -> aritmetica .

  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 32 (operacion -> aritmetica .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 32 (operacion -> aritmetica .)
  ! reduce/reduce conflict for IGUAL resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 32 (operacion -> aritmetica .)
    PUNTO_Y_COMA    reduce using rule 32 (operacion -> aritmetica .)
    PARENTESIS_CIERRA reduce using rule 32 (operacion -> aritmetica .)
    COMA            reduce using rule 32 (operacion -> aritmetica .)
    LLAVE_CIERRA    reduce using rule 32 (operacion -> aritmetica .)
    SUMA            reduce using rule 55 (ex -> aritmetica .)
    RESTA           reduce using rule 55 (ex -> aritmetica .)
    MAYOR           reduce using rule 55 (ex -> aritmetica .)
    MENOR           reduce using rule 55 (ex -> aritmetica .)
    MAYOR_IGUAL     reduce using rule 55 (ex -> aritmetica .)
    MENOR_IGUAL     reduce using rule 55 (ex -> aritmetica .)
    IGUAL           reduce using rule 55 (ex -> aritmetica .)
    MULTIPLICACION  reduce using rule 66 (ex2 -> aritmetica .)
    DIVISION        reduce using rule 66 (ex2 -> aritmetica .)

  ! PARENTESIS_CIERRA [ reduce using rule 55 (ex -> aritmetica .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 66 (ex2 -> aritmetica .) ]
  ! IGUAL           [ reduce using rule 61 (ex1 -> aritmetica .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 61 (ex1 -> aritmetica .) ]


state 51

    (33) operacion -> booleana .
    (60) ex1 -> booleana .

  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 33 (operacion -> booleana .)
    PUNTO_Y_COMA    reduce using rule 33 (operacion -> booleana .)
    PARENTESIS_CIERRA reduce using rule 33 (operacion -> booleana .)
    COMA            reduce using rule 33 (operacion -> booleana .)
    LLAVE_CIERRA    reduce using rule 33 (operacion -> booleana .)
    IGUAL           reduce using rule 60 (ex1 -> booleana .)

  ! PARENTESIS_CIERRA [ reduce using rule 60 (ex1 -> booleana .) ]


state 52

    (34) operacion -> comparacion .
    (56) ex -> comparacion .
    (70) ex3 -> comparacion .
    (62) ex1 -> comparacion .

  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 34 (operacion -> comparacion .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 34 (operacion -> comparacion .)
  ! reduce/reduce conflict for IGUAL resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 34 (operacion -> comparacion .)
    PUNTO_Y_COMA    reduce using rule 34 (operacion -> comparacion .)
    PARENTESIS_CIERRA reduce using rule 34 (operacion -> comparacion .)
    COMA            reduce using rule 34 (operacion -> comparacion .)
    LLAVE_CIERRA    reduce using rule 34 (operacion -> comparacion .)
    SUMA            reduce using rule 56 (ex -> comparacion .)
    RESTA           reduce using rule 56 (ex -> comparacion .)
    MAYOR           reduce using rule 56 (ex -> comparacion .)
    MENOR           reduce using rule 56 (ex -> comparacion .)
    MAYOR_IGUAL     reduce using rule 56 (ex -> comparacion .)
    MENOR_IGUAL     reduce using rule 56 (ex -> comparacion .)
    IGUAL           reduce using rule 56 (ex -> comparacion .)
    CONJUNCION      reduce using rule 70 (ex3 -> comparacion .)
    DISYUNCION      reduce using rule 70 (ex3 -> comparacion .)

  ! PARENTESIS_CIERRA [ reduce using rule 56 (ex -> comparacion .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 70 (ex3 -> comparacion .) ]
  ! IGUAL           [ reduce using rule 62 (ex1 -> comparacion .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 62 (ex1 -> comparacion .) ]


state 53

    (35) operacion -> PARENTESIS_ABRE . operacion PARENTESIS_CIERRA
    (57) ex -> PARENTESIS_ABRE . ex PARENTESIS_CIERRA
    (67) ex2 -> PARENTESIS_ABRE . ex2 PARENTESIS_CIERRA
    (71) ex3 -> PARENTESIS_ABRE . ex3 PARENTESIS_CIERRA
    (63) ex1 -> PARENTESIS_ABRE . ex1 PARENTESIS_CIERRA
    (32) operacion -> . aritmetica
    (33) operacion -> . booleana
    (34) operacion -> . comparacion
    (35) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (52) ex -> . num
    (53) ex -> . CHARACTER
    (54) ex -> . CADENA_NO_COMILLAS
    (55) ex -> . aritmetica
    (56) ex -> . comparacion
    (57) ex -> . PARENTESIS_ABRE ex PARENTESIS_CIERRA
    (64) ex2 -> . num
    (65) ex2 -> . CADENA_NO_COMILLAS
    (66) ex2 -> . aritmetica
    (67) ex2 -> . PARENTESIS_ABRE ex2 PARENTESIS_CIERRA
    (68) ex3 -> . bool
    (69) ex3 -> . CADENA_NO_COMILLAS
    (70) ex3 -> . comparacion
    (71) ex3 -> . PARENTESIS_ABRE ex3 PARENTESIS_CIERRA
    (58) ex1 -> . ex
    (59) ex1 -> . bool
    (60) ex1 -> . booleana
    (61) ex1 -> . aritmetica
    (62) ex1 -> . comparacion
    (63) ex1 -> . PARENTESIS_ABRE ex1 PARENTESIS_CIERRA
    (36) aritmetica -> . ex operador1 ex
    (37) aritmetica -> . ex2 operador2 ex2
    (48) booleana -> . ex3 comparador2 ex3
    (49) booleana -> . NEGACION ex3
    (42) comparacion -> . ex comparador ex
    (43) comparacion -> . ex1 IGUAL ex1
    (74) num -> . ENTERO
    (75) num -> . DECIMAL
    (72) bool -> . TR
    (73) bool -> . FL

    PARENTESIS_ABRE shift and go to state 53
    CHARACTER       shift and go to state 62
    CADENA_NO_COMILLAS shift and go to state 84
    NEGACION        shift and go to state 60
    ENTERO          shift and go to state 48
    DECIMAL         shift and go to state 49
    TR              shift and go to state 54
    FL              shift and go to state 55

    operacion                      shift and go to state 79
    ex                             shift and go to state 80
    ex2                            shift and go to state 81
    ex3                            shift and go to state 82
    ex1                            shift and go to state 83
    aritmetica                     shift and go to state 50
    booleana                       shift and go to state 51
    comparacion                    shift and go to state 52
    num                            shift and go to state 72
    bool                           shift and go to state 68

state 54

    (72) bool -> TR .

    PUNTO_Y_COMA    reduce using rule 72 (bool -> TR .)
    CONJUNCION      reduce using rule 72 (bool -> TR .)
    DISYUNCION      reduce using rule 72 (bool -> TR .)
    IGUAL           reduce using rule 72 (bool -> TR .)
    PARENTESIS_CIERRA reduce using rule 72 (bool -> TR .)
    SUMA            reduce using rule 72 (bool -> TR .)
    RESTA           reduce using rule 72 (bool -> TR .)
    MAYOR           reduce using rule 72 (bool -> TR .)
    MENOR           reduce using rule 72 (bool -> TR .)
    MAYOR_IGUAL     reduce using rule 72 (bool -> TR .)
    MENOR_IGUAL     reduce using rule 72 (bool -> TR .)
    MULTIPLICACION  reduce using rule 72 (bool -> TR .)
    DIVISION        reduce using rule 72 (bool -> TR .)
    COMA            reduce using rule 72 (bool -> TR .)
    LLAVE_CIERRA    reduce using rule 72 (bool -> TR .)


state 55

    (73) bool -> FL .

    PUNTO_Y_COMA    reduce using rule 73 (bool -> FL .)
    CONJUNCION      reduce using rule 73 (bool -> FL .)
    DISYUNCION      reduce using rule 73 (bool -> FL .)
    IGUAL           reduce using rule 73 (bool -> FL .)
    PARENTESIS_CIERRA reduce using rule 73 (bool -> FL .)
    SUMA            reduce using rule 73 (bool -> FL .)
    RESTA           reduce using rule 73 (bool -> FL .)
    MAYOR           reduce using rule 73 (bool -> FL .)
    MENOR           reduce using rule 73 (bool -> FL .)
    MAYOR_IGUAL     reduce using rule 73 (bool -> FL .)
    MENOR_IGUAL     reduce using rule 73 (bool -> FL .)
    MULTIPLICACION  reduce using rule 73 (bool -> FL .)
    DIVISION        reduce using rule 73 (bool -> FL .)
    COMA            reduce using rule 73 (bool -> FL .)
    LLAVE_CIERRA    reduce using rule 73 (bool -> FL .)


state 56

    (15) ajson -> LLAVE_ABRE . lista LLAVE_CIERRA
    (16) ajson -> LLAVE_ABRE . LLAVE_CIERRA
    (17) lista -> . elemento
    (18) lista -> . elemento COMA
    (19) lista -> . elemento COMA lista
    (20) elemento -> . clave DOS_PUNTOS valor_t
    (21) clave -> . CADENA_NO_COMILLAS
    (22) clave -> . CADENA_COMILLAS

    LLAVE_CIERRA    shift and go to state 86
    CADENA_NO_COMILLAS shift and go to state 89
    CADENA_COMILLAS shift and go to state 90

    lista                          shift and go to state 85
    elemento                       shift and go to state 87
    clave                          shift and go to state 88

state 57

    (36) aritmetica -> ex . operador1 ex
    (42) comparacion -> ex . comparador ex
    (58) ex1 -> ex .
    (38) operador1 -> . SUMA
    (39) operador1 -> . RESTA
    (44) comparador -> . MAYOR
    (45) comparador -> . MENOR
    (46) comparador -> . MAYOR_IGUAL
    (47) comparador -> . MENOR_IGUAL

    IGUAL           reduce using rule 58 (ex1 -> ex .)
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MAYOR           shift and go to state 95
    MENOR           shift and go to state 96
    MAYOR_IGUAL     shift and go to state 97
    MENOR_IGUAL     shift and go to state 98

    operador1                      shift and go to state 91
    comparador                     shift and go to state 92

state 58

    (37) aritmetica -> ex2 . operador2 ex2
    (40) operador2 -> . MULTIPLICACION
    (41) operador2 -> . DIVISION

    MULTIPLICACION  shift and go to state 100
    DIVISION        shift and go to state 101

    operador2                      shift and go to state 99

state 59

    (48) booleana -> ex3 . comparador2 ex3
    (50) comparador2 -> . CONJUNCION
    (51) comparador2 -> . DISYUNCION

    CONJUNCION      shift and go to state 103
    DISYUNCION      shift and go to state 104

    comparador2                    shift and go to state 102

state 60

    (49) booleana -> NEGACION . ex3
    (68) ex3 -> . bool
    (69) ex3 -> . CADENA_NO_COMILLAS
    (70) ex3 -> . comparacion
    (71) ex3 -> . PARENTESIS_ABRE ex3 PARENTESIS_CIERRA
    (72) bool -> . TR
    (73) bool -> . FL
    (42) comparacion -> . ex comparador ex
    (43) comparacion -> . ex1 IGUAL ex1
    (52) ex -> . num
    (53) ex -> . CHARACTER
    (54) ex -> . CADENA_NO_COMILLAS
    (55) ex -> . aritmetica
    (56) ex -> . comparacion
    (57) ex -> . PARENTESIS_ABRE ex PARENTESIS_CIERRA
    (58) ex1 -> . ex
    (59) ex1 -> . bool
    (60) ex1 -> . booleana
    (61) ex1 -> . aritmetica
    (62) ex1 -> . comparacion
    (63) ex1 -> . PARENTESIS_ABRE ex1 PARENTESIS_CIERRA
    (74) num -> . ENTERO
    (75) num -> . DECIMAL
    (36) aritmetica -> . ex operador1 ex
    (37) aritmetica -> . ex2 operador2 ex2
    (48) booleana -> . ex3 comparador2 ex3
    (49) booleana -> . NEGACION ex3
    (64) ex2 -> . num
    (65) ex2 -> . CADENA_NO_COMILLAS
    (66) ex2 -> . aritmetica
    (67) ex2 -> . PARENTESIS_ABRE ex2 PARENTESIS_CIERRA

    CADENA_NO_COMILLAS shift and go to state 106
    PARENTESIS_ABRE shift and go to state 63
    TR              shift and go to state 54
    FL              shift and go to state 55
    CHARACTER       shift and go to state 62
    ENTERO          shift and go to state 48
    DECIMAL         shift and go to state 49
    NEGACION        shift and go to state 60

    ex3                            shift and go to state 105
    bool                           shift and go to state 68
    comparacion                    shift and go to state 70
    ex                             shift and go to state 71
    ex1                            shift and go to state 61
    num                            shift and go to state 72
    aritmetica                     shift and go to state 73
    booleana                       shift and go to state 107
    ex2                            shift and go to state 58

state 61

    (43) comparacion -> ex1 . IGUAL ex1

    IGUAL           shift and go to state 108


state 62

    (53) ex -> CHARACTER .

    SUMA            reduce using rule 53 (ex -> CHARACTER .)
    RESTA           reduce using rule 53 (ex -> CHARACTER .)
    MAYOR           reduce using rule 53 (ex -> CHARACTER .)
    MENOR           reduce using rule 53 (ex -> CHARACTER .)
    MAYOR_IGUAL     reduce using rule 53 (ex -> CHARACTER .)
    MENOR_IGUAL     reduce using rule 53 (ex -> CHARACTER .)
    IGUAL           reduce using rule 53 (ex -> CHARACTER .)
    PARENTESIS_CIERRA reduce using rule 53 (ex -> CHARACTER .)
    CONJUNCION      reduce using rule 53 (ex -> CHARACTER .)
    DISYUNCION      reduce using rule 53 (ex -> CHARACTER .)
    PUNTO_Y_COMA    reduce using rule 53 (ex -> CHARACTER .)
    MULTIPLICACION  reduce using rule 53 (ex -> CHARACTER .)
    DIVISION        reduce using rule 53 (ex -> CHARACTER .)
    COMA            reduce using rule 53 (ex -> CHARACTER .)
    LLAVE_CIERRA    reduce using rule 53 (ex -> CHARACTER .)


state 63

    (71) ex3 -> PARENTESIS_ABRE . ex3 PARENTESIS_CIERRA
    (57) ex -> PARENTESIS_ABRE . ex PARENTESIS_CIERRA
    (63) ex1 -> PARENTESIS_ABRE . ex1 PARENTESIS_CIERRA
    (67) ex2 -> PARENTESIS_ABRE . ex2 PARENTESIS_CIERRA
    (68) ex3 -> . bool
    (69) ex3 -> . CADENA_NO_COMILLAS
    (70) ex3 -> . comparacion
    (71) ex3 -> . PARENTESIS_ABRE ex3 PARENTESIS_CIERRA
    (52) ex -> . num
    (53) ex -> . CHARACTER
    (54) ex -> . CADENA_NO_COMILLAS
    (55) ex -> . aritmetica
    (56) ex -> . comparacion
    (57) ex -> . PARENTESIS_ABRE ex PARENTESIS_CIERRA
    (58) ex1 -> . ex
    (59) ex1 -> . bool
    (60) ex1 -> . booleana
    (61) ex1 -> . aritmetica
    (62) ex1 -> . comparacion
    (63) ex1 -> . PARENTESIS_ABRE ex1 PARENTESIS_CIERRA
    (64) ex2 -> . num
    (65) ex2 -> . CADENA_NO_COMILLAS
    (66) ex2 -> . aritmetica
    (67) ex2 -> . PARENTESIS_ABRE ex2 PARENTESIS_CIERRA
    (72) bool -> . TR
    (73) bool -> . FL
    (42) comparacion -> . ex comparador ex
    (43) comparacion -> . ex1 IGUAL ex1
    (74) num -> . ENTERO
    (75) num -> . DECIMAL
    (36) aritmetica -> . ex operador1 ex
    (37) aritmetica -> . ex2 operador2 ex2
    (48) booleana -> . ex3 comparador2 ex3
    (49) booleana -> . NEGACION ex3

    CADENA_NO_COMILLAS shift and go to state 106
    PARENTESIS_ABRE shift and go to state 63
    CHARACTER       shift and go to state 62
    TR              shift and go to state 54
    FL              shift and go to state 55
    ENTERO          shift and go to state 48
    DECIMAL         shift and go to state 49
    NEGACION        shift and go to state 60

    ex3                            shift and go to state 82
    ex                             shift and go to state 109
    ex1                            shift and go to state 83
    ex2                            shift and go to state 81
    bool                           shift and go to state 68
    comparacion                    shift and go to state 70
    num                            shift and go to state 72
    aritmetica                     shift and go to state 73
    booleana                       shift and go to state 107

state 64

    (96) condition -> IF PARENTESIS_ABRE expersion . PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (97) condition -> IF PARENTESIS_ABRE expersion . PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA

    PARENTESIS_CIERRA shift and go to state 110


state 65

    (98) expersion -> ex3 .
    (48) booleana -> ex3 . comparador2 ex3
    (50) comparador2 -> . CONJUNCION
    (51) comparador2 -> . DISYUNCION

    PARENTESIS_CIERRA reduce using rule 98 (expersion -> ex3 .)
    CONJUNCION      shift and go to state 103
    DISYUNCION      shift and go to state 104

    comparador2                    shift and go to state 102

state 66

    (99) expersion -> booleana .
    (60) ex1 -> booleana .

    PARENTESIS_CIERRA reduce using rule 99 (expersion -> booleana .)
    IGUAL           reduce using rule 60 (ex1 -> booleana .)


state 67

    (100) expersion -> function_call .

    PARENTESIS_CIERRA reduce using rule 100 (expersion -> function_call .)


state 68

    (68) ex3 -> bool .
    (59) ex1 -> bool .

  ! reduce/reduce conflict for IGUAL resolved using rule 59 (ex1 -> bool .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 59 (ex1 -> bool .)
    CONJUNCION      reduce using rule 68 (ex3 -> bool .)
    DISYUNCION      reduce using rule 68 (ex3 -> bool .)
    PUNTO_Y_COMA    reduce using rule 68 (ex3 -> bool .)
    SUMA            reduce using rule 68 (ex3 -> bool .)
    RESTA           reduce using rule 68 (ex3 -> bool .)
    MAYOR           reduce using rule 68 (ex3 -> bool .)
    MENOR           reduce using rule 68 (ex3 -> bool .)
    MAYOR_IGUAL     reduce using rule 68 (ex3 -> bool .)
    MENOR_IGUAL     reduce using rule 68 (ex3 -> bool .)
    MULTIPLICACION  reduce using rule 68 (ex3 -> bool .)
    DIVISION        reduce using rule 68 (ex3 -> bool .)
    COMA            reduce using rule 68 (ex3 -> bool .)
    LLAVE_CIERRA    reduce using rule 68 (ex3 -> bool .)
    IGUAL           reduce using rule 59 (ex1 -> bool .)
    PARENTESIS_CIERRA reduce using rule 59 (ex1 -> bool .)

  ! PARENTESIS_CIERRA [ reduce using rule 68 (ex3 -> bool .) ]
  ! IGUAL           [ reduce using rule 68 (ex3 -> bool .) ]


state 69

    (69) ex3 -> CADENA_NO_COMILLAS .
    (106) function_call -> CADENA_NO_COMILLAS . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (107) function_call -> CADENA_NO_COMILLAS . PARENTESIS_ABRE PARENTESIS_CIERRA
    (54) ex -> CADENA_NO_COMILLAS .
    (65) ex2 -> CADENA_NO_COMILLAS .

    CONJUNCION      reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .)
    DISYUNCION      reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .)
    PARENTESIS_CIERRA reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .)
    PARENTESIS_ABRE shift and go to state 78
    MAYOR           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MENOR           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MAYOR_IGUAL     reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MENOR_IGUAL     reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    SUMA            reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    RESTA           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    IGUAL           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MULTIPLICACION  reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .)
    DIVISION        reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .)


state 70

    (70) ex3 -> comparacion .
    (56) ex -> comparacion .
    (62) ex1 -> comparacion .

  ! reduce/reduce conflict for MAYOR resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for MENOR resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for SUMA resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for RESTA resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for IGUAL resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for IGUAL resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 56 (ex -> comparacion .)
    CONJUNCION      reduce using rule 70 (ex3 -> comparacion .)
    DISYUNCION      reduce using rule 70 (ex3 -> comparacion .)
    PUNTO_Y_COMA    reduce using rule 70 (ex3 -> comparacion .)
    MULTIPLICACION  reduce using rule 70 (ex3 -> comparacion .)
    DIVISION        reduce using rule 70 (ex3 -> comparacion .)
    COMA            reduce using rule 70 (ex3 -> comparacion .)
    LLAVE_CIERRA    reduce using rule 70 (ex3 -> comparacion .)
    MAYOR           reduce using rule 56 (ex -> comparacion .)
    MENOR           reduce using rule 56 (ex -> comparacion .)
    MAYOR_IGUAL     reduce using rule 56 (ex -> comparacion .)
    MENOR_IGUAL     reduce using rule 56 (ex -> comparacion .)
    SUMA            reduce using rule 56 (ex -> comparacion .)
    RESTA           reduce using rule 56 (ex -> comparacion .)
    IGUAL           reduce using rule 56 (ex -> comparacion .)
    PARENTESIS_CIERRA reduce using rule 56 (ex -> comparacion .)

  ! PARENTESIS_CIERRA [ reduce using rule 70 (ex3 -> comparacion .) ]
  ! IGUAL           [ reduce using rule 70 (ex3 -> comparacion .) ]
  ! SUMA            [ reduce using rule 70 (ex3 -> comparacion .) ]
  ! RESTA           [ reduce using rule 70 (ex3 -> comparacion .) ]
  ! MAYOR           [ reduce using rule 70 (ex3 -> comparacion .) ]
  ! MENOR           [ reduce using rule 70 (ex3 -> comparacion .) ]
  ! MAYOR_IGUAL     [ reduce using rule 70 (ex3 -> comparacion .) ]
  ! MENOR_IGUAL     [ reduce using rule 70 (ex3 -> comparacion .) ]
  ! IGUAL           [ reduce using rule 62 (ex1 -> comparacion .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 62 (ex1 -> comparacion .) ]


state 71

    (42) comparacion -> ex . comparador ex
    (58) ex1 -> ex .
    (36) aritmetica -> ex . operador1 ex
    (44) comparador -> . MAYOR
    (45) comparador -> . MENOR
    (46) comparador -> . MAYOR_IGUAL
    (47) comparador -> . MENOR_IGUAL
    (38) operador1 -> . SUMA
    (39) operador1 -> . RESTA

    IGUAL           reduce using rule 58 (ex1 -> ex .)
    MAYOR           shift and go to state 95
    MENOR           shift and go to state 96
    MAYOR_IGUAL     shift and go to state 97
    MENOR_IGUAL     shift and go to state 98
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94

    comparador                     shift and go to state 92
    operador1                      shift and go to state 91

state 72

    (52) ex -> num .
    (64) ex2 -> num .

  ! reduce/reduce conflict for MULTIPLICACION resolved using rule 52 (ex -> num .)
  ! reduce/reduce conflict for DIVISION resolved using rule 52 (ex -> num .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 52 (ex -> num .)
    MAYOR           reduce using rule 52 (ex -> num .)
    MENOR           reduce using rule 52 (ex -> num .)
    MAYOR_IGUAL     reduce using rule 52 (ex -> num .)
    MENOR_IGUAL     reduce using rule 52 (ex -> num .)
    SUMA            reduce using rule 52 (ex -> num .)
    RESTA           reduce using rule 52 (ex -> num .)
    IGUAL           reduce using rule 52 (ex -> num .)
    PARENTESIS_CIERRA reduce using rule 52 (ex -> num .)
    CONJUNCION      reduce using rule 52 (ex -> num .)
    DISYUNCION      reduce using rule 52 (ex -> num .)
    PUNTO_Y_COMA    reduce using rule 52 (ex -> num .)
    MULTIPLICACION  reduce using rule 52 (ex -> num .)
    DIVISION        reduce using rule 52 (ex -> num .)
    COMA            reduce using rule 52 (ex -> num .)
    LLAVE_CIERRA    reduce using rule 52 (ex -> num .)

  ! MULTIPLICACION  [ reduce using rule 64 (ex2 -> num .) ]
  ! DIVISION        [ reduce using rule 64 (ex2 -> num .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 64 (ex2 -> num .) ]


state 73

    (55) ex -> aritmetica .
    (61) ex1 -> aritmetica .
    (66) ex2 -> aritmetica .

  ! reduce/reduce conflict for IGUAL resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 55 (ex -> aritmetica .)
    MAYOR           reduce using rule 55 (ex -> aritmetica .)
    MENOR           reduce using rule 55 (ex -> aritmetica .)
    MAYOR_IGUAL     reduce using rule 55 (ex -> aritmetica .)
    MENOR_IGUAL     reduce using rule 55 (ex -> aritmetica .)
    SUMA            reduce using rule 55 (ex -> aritmetica .)
    RESTA           reduce using rule 55 (ex -> aritmetica .)
    IGUAL           reduce using rule 55 (ex -> aritmetica .)
    PARENTESIS_CIERRA reduce using rule 55 (ex -> aritmetica .)
    MULTIPLICACION  reduce using rule 66 (ex2 -> aritmetica .)
    DIVISION        reduce using rule 66 (ex2 -> aritmetica .)

  ! IGUAL           [ reduce using rule 61 (ex1 -> aritmetica .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 61 (ex1 -> aritmetica .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 66 (ex2 -> aritmetica .) ]


state 74

    (101) loop -> WHILE PARENTESIS_ABRE expersion . PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA

    PARENTESIS_CIERRA shift and go to state 111


state 75

    (102) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE . id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (103) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE . id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (104) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE . PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (105) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE . PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (82) id -> . variable
    (83) id -> . variable COMA id
    (84) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (85) variable -> . CADENA_NO_COMILLAS

    PARENTESIS_CIERRA shift and go to state 113
    CADENA_NO_COMILLAS shift and go to state 13

    id                             shift and go to state 112
    variable                       shift and go to state 24

state 76

    (14) define -> TYPE CADENA_NO_COMILLAS ASIGNACION ajson .

    PUNTO_Y_COMA    reduce using rule 14 (define -> TYPE CADENA_NO_COMILLAS ASIGNACION ajson .)


state 77

    (83) id -> variable COMA id .

    PUNTO_Y_COMA    reduce using rule 83 (id -> variable COMA id .)
    PARENTESIS_CIERRA reduce using rule 83 (id -> variable COMA id .)


state 78

    (106) function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE . valor PARENTESIS_CIERRA
    (107) function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE . PARENTESIS_CIERRA
    (87) valor -> . CADENA_COMILLAS
    (88) valor -> . num
    (89) valor -> . operacion
    (90) valor -> . bool
    (91) valor -> . NULL
    (92) valor -> . ajson
    (93) valor -> . CARACTER
    (94) valor -> . CADENA_NO_COMILLAS
    (95) valor -> . function_call
    (74) num -> . ENTERO
    (75) num -> . DECIMAL
    (32) operacion -> . aritmetica
    (33) operacion -> . booleana
    (34) operacion -> . comparacion
    (35) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (72) bool -> . TR
    (73) bool -> . FL
    (15) ajson -> . LLAVE_ABRE lista LLAVE_CIERRA
    (16) ajson -> . LLAVE_ABRE LLAVE_CIERRA
    (106) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (107) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (36) aritmetica -> . ex operador1 ex
    (37) aritmetica -> . ex2 operador2 ex2
    (48) booleana -> . ex3 comparador2 ex3
    (49) booleana -> . NEGACION ex3
    (42) comparacion -> . ex comparador ex
    (43) comparacion -> . ex1 IGUAL ex1
    (52) ex -> . num
    (53) ex -> . CHARACTER
    (54) ex -> . CADENA_NO_COMILLAS
    (55) ex -> . aritmetica
    (56) ex -> . comparacion
    (57) ex -> . PARENTESIS_ABRE ex PARENTESIS_CIERRA
    (64) ex2 -> . num
    (65) ex2 -> . CADENA_NO_COMILLAS
    (66) ex2 -> . aritmetica
    (67) ex2 -> . PARENTESIS_ABRE ex2 PARENTESIS_CIERRA
    (68) ex3 -> . bool
    (69) ex3 -> . CADENA_NO_COMILLAS
    (70) ex3 -> . comparacion
    (71) ex3 -> . PARENTESIS_ABRE ex3 PARENTESIS_CIERRA
    (58) ex1 -> . ex
    (59) ex1 -> . bool
    (60) ex1 -> . booleana
    (61) ex1 -> . aritmetica
    (62) ex1 -> . comparacion
    (63) ex1 -> . PARENTESIS_ABRE ex1 PARENTESIS_CIERRA

    PARENTESIS_CIERRA shift and go to state 115
    CADENA_COMILLAS shift and go to state 39
    NULL            shift and go to state 43
    CARACTER        shift and go to state 45
    CADENA_NO_COMILLAS shift and go to state 46
    ENTERO          shift and go to state 48
    DECIMAL         shift and go to state 49
    PARENTESIS_ABRE shift and go to state 53
    TR              shift and go to state 54
    FL              shift and go to state 55
    LLAVE_ABRE      shift and go to state 56
    NEGACION        shift and go to state 60
    CHARACTER       shift and go to state 62

    valor                          shift and go to state 114
    num                            shift and go to state 40
    operacion                      shift and go to state 41
    bool                           shift and go to state 42
    ajson                          shift and go to state 44
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 50
    booleana                       shift and go to state 51
    comparacion                    shift and go to state 52
    ex                             shift and go to state 57
    ex2                            shift and go to state 58
    ex3                            shift and go to state 59
    ex1                            shift and go to state 61

state 79

    (35) operacion -> PARENTESIS_ABRE operacion . PARENTESIS_CIERRA

    PARENTESIS_CIERRA shift and go to state 116


state 80

    (57) ex -> PARENTESIS_ABRE ex . PARENTESIS_CIERRA
    (58) ex1 -> ex .
    (36) aritmetica -> ex . operador1 ex
    (42) comparacion -> ex . comparador ex
    (38) operador1 -> . SUMA
    (39) operador1 -> . RESTA
    (44) comparador -> . MAYOR
    (45) comparador -> . MENOR
    (46) comparador -> . MAYOR_IGUAL
    (47) comparador -> . MENOR_IGUAL

  ! shift/reduce conflict for PARENTESIS_CIERRA resolved as shift
    PARENTESIS_CIERRA shift and go to state 117
    IGUAL           reduce using rule 58 (ex1 -> ex .)
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MAYOR           shift and go to state 95
    MENOR           shift and go to state 96
    MAYOR_IGUAL     shift and go to state 97
    MENOR_IGUAL     shift and go to state 98

  ! PARENTESIS_CIERRA [ reduce using rule 58 (ex1 -> ex .) ]

    operador1                      shift and go to state 91
    comparador                     shift and go to state 92

state 81

    (67) ex2 -> PARENTESIS_ABRE ex2 . PARENTESIS_CIERRA
    (37) aritmetica -> ex2 . operador2 ex2
    (40) operador2 -> . MULTIPLICACION
    (41) operador2 -> . DIVISION

    PARENTESIS_CIERRA shift and go to state 118
    MULTIPLICACION  shift and go to state 100
    DIVISION        shift and go to state 101

    operador2                      shift and go to state 99

state 82

    (71) ex3 -> PARENTESIS_ABRE ex3 . PARENTESIS_CIERRA
    (48) booleana -> ex3 . comparador2 ex3
    (50) comparador2 -> . CONJUNCION
    (51) comparador2 -> . DISYUNCION

    PARENTESIS_CIERRA shift and go to state 119
    CONJUNCION      shift and go to state 103
    DISYUNCION      shift and go to state 104

    comparador2                    shift and go to state 102

state 83

    (63) ex1 -> PARENTESIS_ABRE ex1 . PARENTESIS_CIERRA
    (43) comparacion -> ex1 . IGUAL ex1

    PARENTESIS_CIERRA shift and go to state 120
    IGUAL           shift and go to state 108


state 84

    (54) ex -> CADENA_NO_COMILLAS .
    (65) ex2 -> CADENA_NO_COMILLAS .
    (69) ex3 -> CADENA_NO_COMILLAS .

  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for MULTIPLICACION resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for DIVISION resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for CONJUNCION resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for DISYUNCION resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
    PARENTESIS_CIERRA reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    SUMA            reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    RESTA           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MAYOR           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MENOR           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MAYOR_IGUAL     reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MENOR_IGUAL     reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    IGUAL           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    CONJUNCION      reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    DISYUNCION      reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    PUNTO_Y_COMA    reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MULTIPLICACION  reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    DIVISION        reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    COMA            reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    LLAVE_CIERRA    reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)

  ! PARENTESIS_CIERRA [ reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .) ]
  ! MULTIPLICACION  [ reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .) ]
  ! DIVISION        [ reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .) ]
  ! CONJUNCION      [ reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .) ]
  ! DISYUNCION      [ reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .) ]


state 85

    (15) ajson -> LLAVE_ABRE lista . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 121


state 86

    (16) ajson -> LLAVE_ABRE LLAVE_CIERRA .

    PUNTO_Y_COMA    reduce using rule 16 (ajson -> LLAVE_ABRE LLAVE_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 16 (ajson -> LLAVE_ABRE LLAVE_CIERRA .)
    COMA            reduce using rule 16 (ajson -> LLAVE_ABRE LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 16 (ajson -> LLAVE_ABRE LLAVE_CIERRA .)


state 87

    (17) lista -> elemento .
    (18) lista -> elemento . COMA
    (19) lista -> elemento . COMA lista

    LLAVE_CIERRA    reduce using rule 17 (lista -> elemento .)
    COMA            shift and go to state 122


state 88

    (20) elemento -> clave . DOS_PUNTOS valor_t

    DOS_PUNTOS      shift and go to state 123


state 89

    (21) clave -> CADENA_NO_COMILLAS .

    DOS_PUNTOS      reduce using rule 21 (clave -> CADENA_NO_COMILLAS .)


state 90

    (22) clave -> CADENA_COMILLAS .

    DOS_PUNTOS      reduce using rule 22 (clave -> CADENA_COMILLAS .)


state 91

    (36) aritmetica -> ex operador1 . ex
    (52) ex -> . num
    (53) ex -> . CHARACTER
    (54) ex -> . CADENA_NO_COMILLAS
    (55) ex -> . aritmetica
    (56) ex -> . comparacion
    (57) ex -> . PARENTESIS_ABRE ex PARENTESIS_CIERRA
    (74) num -> . ENTERO
    (75) num -> . DECIMAL
    (36) aritmetica -> . ex operador1 ex
    (37) aritmetica -> . ex2 operador2 ex2
    (42) comparacion -> . ex comparador ex
    (43) comparacion -> . ex1 IGUAL ex1
    (64) ex2 -> . num
    (65) ex2 -> . CADENA_NO_COMILLAS
    (66) ex2 -> . aritmetica
    (67) ex2 -> . PARENTESIS_ABRE ex2 PARENTESIS_CIERRA
    (58) ex1 -> . ex
    (59) ex1 -> . bool
    (60) ex1 -> . booleana
    (61) ex1 -> . aritmetica
    (62) ex1 -> . comparacion
    (63) ex1 -> . PARENTESIS_ABRE ex1 PARENTESIS_CIERRA
    (72) bool -> . TR
    (73) bool -> . FL
    (48) booleana -> . ex3 comparador2 ex3
    (49) booleana -> . NEGACION ex3
    (68) ex3 -> . bool
    (69) ex3 -> . CADENA_NO_COMILLAS
    (70) ex3 -> . comparacion
    (71) ex3 -> . PARENTESIS_ABRE ex3 PARENTESIS_CIERRA

    CHARACTER       shift and go to state 62
    CADENA_NO_COMILLAS shift and go to state 84
    PARENTESIS_ABRE shift and go to state 127
    ENTERO          shift and go to state 48
    DECIMAL         shift and go to state 49
    TR              shift and go to state 54
    FL              shift and go to state 55
    NEGACION        shift and go to state 60

    ex                             shift and go to state 124
    num                            shift and go to state 72
    aritmetica                     shift and go to state 125
    comparacion                    shift and go to state 126
    ex2                            shift and go to state 58
    ex1                            shift and go to state 61
    bool                           shift and go to state 128
    booleana                       shift and go to state 107
    ex3                            shift and go to state 59

state 92

    (42) comparacion -> ex comparador . ex
    (52) ex -> . num
    (53) ex -> . CHARACTER
    (54) ex -> . CADENA_NO_COMILLAS
    (55) ex -> . aritmetica
    (56) ex -> . comparacion
    (57) ex -> . PARENTESIS_ABRE ex PARENTESIS_CIERRA
    (74) num -> . ENTERO
    (75) num -> . DECIMAL
    (36) aritmetica -> . ex operador1 ex
    (37) aritmetica -> . ex2 operador2 ex2
    (42) comparacion -> . ex comparador ex
    (43) comparacion -> . ex1 IGUAL ex1
    (64) ex2 -> . num
    (65) ex2 -> . CADENA_NO_COMILLAS
    (66) ex2 -> . aritmetica
    (67) ex2 -> . PARENTESIS_ABRE ex2 PARENTESIS_CIERRA
    (58) ex1 -> . ex
    (59) ex1 -> . bool
    (60) ex1 -> . booleana
    (61) ex1 -> . aritmetica
    (62) ex1 -> . comparacion
    (63) ex1 -> . PARENTESIS_ABRE ex1 PARENTESIS_CIERRA
    (72) bool -> . TR
    (73) bool -> . FL
    (48) booleana -> . ex3 comparador2 ex3
    (49) booleana -> . NEGACION ex3
    (68) ex3 -> . bool
    (69) ex3 -> . CADENA_NO_COMILLAS
    (70) ex3 -> . comparacion
    (71) ex3 -> . PARENTESIS_ABRE ex3 PARENTESIS_CIERRA

    CHARACTER       shift and go to state 62
    CADENA_NO_COMILLAS shift and go to state 84
    PARENTESIS_ABRE shift and go to state 127
    ENTERO          shift and go to state 48
    DECIMAL         shift and go to state 49
    TR              shift and go to state 54
    FL              shift and go to state 55
    NEGACION        shift and go to state 60

    ex                             shift and go to state 129
    num                            shift and go to state 72
    aritmetica                     shift and go to state 125
    comparacion                    shift and go to state 126
    ex2                            shift and go to state 58
    ex1                            shift and go to state 61
    bool                           shift and go to state 128
    booleana                       shift and go to state 107
    ex3                            shift and go to state 59

state 93

    (38) operador1 -> SUMA .

    CHARACTER       reduce using rule 38 (operador1 -> SUMA .)
    CADENA_NO_COMILLAS reduce using rule 38 (operador1 -> SUMA .)
    PARENTESIS_ABRE reduce using rule 38 (operador1 -> SUMA .)
    ENTERO          reduce using rule 38 (operador1 -> SUMA .)
    DECIMAL         reduce using rule 38 (operador1 -> SUMA .)
    TR              reduce using rule 38 (operador1 -> SUMA .)
    FL              reduce using rule 38 (operador1 -> SUMA .)
    NEGACION        reduce using rule 38 (operador1 -> SUMA .)


state 94

    (39) operador1 -> RESTA .

    CHARACTER       reduce using rule 39 (operador1 -> RESTA .)
    CADENA_NO_COMILLAS reduce using rule 39 (operador1 -> RESTA .)
    PARENTESIS_ABRE reduce using rule 39 (operador1 -> RESTA .)
    ENTERO          reduce using rule 39 (operador1 -> RESTA .)
    DECIMAL         reduce using rule 39 (operador1 -> RESTA .)
    TR              reduce using rule 39 (operador1 -> RESTA .)
    FL              reduce using rule 39 (operador1 -> RESTA .)
    NEGACION        reduce using rule 39 (operador1 -> RESTA .)


state 95

    (44) comparador -> MAYOR .

    CHARACTER       reduce using rule 44 (comparador -> MAYOR .)
    CADENA_NO_COMILLAS reduce using rule 44 (comparador -> MAYOR .)
    PARENTESIS_ABRE reduce using rule 44 (comparador -> MAYOR .)
    ENTERO          reduce using rule 44 (comparador -> MAYOR .)
    DECIMAL         reduce using rule 44 (comparador -> MAYOR .)
    TR              reduce using rule 44 (comparador -> MAYOR .)
    FL              reduce using rule 44 (comparador -> MAYOR .)
    NEGACION        reduce using rule 44 (comparador -> MAYOR .)


state 96

    (45) comparador -> MENOR .

    CHARACTER       reduce using rule 45 (comparador -> MENOR .)
    CADENA_NO_COMILLAS reduce using rule 45 (comparador -> MENOR .)
    PARENTESIS_ABRE reduce using rule 45 (comparador -> MENOR .)
    ENTERO          reduce using rule 45 (comparador -> MENOR .)
    DECIMAL         reduce using rule 45 (comparador -> MENOR .)
    TR              reduce using rule 45 (comparador -> MENOR .)
    FL              reduce using rule 45 (comparador -> MENOR .)
    NEGACION        reduce using rule 45 (comparador -> MENOR .)


state 97

    (46) comparador -> MAYOR_IGUAL .

    CHARACTER       reduce using rule 46 (comparador -> MAYOR_IGUAL .)
    CADENA_NO_COMILLAS reduce using rule 46 (comparador -> MAYOR_IGUAL .)
    PARENTESIS_ABRE reduce using rule 46 (comparador -> MAYOR_IGUAL .)
    ENTERO          reduce using rule 46 (comparador -> MAYOR_IGUAL .)
    DECIMAL         reduce using rule 46 (comparador -> MAYOR_IGUAL .)
    TR              reduce using rule 46 (comparador -> MAYOR_IGUAL .)
    FL              reduce using rule 46 (comparador -> MAYOR_IGUAL .)
    NEGACION        reduce using rule 46 (comparador -> MAYOR_IGUAL .)


state 98

    (47) comparador -> MENOR_IGUAL .

    CHARACTER       reduce using rule 47 (comparador -> MENOR_IGUAL .)
    CADENA_NO_COMILLAS reduce using rule 47 (comparador -> MENOR_IGUAL .)
    PARENTESIS_ABRE reduce using rule 47 (comparador -> MENOR_IGUAL .)
    ENTERO          reduce using rule 47 (comparador -> MENOR_IGUAL .)
    DECIMAL         reduce using rule 47 (comparador -> MENOR_IGUAL .)
    TR              reduce using rule 47 (comparador -> MENOR_IGUAL .)
    FL              reduce using rule 47 (comparador -> MENOR_IGUAL .)
    NEGACION        reduce using rule 47 (comparador -> MENOR_IGUAL .)


state 99

    (37) aritmetica -> ex2 operador2 . ex2
    (64) ex2 -> . num
    (65) ex2 -> . CADENA_NO_COMILLAS
    (66) ex2 -> . aritmetica
    (67) ex2 -> . PARENTESIS_ABRE ex2 PARENTESIS_CIERRA
    (74) num -> . ENTERO
    (75) num -> . DECIMAL
    (36) aritmetica -> . ex operador1 ex
    (37) aritmetica -> . ex2 operador2 ex2
    (52) ex -> . num
    (53) ex -> . CHARACTER
    (54) ex -> . CADENA_NO_COMILLAS
    (55) ex -> . aritmetica
    (56) ex -> . comparacion
    (57) ex -> . PARENTESIS_ABRE ex PARENTESIS_CIERRA
    (42) comparacion -> . ex comparador ex
    (43) comparacion -> . ex1 IGUAL ex1
    (58) ex1 -> . ex
    (59) ex1 -> . bool
    (60) ex1 -> . booleana
    (61) ex1 -> . aritmetica
    (62) ex1 -> . comparacion
    (63) ex1 -> . PARENTESIS_ABRE ex1 PARENTESIS_CIERRA
    (72) bool -> . TR
    (73) bool -> . FL
    (48) booleana -> . ex3 comparador2 ex3
    (49) booleana -> . NEGACION ex3
    (68) ex3 -> . bool
    (69) ex3 -> . CADENA_NO_COMILLAS
    (70) ex3 -> . comparacion
    (71) ex3 -> . PARENTESIS_ABRE ex3 PARENTESIS_CIERRA

    CADENA_NO_COMILLAS shift and go to state 132
    PARENTESIS_ABRE shift and go to state 134
    ENTERO          shift and go to state 48
    DECIMAL         shift and go to state 49
    CHARACTER       shift and go to state 62
    TR              shift and go to state 54
    FL              shift and go to state 55
    NEGACION        shift and go to state 60

    ex2                            shift and go to state 130
    num                            shift and go to state 131
    aritmetica                     shift and go to state 133
    ex                             shift and go to state 57
    comparacion                    shift and go to state 126
    ex1                            shift and go to state 61
    bool                           shift and go to state 128
    booleana                       shift and go to state 107
    ex3                            shift and go to state 59

state 100

    (40) operador2 -> MULTIPLICACION .

    CADENA_NO_COMILLAS reduce using rule 40 (operador2 -> MULTIPLICACION .)
    PARENTESIS_ABRE reduce using rule 40 (operador2 -> MULTIPLICACION .)
    ENTERO          reduce using rule 40 (operador2 -> MULTIPLICACION .)
    DECIMAL         reduce using rule 40 (operador2 -> MULTIPLICACION .)
    CHARACTER       reduce using rule 40 (operador2 -> MULTIPLICACION .)
    TR              reduce using rule 40 (operador2 -> MULTIPLICACION .)
    FL              reduce using rule 40 (operador2 -> MULTIPLICACION .)
    NEGACION        reduce using rule 40 (operador2 -> MULTIPLICACION .)


state 101

    (41) operador2 -> DIVISION .

    CADENA_NO_COMILLAS reduce using rule 41 (operador2 -> DIVISION .)
    PARENTESIS_ABRE reduce using rule 41 (operador2 -> DIVISION .)
    ENTERO          reduce using rule 41 (operador2 -> DIVISION .)
    DECIMAL         reduce using rule 41 (operador2 -> DIVISION .)
    CHARACTER       reduce using rule 41 (operador2 -> DIVISION .)
    TR              reduce using rule 41 (operador2 -> DIVISION .)
    FL              reduce using rule 41 (operador2 -> DIVISION .)
    NEGACION        reduce using rule 41 (operador2 -> DIVISION .)


state 102

    (48) booleana -> ex3 comparador2 . ex3
    (68) ex3 -> . bool
    (69) ex3 -> . CADENA_NO_COMILLAS
    (70) ex3 -> . comparacion
    (71) ex3 -> . PARENTESIS_ABRE ex3 PARENTESIS_CIERRA
    (72) bool -> . TR
    (73) bool -> . FL
    (42) comparacion -> . ex comparador ex
    (43) comparacion -> . ex1 IGUAL ex1
    (52) ex -> . num
    (53) ex -> . CHARACTER
    (54) ex -> . CADENA_NO_COMILLAS
    (55) ex -> . aritmetica
    (56) ex -> . comparacion
    (57) ex -> . PARENTESIS_ABRE ex PARENTESIS_CIERRA
    (58) ex1 -> . ex
    (59) ex1 -> . bool
    (60) ex1 -> . booleana
    (61) ex1 -> . aritmetica
    (62) ex1 -> . comparacion
    (63) ex1 -> . PARENTESIS_ABRE ex1 PARENTESIS_CIERRA
    (74) num -> . ENTERO
    (75) num -> . DECIMAL
    (36) aritmetica -> . ex operador1 ex
    (37) aritmetica -> . ex2 operador2 ex2
    (48) booleana -> . ex3 comparador2 ex3
    (49) booleana -> . NEGACION ex3
    (64) ex2 -> . num
    (65) ex2 -> . CADENA_NO_COMILLAS
    (66) ex2 -> . aritmetica
    (67) ex2 -> . PARENTESIS_ABRE ex2 PARENTESIS_CIERRA

    CADENA_NO_COMILLAS shift and go to state 106
    PARENTESIS_ABRE shift and go to state 63
    TR              shift and go to state 54
    FL              shift and go to state 55
    CHARACTER       shift and go to state 62
    ENTERO          shift and go to state 48
    DECIMAL         shift and go to state 49
    NEGACION        shift and go to state 60

    ex3                            shift and go to state 135
    bool                           shift and go to state 68
    comparacion                    shift and go to state 70
    ex                             shift and go to state 71
    ex1                            shift and go to state 61
    num                            shift and go to state 72
    aritmetica                     shift and go to state 73
    booleana                       shift and go to state 107
    ex2                            shift and go to state 58

state 103

    (50) comparador2 -> CONJUNCION .

    CADENA_NO_COMILLAS reduce using rule 50 (comparador2 -> CONJUNCION .)
    PARENTESIS_ABRE reduce using rule 50 (comparador2 -> CONJUNCION .)
    TR              reduce using rule 50 (comparador2 -> CONJUNCION .)
    FL              reduce using rule 50 (comparador2 -> CONJUNCION .)
    CHARACTER       reduce using rule 50 (comparador2 -> CONJUNCION .)
    ENTERO          reduce using rule 50 (comparador2 -> CONJUNCION .)
    DECIMAL         reduce using rule 50 (comparador2 -> CONJUNCION .)
    NEGACION        reduce using rule 50 (comparador2 -> CONJUNCION .)


state 104

    (51) comparador2 -> DISYUNCION .

    CADENA_NO_COMILLAS reduce using rule 51 (comparador2 -> DISYUNCION .)
    PARENTESIS_ABRE reduce using rule 51 (comparador2 -> DISYUNCION .)
    TR              reduce using rule 51 (comparador2 -> DISYUNCION .)
    FL              reduce using rule 51 (comparador2 -> DISYUNCION .)
    CHARACTER       reduce using rule 51 (comparador2 -> DISYUNCION .)
    ENTERO          reduce using rule 51 (comparador2 -> DISYUNCION .)
    DECIMAL         reduce using rule 51 (comparador2 -> DISYUNCION .)
    NEGACION        reduce using rule 51 (comparador2 -> DISYUNCION .)


state 105

    (49) booleana -> NEGACION ex3 .
    (48) booleana -> ex3 . comparador2 ex3
    (50) comparador2 -> . CONJUNCION
    (51) comparador2 -> . DISYUNCION

  ! shift/reduce conflict for CONJUNCION resolved as shift
  ! shift/reduce conflict for DISYUNCION resolved as shift
    PUNTO_Y_COMA    reduce using rule 49 (booleana -> NEGACION ex3 .)
    IGUAL           reduce using rule 49 (booleana -> NEGACION ex3 .)
    PARENTESIS_CIERRA reduce using rule 49 (booleana -> NEGACION ex3 .)
    SUMA            reduce using rule 49 (booleana -> NEGACION ex3 .)
    RESTA           reduce using rule 49 (booleana -> NEGACION ex3 .)
    MAYOR           reduce using rule 49 (booleana -> NEGACION ex3 .)
    MENOR           reduce using rule 49 (booleana -> NEGACION ex3 .)
    MAYOR_IGUAL     reduce using rule 49 (booleana -> NEGACION ex3 .)
    MENOR_IGUAL     reduce using rule 49 (booleana -> NEGACION ex3 .)
    MULTIPLICACION  reduce using rule 49 (booleana -> NEGACION ex3 .)
    DIVISION        reduce using rule 49 (booleana -> NEGACION ex3 .)
    COMA            reduce using rule 49 (booleana -> NEGACION ex3 .)
    LLAVE_CIERRA    reduce using rule 49 (booleana -> NEGACION ex3 .)
    CONJUNCION      shift and go to state 103
    DISYUNCION      shift and go to state 104

  ! CONJUNCION      [ reduce using rule 49 (booleana -> NEGACION ex3 .) ]
  ! DISYUNCION      [ reduce using rule 49 (booleana -> NEGACION ex3 .) ]

    comparador2                    shift and go to state 102

state 106

    (69) ex3 -> CADENA_NO_COMILLAS .
    (54) ex -> CADENA_NO_COMILLAS .
    (65) ex2 -> CADENA_NO_COMILLAS .

  ! reduce/reduce conflict for MAYOR resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for MENOR resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for SUMA resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for RESTA resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for IGUAL resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for MULTIPLICACION resolved using rule 65 (ex2 -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for DIVISION resolved using rule 65 (ex2 -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
    CONJUNCION      reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .)
    DISYUNCION      reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .)
    PUNTO_Y_COMA    reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .)
    COMA            reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .)
    LLAVE_CIERRA    reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .)
    MAYOR           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MENOR           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MAYOR_IGUAL     reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MENOR_IGUAL     reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    SUMA            reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    RESTA           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    IGUAL           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    PARENTESIS_CIERRA reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MULTIPLICACION  reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .)
    DIVISION        reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .)

  ! IGUAL           [ reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .) ]
  ! SUMA            [ reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .) ]
  ! RESTA           [ reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .) ]
  ! MAYOR           [ reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .) ]
  ! MENOR           [ reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .) ]
  ! MAYOR_IGUAL     [ reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .) ]
  ! MENOR_IGUAL     [ reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .) ]
  ! MULTIPLICACION  [ reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .) ]
  ! DIVISION        [ reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .) ]


state 107

    (60) ex1 -> booleana .

    IGUAL           reduce using rule 60 (ex1 -> booleana .)
    PARENTESIS_CIERRA reduce using rule 60 (ex1 -> booleana .)
    CONJUNCION      reduce using rule 60 (ex1 -> booleana .)
    DISYUNCION      reduce using rule 60 (ex1 -> booleana .)
    PUNTO_Y_COMA    reduce using rule 60 (ex1 -> booleana .)
    SUMA            reduce using rule 60 (ex1 -> booleana .)
    RESTA           reduce using rule 60 (ex1 -> booleana .)
    MAYOR           reduce using rule 60 (ex1 -> booleana .)
    MENOR           reduce using rule 60 (ex1 -> booleana .)
    MAYOR_IGUAL     reduce using rule 60 (ex1 -> booleana .)
    MENOR_IGUAL     reduce using rule 60 (ex1 -> booleana .)
    MULTIPLICACION  reduce using rule 60 (ex1 -> booleana .)
    DIVISION        reduce using rule 60 (ex1 -> booleana .)
    COMA            reduce using rule 60 (ex1 -> booleana .)
    LLAVE_CIERRA    reduce using rule 60 (ex1 -> booleana .)


state 108

    (43) comparacion -> ex1 IGUAL . ex1
    (58) ex1 -> . ex
    (59) ex1 -> . bool
    (60) ex1 -> . booleana
    (61) ex1 -> . aritmetica
    (62) ex1 -> . comparacion
    (63) ex1 -> . PARENTESIS_ABRE ex1 PARENTESIS_CIERRA
    (52) ex -> . num
    (53) ex -> . CHARACTER
    (54) ex -> . CADENA_NO_COMILLAS
    (55) ex -> . aritmetica
    (56) ex -> . comparacion
    (57) ex -> . PARENTESIS_ABRE ex PARENTESIS_CIERRA
    (72) bool -> . TR
    (73) bool -> . FL
    (48) booleana -> . ex3 comparador2 ex3
    (49) booleana -> . NEGACION ex3
    (36) aritmetica -> . ex operador1 ex
    (37) aritmetica -> . ex2 operador2 ex2
    (42) comparacion -> . ex comparador ex
    (43) comparacion -> . ex1 IGUAL ex1
    (74) num -> . ENTERO
    (75) num -> . DECIMAL
    (68) ex3 -> . bool
    (69) ex3 -> . CADENA_NO_COMILLAS
    (70) ex3 -> . comparacion
    (71) ex3 -> . PARENTESIS_ABRE ex3 PARENTESIS_CIERRA
    (64) ex2 -> . num
    (65) ex2 -> . CADENA_NO_COMILLAS
    (66) ex2 -> . aritmetica
    (67) ex2 -> . PARENTESIS_ABRE ex2 PARENTESIS_CIERRA

    PARENTESIS_ABRE shift and go to state 140
    CHARACTER       shift and go to state 62
    CADENA_NO_COMILLAS shift and go to state 141
    TR              shift and go to state 54
    FL              shift and go to state 55
    NEGACION        shift and go to state 60
    ENTERO          shift and go to state 48
    DECIMAL         shift and go to state 49

    ex1                            shift and go to state 136
    ex                             shift and go to state 137
    bool                           shift and go to state 128
    booleana                       shift and go to state 107
    aritmetica                     shift and go to state 138
    comparacion                    shift and go to state 139
    num                            shift and go to state 72
    ex3                            shift and go to state 59
    ex2                            shift and go to state 58

state 109

    (57) ex -> PARENTESIS_ABRE ex . PARENTESIS_CIERRA
    (58) ex1 -> ex .
    (42) comparacion -> ex . comparador ex
    (36) aritmetica -> ex . operador1 ex
    (44) comparador -> . MAYOR
    (45) comparador -> . MENOR
    (46) comparador -> . MAYOR_IGUAL
    (47) comparador -> . MENOR_IGUAL
    (38) operador1 -> . SUMA
    (39) operador1 -> . RESTA

  ! shift/reduce conflict for PARENTESIS_CIERRA resolved as shift
    PARENTESIS_CIERRA shift and go to state 117
    IGUAL           reduce using rule 58 (ex1 -> ex .)
    MAYOR           shift and go to state 95
    MENOR           shift and go to state 96
    MAYOR_IGUAL     shift and go to state 97
    MENOR_IGUAL     shift and go to state 98
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94

  ! PARENTESIS_CIERRA [ reduce using rule 58 (ex1 -> ex .) ]

    comparador                     shift and go to state 92
    operador1                      shift and go to state 91

state 110

    (96) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA . LLAVE_ABRE statement LLAVE_CIERRA
    (97) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA . LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 142


state 111

    (101) loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA . LLAVE_ABRE statement LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 143


state 112

    (102) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id . PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (103) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id . PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    PARENTESIS_CIERRA shift and go to state 144


state 113

    (104) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA . DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (105) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA . DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    DOS_PUNTOS      shift and go to state 145


state 114

    (106) function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor . PARENTESIS_CIERRA

    PARENTESIS_CIERRA shift and go to state 146


state 115

    (107) function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .

    PUNTO_Y_COMA    reduce using rule 107 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 107 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)


state 116

    (35) operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA .

    PUNTO_Y_COMA    reduce using rule 35 (operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 35 (operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA .)
    COMA            reduce using rule 35 (operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA .)
    LLAVE_CIERRA    reduce using rule 35 (operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA .)


state 117

    (57) ex -> PARENTESIS_ABRE ex PARENTESIS_CIERRA .

    SUMA            reduce using rule 57 (ex -> PARENTESIS_ABRE ex PARENTESIS_CIERRA .)
    RESTA           reduce using rule 57 (ex -> PARENTESIS_ABRE ex PARENTESIS_CIERRA .)
    MAYOR           reduce using rule 57 (ex -> PARENTESIS_ABRE ex PARENTESIS_CIERRA .)
    MENOR           reduce using rule 57 (ex -> PARENTESIS_ABRE ex PARENTESIS_CIERRA .)
    MAYOR_IGUAL     reduce using rule 57 (ex -> PARENTESIS_ABRE ex PARENTESIS_CIERRA .)
    MENOR_IGUAL     reduce using rule 57 (ex -> PARENTESIS_ABRE ex PARENTESIS_CIERRA .)
    IGUAL           reduce using rule 57 (ex -> PARENTESIS_ABRE ex PARENTESIS_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 57 (ex -> PARENTESIS_ABRE ex PARENTESIS_CIERRA .)
    CONJUNCION      reduce using rule 57 (ex -> PARENTESIS_ABRE ex PARENTESIS_CIERRA .)
    DISYUNCION      reduce using rule 57 (ex -> PARENTESIS_ABRE ex PARENTESIS_CIERRA .)
    PUNTO_Y_COMA    reduce using rule 57 (ex -> PARENTESIS_ABRE ex PARENTESIS_CIERRA .)
    MULTIPLICACION  reduce using rule 57 (ex -> PARENTESIS_ABRE ex PARENTESIS_CIERRA .)
    DIVISION        reduce using rule 57 (ex -> PARENTESIS_ABRE ex PARENTESIS_CIERRA .)
    COMA            reduce using rule 57 (ex -> PARENTESIS_ABRE ex PARENTESIS_CIERRA .)
    LLAVE_CIERRA    reduce using rule 57 (ex -> PARENTESIS_ABRE ex PARENTESIS_CIERRA .)


state 118

    (67) ex2 -> PARENTESIS_ABRE ex2 PARENTESIS_CIERRA .

    MULTIPLICACION  reduce using rule 67 (ex2 -> PARENTESIS_ABRE ex2 PARENTESIS_CIERRA .)
    DIVISION        reduce using rule 67 (ex2 -> PARENTESIS_ABRE ex2 PARENTESIS_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 67 (ex2 -> PARENTESIS_ABRE ex2 PARENTESIS_CIERRA .)
    CONJUNCION      reduce using rule 67 (ex2 -> PARENTESIS_ABRE ex2 PARENTESIS_CIERRA .)
    DISYUNCION      reduce using rule 67 (ex2 -> PARENTESIS_ABRE ex2 PARENTESIS_CIERRA .)
    PUNTO_Y_COMA    reduce using rule 67 (ex2 -> PARENTESIS_ABRE ex2 PARENTESIS_CIERRA .)
    IGUAL           reduce using rule 67 (ex2 -> PARENTESIS_ABRE ex2 PARENTESIS_CIERRA .)
    SUMA            reduce using rule 67 (ex2 -> PARENTESIS_ABRE ex2 PARENTESIS_CIERRA .)
    RESTA           reduce using rule 67 (ex2 -> PARENTESIS_ABRE ex2 PARENTESIS_CIERRA .)
    MAYOR           reduce using rule 67 (ex2 -> PARENTESIS_ABRE ex2 PARENTESIS_CIERRA .)
    MENOR           reduce using rule 67 (ex2 -> PARENTESIS_ABRE ex2 PARENTESIS_CIERRA .)
    MAYOR_IGUAL     reduce using rule 67 (ex2 -> PARENTESIS_ABRE ex2 PARENTESIS_CIERRA .)
    MENOR_IGUAL     reduce using rule 67 (ex2 -> PARENTESIS_ABRE ex2 PARENTESIS_CIERRA .)
    COMA            reduce using rule 67 (ex2 -> PARENTESIS_ABRE ex2 PARENTESIS_CIERRA .)
    LLAVE_CIERRA    reduce using rule 67 (ex2 -> PARENTESIS_ABRE ex2 PARENTESIS_CIERRA .)


state 119

    (71) ex3 -> PARENTESIS_ABRE ex3 PARENTESIS_CIERRA .

    CONJUNCION      reduce using rule 71 (ex3 -> PARENTESIS_ABRE ex3 PARENTESIS_CIERRA .)
    DISYUNCION      reduce using rule 71 (ex3 -> PARENTESIS_ABRE ex3 PARENTESIS_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 71 (ex3 -> PARENTESIS_ABRE ex3 PARENTESIS_CIERRA .)
    PUNTO_Y_COMA    reduce using rule 71 (ex3 -> PARENTESIS_ABRE ex3 PARENTESIS_CIERRA .)
    IGUAL           reduce using rule 71 (ex3 -> PARENTESIS_ABRE ex3 PARENTESIS_CIERRA .)
    SUMA            reduce using rule 71 (ex3 -> PARENTESIS_ABRE ex3 PARENTESIS_CIERRA .)
    RESTA           reduce using rule 71 (ex3 -> PARENTESIS_ABRE ex3 PARENTESIS_CIERRA .)
    MAYOR           reduce using rule 71 (ex3 -> PARENTESIS_ABRE ex3 PARENTESIS_CIERRA .)
    MENOR           reduce using rule 71 (ex3 -> PARENTESIS_ABRE ex3 PARENTESIS_CIERRA .)
    MAYOR_IGUAL     reduce using rule 71 (ex3 -> PARENTESIS_ABRE ex3 PARENTESIS_CIERRA .)
    MENOR_IGUAL     reduce using rule 71 (ex3 -> PARENTESIS_ABRE ex3 PARENTESIS_CIERRA .)
    MULTIPLICACION  reduce using rule 71 (ex3 -> PARENTESIS_ABRE ex3 PARENTESIS_CIERRA .)
    DIVISION        reduce using rule 71 (ex3 -> PARENTESIS_ABRE ex3 PARENTESIS_CIERRA .)
    COMA            reduce using rule 71 (ex3 -> PARENTESIS_ABRE ex3 PARENTESIS_CIERRA .)
    LLAVE_CIERRA    reduce using rule 71 (ex3 -> PARENTESIS_ABRE ex3 PARENTESIS_CIERRA .)


state 120

    (63) ex1 -> PARENTESIS_ABRE ex1 PARENTESIS_CIERRA .

    IGUAL           reduce using rule 63 (ex1 -> PARENTESIS_ABRE ex1 PARENTESIS_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 63 (ex1 -> PARENTESIS_ABRE ex1 PARENTESIS_CIERRA .)
    CONJUNCION      reduce using rule 63 (ex1 -> PARENTESIS_ABRE ex1 PARENTESIS_CIERRA .)
    DISYUNCION      reduce using rule 63 (ex1 -> PARENTESIS_ABRE ex1 PARENTESIS_CIERRA .)
    PUNTO_Y_COMA    reduce using rule 63 (ex1 -> PARENTESIS_ABRE ex1 PARENTESIS_CIERRA .)
    SUMA            reduce using rule 63 (ex1 -> PARENTESIS_ABRE ex1 PARENTESIS_CIERRA .)
    RESTA           reduce using rule 63 (ex1 -> PARENTESIS_ABRE ex1 PARENTESIS_CIERRA .)
    MAYOR           reduce using rule 63 (ex1 -> PARENTESIS_ABRE ex1 PARENTESIS_CIERRA .)
    MENOR           reduce using rule 63 (ex1 -> PARENTESIS_ABRE ex1 PARENTESIS_CIERRA .)
    MAYOR_IGUAL     reduce using rule 63 (ex1 -> PARENTESIS_ABRE ex1 PARENTESIS_CIERRA .)
    MENOR_IGUAL     reduce using rule 63 (ex1 -> PARENTESIS_ABRE ex1 PARENTESIS_CIERRA .)
    MULTIPLICACION  reduce using rule 63 (ex1 -> PARENTESIS_ABRE ex1 PARENTESIS_CIERRA .)
    DIVISION        reduce using rule 63 (ex1 -> PARENTESIS_ABRE ex1 PARENTESIS_CIERRA .)
    COMA            reduce using rule 63 (ex1 -> PARENTESIS_ABRE ex1 PARENTESIS_CIERRA .)
    LLAVE_CIERRA    reduce using rule 63 (ex1 -> PARENTESIS_ABRE ex1 PARENTESIS_CIERRA .)


state 121

    (15) ajson -> LLAVE_ABRE lista LLAVE_CIERRA .

    PUNTO_Y_COMA    reduce using rule 15 (ajson -> LLAVE_ABRE lista LLAVE_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 15 (ajson -> LLAVE_ABRE lista LLAVE_CIERRA .)
    COMA            reduce using rule 15 (ajson -> LLAVE_ABRE lista LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 15 (ajson -> LLAVE_ABRE lista LLAVE_CIERRA .)


state 122

    (18) lista -> elemento COMA .
    (19) lista -> elemento COMA . lista
    (17) lista -> . elemento
    (18) lista -> . elemento COMA
    (19) lista -> . elemento COMA lista
    (20) elemento -> . clave DOS_PUNTOS valor_t
    (21) clave -> . CADENA_NO_COMILLAS
    (22) clave -> . CADENA_COMILLAS

    LLAVE_CIERRA    reduce using rule 18 (lista -> elemento COMA .)
    CADENA_NO_COMILLAS shift and go to state 89
    CADENA_COMILLAS shift and go to state 90

    elemento                       shift and go to state 87
    lista                          shift and go to state 147
    clave                          shift and go to state 88

state 123

    (20) elemento -> clave DOS_PUNTOS . valor_t
    (23) valor_t -> . CADENA_COMILLAS
    (24) valor_t -> . num
    (25) valor_t -> . operacion
    (26) valor_t -> . bool
    (27) valor_t -> . NULL
    (28) valor_t -> . ajson
    (29) valor_t -> . tipo
    (30) valor_t -> . CARACTER
    (31) valor_t -> . CADENA_NO_COMILLAS
    (74) num -> . ENTERO
    (75) num -> . DECIMAL
    (32) operacion -> . aritmetica
    (33) operacion -> . booleana
    (34) operacion -> . comparacion
    (35) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (72) bool -> . TR
    (73) bool -> . FL
    (15) ajson -> . LLAVE_ABRE lista LLAVE_CIERRA
    (16) ajson -> . LLAVE_ABRE LLAVE_CIERRA
    (76) tipo -> . INT
    (77) tipo -> . FLOAT
    (78) tipo -> . CHARACTER
    (79) tipo -> . BOOLEAN
    (80) tipo -> . CADENA_NO_COMILLAS
    (36) aritmetica -> . ex operador1 ex
    (37) aritmetica -> . ex2 operador2 ex2
    (48) booleana -> . ex3 comparador2 ex3
    (49) booleana -> . NEGACION ex3
    (42) comparacion -> . ex comparador ex
    (43) comparacion -> . ex1 IGUAL ex1
    (52) ex -> . num
    (53) ex -> . CHARACTER
    (54) ex -> . CADENA_NO_COMILLAS
    (55) ex -> . aritmetica
    (56) ex -> . comparacion
    (57) ex -> . PARENTESIS_ABRE ex PARENTESIS_CIERRA
    (64) ex2 -> . num
    (65) ex2 -> . CADENA_NO_COMILLAS
    (66) ex2 -> . aritmetica
    (67) ex2 -> . PARENTESIS_ABRE ex2 PARENTESIS_CIERRA
    (68) ex3 -> . bool
    (69) ex3 -> . CADENA_NO_COMILLAS
    (70) ex3 -> . comparacion
    (71) ex3 -> . PARENTESIS_ABRE ex3 PARENTESIS_CIERRA
    (58) ex1 -> . ex
    (59) ex1 -> . bool
    (60) ex1 -> . booleana
    (61) ex1 -> . aritmetica
    (62) ex1 -> . comparacion
    (63) ex1 -> . PARENTESIS_ABRE ex1 PARENTESIS_CIERRA

    CADENA_COMILLAS shift and go to state 149
    NULL            shift and go to state 153
    CARACTER        shift and go to state 156
    CADENA_NO_COMILLAS shift and go to state 157
    ENTERO          shift and go to state 48
    DECIMAL         shift and go to state 49
    PARENTESIS_ABRE shift and go to state 53
    TR              shift and go to state 54
    FL              shift and go to state 55
    LLAVE_ABRE      shift and go to state 56
    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    CHARACTER       shift and go to state 158
    BOOLEAN         shift and go to state 36
    NEGACION        shift and go to state 60

    valor_t                        shift and go to state 148
    num                            shift and go to state 150
    operacion                      shift and go to state 151
    bool                           shift and go to state 152
    ajson                          shift and go to state 154
    tipo                           shift and go to state 155
    aritmetica                     shift and go to state 50
    booleana                       shift and go to state 51
    comparacion                    shift and go to state 52
    ex                             shift and go to state 57
    ex2                            shift and go to state 58
    ex3                            shift and go to state 59
    ex1                            shift and go to state 61

state 124

    (36) aritmetica -> ex operador1 ex .
    (36) aritmetica -> ex . operador1 ex
    (42) comparacion -> ex . comparador ex
    (58) ex1 -> ex .
    (38) operador1 -> . SUMA
    (39) operador1 -> . RESTA
    (44) comparador -> . MAYOR
    (45) comparador -> . MENOR
    (46) comparador -> . MAYOR_IGUAL
    (47) comparador -> . MENOR_IGUAL

  ! reduce/reduce conflict for IGUAL resolved using rule 36 (aritmetica -> ex operador1 ex .)
  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
    PUNTO_Y_COMA    reduce using rule 36 (aritmetica -> ex operador1 ex .)
    IGUAL           reduce using rule 36 (aritmetica -> ex operador1 ex .)
    MULTIPLICACION  reduce using rule 36 (aritmetica -> ex operador1 ex .)
    DIVISION        reduce using rule 36 (aritmetica -> ex operador1 ex .)
    PARENTESIS_CIERRA reduce using rule 36 (aritmetica -> ex operador1 ex .)
    CONJUNCION      reduce using rule 36 (aritmetica -> ex operador1 ex .)
    DISYUNCION      reduce using rule 36 (aritmetica -> ex operador1 ex .)
    COMA            reduce using rule 36 (aritmetica -> ex operador1 ex .)
    LLAVE_CIERRA    reduce using rule 36 (aritmetica -> ex operador1 ex .)
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MAYOR           shift and go to state 95
    MENOR           shift and go to state 96
    MAYOR_IGUAL     shift and go to state 97
    MENOR_IGUAL     shift and go to state 98

  ! SUMA            [ reduce using rule 36 (aritmetica -> ex operador1 ex .) ]
  ! RESTA           [ reduce using rule 36 (aritmetica -> ex operador1 ex .) ]
  ! MAYOR           [ reduce using rule 36 (aritmetica -> ex operador1 ex .) ]
  ! MENOR           [ reduce using rule 36 (aritmetica -> ex operador1 ex .) ]
  ! MAYOR_IGUAL     [ reduce using rule 36 (aritmetica -> ex operador1 ex .) ]
  ! MENOR_IGUAL     [ reduce using rule 36 (aritmetica -> ex operador1 ex .) ]
  ! IGUAL           [ reduce using rule 58 (ex1 -> ex .) ]

    operador1                      shift and go to state 91
    comparador                     shift and go to state 92

state 125

    (55) ex -> aritmetica .
    (66) ex2 -> aritmetica .
    (61) ex1 -> aritmetica .

  ! reduce/reduce conflict for MULTIPLICACION resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for DIVISION resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for IGUAL resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 55 (ex -> aritmetica .)
    CONJUNCION      reduce using rule 55 (ex -> aritmetica .)
    DISYUNCION      reduce using rule 55 (ex -> aritmetica .)
    PUNTO_Y_COMA    reduce using rule 55 (ex -> aritmetica .)
    IGUAL           reduce using rule 55 (ex -> aritmetica .)
    PARENTESIS_CIERRA reduce using rule 55 (ex -> aritmetica .)
    SUMA            reduce using rule 55 (ex -> aritmetica .)
    RESTA           reduce using rule 55 (ex -> aritmetica .)
    MAYOR           reduce using rule 55 (ex -> aritmetica .)
    MENOR           reduce using rule 55 (ex -> aritmetica .)
    MAYOR_IGUAL     reduce using rule 55 (ex -> aritmetica .)
    MENOR_IGUAL     reduce using rule 55 (ex -> aritmetica .)
    MULTIPLICACION  reduce using rule 55 (ex -> aritmetica .)
    DIVISION        reduce using rule 55 (ex -> aritmetica .)
    COMA            reduce using rule 55 (ex -> aritmetica .)
    LLAVE_CIERRA    reduce using rule 55 (ex -> aritmetica .)

  ! MULTIPLICACION  [ reduce using rule 66 (ex2 -> aritmetica .) ]
  ! DIVISION        [ reduce using rule 66 (ex2 -> aritmetica .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 66 (ex2 -> aritmetica .) ]
  ! IGUAL           [ reduce using rule 61 (ex1 -> aritmetica .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 61 (ex1 -> aritmetica .) ]


state 126

    (56) ex -> comparacion .
    (62) ex1 -> comparacion .
    (70) ex3 -> comparacion .

  ! reduce/reduce conflict for IGUAL resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for CONJUNCION resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for DISYUNCION resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 56 (ex -> comparacion .)
    CONJUNCION      reduce using rule 56 (ex -> comparacion .)
    DISYUNCION      reduce using rule 56 (ex -> comparacion .)
    PUNTO_Y_COMA    reduce using rule 56 (ex -> comparacion .)
    IGUAL           reduce using rule 56 (ex -> comparacion .)
    PARENTESIS_CIERRA reduce using rule 56 (ex -> comparacion .)
    SUMA            reduce using rule 56 (ex -> comparacion .)
    RESTA           reduce using rule 56 (ex -> comparacion .)
    MAYOR           reduce using rule 56 (ex -> comparacion .)
    MENOR           reduce using rule 56 (ex -> comparacion .)
    MAYOR_IGUAL     reduce using rule 56 (ex -> comparacion .)
    MENOR_IGUAL     reduce using rule 56 (ex -> comparacion .)
    MULTIPLICACION  reduce using rule 56 (ex -> comparacion .)
    DIVISION        reduce using rule 56 (ex -> comparacion .)
    COMA            reduce using rule 56 (ex -> comparacion .)
    LLAVE_CIERRA    reduce using rule 56 (ex -> comparacion .)

  ! IGUAL           [ reduce using rule 62 (ex1 -> comparacion .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 62 (ex1 -> comparacion .) ]
  ! CONJUNCION      [ reduce using rule 70 (ex3 -> comparacion .) ]
  ! DISYUNCION      [ reduce using rule 70 (ex3 -> comparacion .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 70 (ex3 -> comparacion .) ]


state 127

    (57) ex -> PARENTESIS_ABRE . ex PARENTESIS_CIERRA
    (67) ex2 -> PARENTESIS_ABRE . ex2 PARENTESIS_CIERRA
    (63) ex1 -> PARENTESIS_ABRE . ex1 PARENTESIS_CIERRA
    (71) ex3 -> PARENTESIS_ABRE . ex3 PARENTESIS_CIERRA
    (52) ex -> . num
    (53) ex -> . CHARACTER
    (54) ex -> . CADENA_NO_COMILLAS
    (55) ex -> . aritmetica
    (56) ex -> . comparacion
    (57) ex -> . PARENTESIS_ABRE ex PARENTESIS_CIERRA
    (64) ex2 -> . num
    (65) ex2 -> . CADENA_NO_COMILLAS
    (66) ex2 -> . aritmetica
    (67) ex2 -> . PARENTESIS_ABRE ex2 PARENTESIS_CIERRA
    (58) ex1 -> . ex
    (59) ex1 -> . bool
    (60) ex1 -> . booleana
    (61) ex1 -> . aritmetica
    (62) ex1 -> . comparacion
    (63) ex1 -> . PARENTESIS_ABRE ex1 PARENTESIS_CIERRA
    (68) ex3 -> . bool
    (69) ex3 -> . CADENA_NO_COMILLAS
    (70) ex3 -> . comparacion
    (71) ex3 -> . PARENTESIS_ABRE ex3 PARENTESIS_CIERRA
    (74) num -> . ENTERO
    (75) num -> . DECIMAL
    (36) aritmetica -> . ex operador1 ex
    (37) aritmetica -> . ex2 operador2 ex2
    (42) comparacion -> . ex comparador ex
    (43) comparacion -> . ex1 IGUAL ex1
    (72) bool -> . TR
    (73) bool -> . FL
    (48) booleana -> . ex3 comparador2 ex3
    (49) booleana -> . NEGACION ex3

    CHARACTER       shift and go to state 62
    CADENA_NO_COMILLAS shift and go to state 84
    PARENTESIS_ABRE shift and go to state 127
    ENTERO          shift and go to state 48
    DECIMAL         shift and go to state 49
    TR              shift and go to state 54
    FL              shift and go to state 55
    NEGACION        shift and go to state 60

    ex                             shift and go to state 80
    ex2                            shift and go to state 81
    ex1                            shift and go to state 83
    ex3                            shift and go to state 82
    num                            shift and go to state 72
    aritmetica                     shift and go to state 125
    comparacion                    shift and go to state 126
    bool                           shift and go to state 128
    booleana                       shift and go to state 107

state 128

    (59) ex1 -> bool .
    (68) ex3 -> bool .

  ! reduce/reduce conflict for CONJUNCION resolved using rule 59 (ex1 -> bool .)
  ! reduce/reduce conflict for DISYUNCION resolved using rule 59 (ex1 -> bool .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 59 (ex1 -> bool .)
    IGUAL           reduce using rule 59 (ex1 -> bool .)
    CONJUNCION      reduce using rule 59 (ex1 -> bool .)
    DISYUNCION      reduce using rule 59 (ex1 -> bool .)
    PUNTO_Y_COMA    reduce using rule 59 (ex1 -> bool .)
    PARENTESIS_CIERRA reduce using rule 59 (ex1 -> bool .)
    SUMA            reduce using rule 59 (ex1 -> bool .)
    RESTA           reduce using rule 59 (ex1 -> bool .)
    MAYOR           reduce using rule 59 (ex1 -> bool .)
    MENOR           reduce using rule 59 (ex1 -> bool .)
    MAYOR_IGUAL     reduce using rule 59 (ex1 -> bool .)
    MENOR_IGUAL     reduce using rule 59 (ex1 -> bool .)
    MULTIPLICACION  reduce using rule 59 (ex1 -> bool .)
    DIVISION        reduce using rule 59 (ex1 -> bool .)
    COMA            reduce using rule 59 (ex1 -> bool .)
    LLAVE_CIERRA    reduce using rule 59 (ex1 -> bool .)

  ! CONJUNCION      [ reduce using rule 68 (ex3 -> bool .) ]
  ! DISYUNCION      [ reduce using rule 68 (ex3 -> bool .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 68 (ex3 -> bool .) ]


state 129

    (42) comparacion -> ex comparador ex .
    (36) aritmetica -> ex . operador1 ex
    (42) comparacion -> ex . comparador ex
    (58) ex1 -> ex .
    (38) operador1 -> . SUMA
    (39) operador1 -> . RESTA
    (44) comparador -> . MAYOR
    (45) comparador -> . MENOR
    (46) comparador -> . MAYOR_IGUAL
    (47) comparador -> . MENOR_IGUAL

  ! reduce/reduce conflict for IGUAL resolved using rule 42 (comparacion -> ex comparador ex .)
  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
    PUNTO_Y_COMA    reduce using rule 42 (comparacion -> ex comparador ex .)
    IGUAL           reduce using rule 42 (comparacion -> ex comparador ex .)
    CONJUNCION      reduce using rule 42 (comparacion -> ex comparador ex .)
    DISYUNCION      reduce using rule 42 (comparacion -> ex comparador ex .)
    PARENTESIS_CIERRA reduce using rule 42 (comparacion -> ex comparador ex .)
    MULTIPLICACION  reduce using rule 42 (comparacion -> ex comparador ex .)
    DIVISION        reduce using rule 42 (comparacion -> ex comparador ex .)
    COMA            reduce using rule 42 (comparacion -> ex comparador ex .)
    LLAVE_CIERRA    reduce using rule 42 (comparacion -> ex comparador ex .)
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MAYOR           shift and go to state 95
    MENOR           shift and go to state 96
    MAYOR_IGUAL     shift and go to state 97
    MENOR_IGUAL     shift and go to state 98

  ! SUMA            [ reduce using rule 42 (comparacion -> ex comparador ex .) ]
  ! RESTA           [ reduce using rule 42 (comparacion -> ex comparador ex .) ]
  ! MAYOR           [ reduce using rule 42 (comparacion -> ex comparador ex .) ]
  ! MENOR           [ reduce using rule 42 (comparacion -> ex comparador ex .) ]
  ! MAYOR_IGUAL     [ reduce using rule 42 (comparacion -> ex comparador ex .) ]
  ! MENOR_IGUAL     [ reduce using rule 42 (comparacion -> ex comparador ex .) ]
  ! IGUAL           [ reduce using rule 58 (ex1 -> ex .) ]

    comparador                     shift and go to state 92
    operador1                      shift and go to state 91

state 130

    (37) aritmetica -> ex2 operador2 ex2 .
    (37) aritmetica -> ex2 . operador2 ex2
    (40) operador2 -> . MULTIPLICACION
    (41) operador2 -> . DIVISION

  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
    PUNTO_Y_COMA    reduce using rule 37 (aritmetica -> ex2 operador2 ex2 .)
    SUMA            reduce using rule 37 (aritmetica -> ex2 operador2 ex2 .)
    RESTA           reduce using rule 37 (aritmetica -> ex2 operador2 ex2 .)
    MAYOR           reduce using rule 37 (aritmetica -> ex2 operador2 ex2 .)
    MENOR           reduce using rule 37 (aritmetica -> ex2 operador2 ex2 .)
    MAYOR_IGUAL     reduce using rule 37 (aritmetica -> ex2 operador2 ex2 .)
    MENOR_IGUAL     reduce using rule 37 (aritmetica -> ex2 operador2 ex2 .)
    IGUAL           reduce using rule 37 (aritmetica -> ex2 operador2 ex2 .)
    PARENTESIS_CIERRA reduce using rule 37 (aritmetica -> ex2 operador2 ex2 .)
    CONJUNCION      reduce using rule 37 (aritmetica -> ex2 operador2 ex2 .)
    DISYUNCION      reduce using rule 37 (aritmetica -> ex2 operador2 ex2 .)
    COMA            reduce using rule 37 (aritmetica -> ex2 operador2 ex2 .)
    LLAVE_CIERRA    reduce using rule 37 (aritmetica -> ex2 operador2 ex2 .)
    MULTIPLICACION  shift and go to state 100
    DIVISION        shift and go to state 101

  ! MULTIPLICACION  [ reduce using rule 37 (aritmetica -> ex2 operador2 ex2 .) ]
  ! DIVISION        [ reduce using rule 37 (aritmetica -> ex2 operador2 ex2 .) ]

    operador2                      shift and go to state 99

state 131

    (64) ex2 -> num .
    (52) ex -> num .

  ! reduce/reduce conflict for SUMA resolved using rule 52 (ex -> num .)
  ! reduce/reduce conflict for RESTA resolved using rule 52 (ex -> num .)
  ! reduce/reduce conflict for MAYOR resolved using rule 52 (ex -> num .)
  ! reduce/reduce conflict for MENOR resolved using rule 52 (ex -> num .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 52 (ex -> num .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 52 (ex -> num .)
  ! reduce/reduce conflict for IGUAL resolved using rule 52 (ex -> num .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 52 (ex -> num .)
    CONJUNCION      reduce using rule 64 (ex2 -> num .)
    DISYUNCION      reduce using rule 64 (ex2 -> num .)
    PUNTO_Y_COMA    reduce using rule 64 (ex2 -> num .)
    MULTIPLICACION  reduce using rule 64 (ex2 -> num .)
    DIVISION        reduce using rule 64 (ex2 -> num .)
    COMA            reduce using rule 64 (ex2 -> num .)
    LLAVE_CIERRA    reduce using rule 64 (ex2 -> num .)
    SUMA            reduce using rule 52 (ex -> num .)
    RESTA           reduce using rule 52 (ex -> num .)
    MAYOR           reduce using rule 52 (ex -> num .)
    MENOR           reduce using rule 52 (ex -> num .)
    MAYOR_IGUAL     reduce using rule 52 (ex -> num .)
    MENOR_IGUAL     reduce using rule 52 (ex -> num .)
    IGUAL           reduce using rule 52 (ex -> num .)
    PARENTESIS_CIERRA reduce using rule 52 (ex -> num .)

  ! IGUAL           [ reduce using rule 64 (ex2 -> num .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 64 (ex2 -> num .) ]
  ! SUMA            [ reduce using rule 64 (ex2 -> num .) ]
  ! RESTA           [ reduce using rule 64 (ex2 -> num .) ]
  ! MAYOR           [ reduce using rule 64 (ex2 -> num .) ]
  ! MENOR           [ reduce using rule 64 (ex2 -> num .) ]
  ! MAYOR_IGUAL     [ reduce using rule 64 (ex2 -> num .) ]
  ! MENOR_IGUAL     [ reduce using rule 64 (ex2 -> num .) ]


state 132

    (65) ex2 -> CADENA_NO_COMILLAS .
    (54) ex -> CADENA_NO_COMILLAS .
    (69) ex3 -> CADENA_NO_COMILLAS .

  ! reduce/reduce conflict for SUMA resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for RESTA resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for MAYOR resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for MENOR resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for IGUAL resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for CONJUNCION resolved using rule 65 (ex2 -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for DISYUNCION resolved using rule 65 (ex2 -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
    CONJUNCION      reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .)
    DISYUNCION      reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .)
    PUNTO_Y_COMA    reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .)
    MULTIPLICACION  reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .)
    DIVISION        reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .)
    COMA            reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .)
    LLAVE_CIERRA    reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .)
    SUMA            reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    RESTA           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MAYOR           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MENOR           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MAYOR_IGUAL     reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MENOR_IGUAL     reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    IGUAL           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    PARENTESIS_CIERRA reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)

  ! IGUAL           [ reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .) ]
  ! SUMA            [ reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .) ]
  ! RESTA           [ reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .) ]
  ! MAYOR           [ reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .) ]
  ! MENOR           [ reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .) ]
  ! MAYOR_IGUAL     [ reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .) ]
  ! MENOR_IGUAL     [ reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .) ]
  ! CONJUNCION      [ reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .) ]
  ! DISYUNCION      [ reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .) ]


state 133

    (66) ex2 -> aritmetica .
    (55) ex -> aritmetica .
    (61) ex1 -> aritmetica .

  ! reduce/reduce conflict for SUMA resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for RESTA resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for MAYOR resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for MENOR resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for IGUAL resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for IGUAL resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 55 (ex -> aritmetica .)
    CONJUNCION      reduce using rule 66 (ex2 -> aritmetica .)
    DISYUNCION      reduce using rule 66 (ex2 -> aritmetica .)
    PUNTO_Y_COMA    reduce using rule 66 (ex2 -> aritmetica .)
    MULTIPLICACION  reduce using rule 66 (ex2 -> aritmetica .)
    DIVISION        reduce using rule 66 (ex2 -> aritmetica .)
    COMA            reduce using rule 66 (ex2 -> aritmetica .)
    LLAVE_CIERRA    reduce using rule 66 (ex2 -> aritmetica .)
    SUMA            reduce using rule 55 (ex -> aritmetica .)
    RESTA           reduce using rule 55 (ex -> aritmetica .)
    MAYOR           reduce using rule 55 (ex -> aritmetica .)
    MENOR           reduce using rule 55 (ex -> aritmetica .)
    MAYOR_IGUAL     reduce using rule 55 (ex -> aritmetica .)
    MENOR_IGUAL     reduce using rule 55 (ex -> aritmetica .)
    IGUAL           reduce using rule 55 (ex -> aritmetica .)
    PARENTESIS_CIERRA reduce using rule 55 (ex -> aritmetica .)

  ! IGUAL           [ reduce using rule 66 (ex2 -> aritmetica .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 66 (ex2 -> aritmetica .) ]
  ! SUMA            [ reduce using rule 66 (ex2 -> aritmetica .) ]
  ! RESTA           [ reduce using rule 66 (ex2 -> aritmetica .) ]
  ! MAYOR           [ reduce using rule 66 (ex2 -> aritmetica .) ]
  ! MENOR           [ reduce using rule 66 (ex2 -> aritmetica .) ]
  ! MAYOR_IGUAL     [ reduce using rule 66 (ex2 -> aritmetica .) ]
  ! MENOR_IGUAL     [ reduce using rule 66 (ex2 -> aritmetica .) ]
  ! IGUAL           [ reduce using rule 61 (ex1 -> aritmetica .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 61 (ex1 -> aritmetica .) ]


state 134

    (67) ex2 -> PARENTESIS_ABRE . ex2 PARENTESIS_CIERRA
    (57) ex -> PARENTESIS_ABRE . ex PARENTESIS_CIERRA
    (63) ex1 -> PARENTESIS_ABRE . ex1 PARENTESIS_CIERRA
    (71) ex3 -> PARENTESIS_ABRE . ex3 PARENTESIS_CIERRA
    (64) ex2 -> . num
    (65) ex2 -> . CADENA_NO_COMILLAS
    (66) ex2 -> . aritmetica
    (67) ex2 -> . PARENTESIS_ABRE ex2 PARENTESIS_CIERRA
    (52) ex -> . num
    (53) ex -> . CHARACTER
    (54) ex -> . CADENA_NO_COMILLAS
    (55) ex -> . aritmetica
    (56) ex -> . comparacion
    (57) ex -> . PARENTESIS_ABRE ex PARENTESIS_CIERRA
    (58) ex1 -> . ex
    (59) ex1 -> . bool
    (60) ex1 -> . booleana
    (61) ex1 -> . aritmetica
    (62) ex1 -> . comparacion
    (63) ex1 -> . PARENTESIS_ABRE ex1 PARENTESIS_CIERRA
    (68) ex3 -> . bool
    (69) ex3 -> . CADENA_NO_COMILLAS
    (70) ex3 -> . comparacion
    (71) ex3 -> . PARENTESIS_ABRE ex3 PARENTESIS_CIERRA
    (74) num -> . ENTERO
    (75) num -> . DECIMAL
    (36) aritmetica -> . ex operador1 ex
    (37) aritmetica -> . ex2 operador2 ex2
    (42) comparacion -> . ex comparador ex
    (43) comparacion -> . ex1 IGUAL ex1
    (72) bool -> . TR
    (73) bool -> . FL
    (48) booleana -> . ex3 comparador2 ex3
    (49) booleana -> . NEGACION ex3

    CADENA_NO_COMILLAS shift and go to state 132
    PARENTESIS_ABRE shift and go to state 134
    CHARACTER       shift and go to state 62
    ENTERO          shift and go to state 48
    DECIMAL         shift and go to state 49
    TR              shift and go to state 54
    FL              shift and go to state 55
    NEGACION        shift and go to state 60

    ex2                            shift and go to state 81
    ex                             shift and go to state 80
    ex1                            shift and go to state 83
    ex3                            shift and go to state 82
    num                            shift and go to state 131
    aritmetica                     shift and go to state 133
    comparacion                    shift and go to state 126
    bool                           shift and go to state 128
    booleana                       shift and go to state 107

state 135

    (48) booleana -> ex3 comparador2 ex3 .
    (48) booleana -> ex3 . comparador2 ex3
    (50) comparador2 -> . CONJUNCION
    (51) comparador2 -> . DISYUNCION

  ! shift/reduce conflict for CONJUNCION resolved as shift
  ! shift/reduce conflict for DISYUNCION resolved as shift
    PUNTO_Y_COMA    reduce using rule 48 (booleana -> ex3 comparador2 ex3 .)
    IGUAL           reduce using rule 48 (booleana -> ex3 comparador2 ex3 .)
    PARENTESIS_CIERRA reduce using rule 48 (booleana -> ex3 comparador2 ex3 .)
    SUMA            reduce using rule 48 (booleana -> ex3 comparador2 ex3 .)
    RESTA           reduce using rule 48 (booleana -> ex3 comparador2 ex3 .)
    MAYOR           reduce using rule 48 (booleana -> ex3 comparador2 ex3 .)
    MENOR           reduce using rule 48 (booleana -> ex3 comparador2 ex3 .)
    MAYOR_IGUAL     reduce using rule 48 (booleana -> ex3 comparador2 ex3 .)
    MENOR_IGUAL     reduce using rule 48 (booleana -> ex3 comparador2 ex3 .)
    MULTIPLICACION  reduce using rule 48 (booleana -> ex3 comparador2 ex3 .)
    DIVISION        reduce using rule 48 (booleana -> ex3 comparador2 ex3 .)
    COMA            reduce using rule 48 (booleana -> ex3 comparador2 ex3 .)
    LLAVE_CIERRA    reduce using rule 48 (booleana -> ex3 comparador2 ex3 .)
    CONJUNCION      shift and go to state 103
    DISYUNCION      shift and go to state 104

  ! CONJUNCION      [ reduce using rule 48 (booleana -> ex3 comparador2 ex3 .) ]
  ! DISYUNCION      [ reduce using rule 48 (booleana -> ex3 comparador2 ex3 .) ]

    comparador2                    shift and go to state 102

state 136

    (43) comparacion -> ex1 IGUAL ex1 .
    (43) comparacion -> ex1 . IGUAL ex1

  ! shift/reduce conflict for IGUAL resolved as shift
    PUNTO_Y_COMA    reduce using rule 43 (comparacion -> ex1 IGUAL ex1 .)
    SUMA            reduce using rule 43 (comparacion -> ex1 IGUAL ex1 .)
    RESTA           reduce using rule 43 (comparacion -> ex1 IGUAL ex1 .)
    MAYOR           reduce using rule 43 (comparacion -> ex1 IGUAL ex1 .)
    MENOR           reduce using rule 43 (comparacion -> ex1 IGUAL ex1 .)
    MAYOR_IGUAL     reduce using rule 43 (comparacion -> ex1 IGUAL ex1 .)
    MENOR_IGUAL     reduce using rule 43 (comparacion -> ex1 IGUAL ex1 .)
    CONJUNCION      reduce using rule 43 (comparacion -> ex1 IGUAL ex1 .)
    DISYUNCION      reduce using rule 43 (comparacion -> ex1 IGUAL ex1 .)
    PARENTESIS_CIERRA reduce using rule 43 (comparacion -> ex1 IGUAL ex1 .)
    MULTIPLICACION  reduce using rule 43 (comparacion -> ex1 IGUAL ex1 .)
    DIVISION        reduce using rule 43 (comparacion -> ex1 IGUAL ex1 .)
    COMA            reduce using rule 43 (comparacion -> ex1 IGUAL ex1 .)
    LLAVE_CIERRA    reduce using rule 43 (comparacion -> ex1 IGUAL ex1 .)
    IGUAL           shift and go to state 108

  ! IGUAL           [ reduce using rule 43 (comparacion -> ex1 IGUAL ex1 .) ]


state 137

    (58) ex1 -> ex .
    (36) aritmetica -> ex . operador1 ex
    (42) comparacion -> ex . comparador ex
    (38) operador1 -> . SUMA
    (39) operador1 -> . RESTA
    (44) comparador -> . MAYOR
    (45) comparador -> . MENOR
    (46) comparador -> . MAYOR_IGUAL
    (47) comparador -> . MENOR_IGUAL

  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
    CONJUNCION      reduce using rule 58 (ex1 -> ex .)
    DISYUNCION      reduce using rule 58 (ex1 -> ex .)
    PUNTO_Y_COMA    reduce using rule 58 (ex1 -> ex .)
    IGUAL           reduce using rule 58 (ex1 -> ex .)
    PARENTESIS_CIERRA reduce using rule 58 (ex1 -> ex .)
    MULTIPLICACION  reduce using rule 58 (ex1 -> ex .)
    DIVISION        reduce using rule 58 (ex1 -> ex .)
    COMA            reduce using rule 58 (ex1 -> ex .)
    LLAVE_CIERRA    reduce using rule 58 (ex1 -> ex .)
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MAYOR           shift and go to state 95
    MENOR           shift and go to state 96
    MAYOR_IGUAL     shift and go to state 97
    MENOR_IGUAL     shift and go to state 98

  ! SUMA            [ reduce using rule 58 (ex1 -> ex .) ]
  ! RESTA           [ reduce using rule 58 (ex1 -> ex .) ]
  ! MAYOR           [ reduce using rule 58 (ex1 -> ex .) ]
  ! MENOR           [ reduce using rule 58 (ex1 -> ex .) ]
  ! MAYOR_IGUAL     [ reduce using rule 58 (ex1 -> ex .) ]
  ! MENOR_IGUAL     [ reduce using rule 58 (ex1 -> ex .) ]

    operador1                      shift and go to state 91
    comparador                     shift and go to state 92

state 138

    (61) ex1 -> aritmetica .
    (55) ex -> aritmetica .
    (66) ex2 -> aritmetica .

  ! reduce/reduce conflict for CONJUNCION resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for DISYUNCION resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for PUNTO_Y_COMA resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for IGUAL resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for SUMA resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for RESTA resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for MAYOR resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for MENOR resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for MULTIPLICACION resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for DIVISION resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for COMA resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for LLAVE_CIERRA resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for MULTIPLICACION resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for DIVISION resolved using rule 55 (ex -> aritmetica .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 55 (ex -> aritmetica .)
    CONJUNCION      reduce using rule 55 (ex -> aritmetica .)
    DISYUNCION      reduce using rule 55 (ex -> aritmetica .)
    PUNTO_Y_COMA    reduce using rule 55 (ex -> aritmetica .)
    IGUAL           reduce using rule 55 (ex -> aritmetica .)
    PARENTESIS_CIERRA reduce using rule 55 (ex -> aritmetica .)
    SUMA            reduce using rule 55 (ex -> aritmetica .)
    RESTA           reduce using rule 55 (ex -> aritmetica .)
    MAYOR           reduce using rule 55 (ex -> aritmetica .)
    MENOR           reduce using rule 55 (ex -> aritmetica .)
    MAYOR_IGUAL     reduce using rule 55 (ex -> aritmetica .)
    MENOR_IGUAL     reduce using rule 55 (ex -> aritmetica .)
    MULTIPLICACION  reduce using rule 55 (ex -> aritmetica .)
    DIVISION        reduce using rule 55 (ex -> aritmetica .)
    COMA            reduce using rule 55 (ex -> aritmetica .)
    LLAVE_CIERRA    reduce using rule 55 (ex -> aritmetica .)

  ! CONJUNCION      [ reduce using rule 61 (ex1 -> aritmetica .) ]
  ! DISYUNCION      [ reduce using rule 61 (ex1 -> aritmetica .) ]
  ! PUNTO_Y_COMA    [ reduce using rule 61 (ex1 -> aritmetica .) ]
  ! IGUAL           [ reduce using rule 61 (ex1 -> aritmetica .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 61 (ex1 -> aritmetica .) ]
  ! SUMA            [ reduce using rule 61 (ex1 -> aritmetica .) ]
  ! RESTA           [ reduce using rule 61 (ex1 -> aritmetica .) ]
  ! MAYOR           [ reduce using rule 61 (ex1 -> aritmetica .) ]
  ! MENOR           [ reduce using rule 61 (ex1 -> aritmetica .) ]
  ! MAYOR_IGUAL     [ reduce using rule 61 (ex1 -> aritmetica .) ]
  ! MENOR_IGUAL     [ reduce using rule 61 (ex1 -> aritmetica .) ]
  ! MULTIPLICACION  [ reduce using rule 61 (ex1 -> aritmetica .) ]
  ! DIVISION        [ reduce using rule 61 (ex1 -> aritmetica .) ]
  ! COMA            [ reduce using rule 61 (ex1 -> aritmetica .) ]
  ! LLAVE_CIERRA    [ reduce using rule 61 (ex1 -> aritmetica .) ]
  ! MULTIPLICACION  [ reduce using rule 66 (ex2 -> aritmetica .) ]
  ! DIVISION        [ reduce using rule 66 (ex2 -> aritmetica .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 66 (ex2 -> aritmetica .) ]


state 139

    (62) ex1 -> comparacion .
    (56) ex -> comparacion .
    (70) ex3 -> comparacion .

  ! reduce/reduce conflict for CONJUNCION resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for DISYUNCION resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for PUNTO_Y_COMA resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for IGUAL resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for SUMA resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for RESTA resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for MAYOR resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for MENOR resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for MULTIPLICACION resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for DIVISION resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for COMA resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for LLAVE_CIERRA resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for CONJUNCION resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for DISYUNCION resolved using rule 56 (ex -> comparacion .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 56 (ex -> comparacion .)
    CONJUNCION      reduce using rule 56 (ex -> comparacion .)
    DISYUNCION      reduce using rule 56 (ex -> comparacion .)
    PUNTO_Y_COMA    reduce using rule 56 (ex -> comparacion .)
    IGUAL           reduce using rule 56 (ex -> comparacion .)
    PARENTESIS_CIERRA reduce using rule 56 (ex -> comparacion .)
    SUMA            reduce using rule 56 (ex -> comparacion .)
    RESTA           reduce using rule 56 (ex -> comparacion .)
    MAYOR           reduce using rule 56 (ex -> comparacion .)
    MENOR           reduce using rule 56 (ex -> comparacion .)
    MAYOR_IGUAL     reduce using rule 56 (ex -> comparacion .)
    MENOR_IGUAL     reduce using rule 56 (ex -> comparacion .)
    MULTIPLICACION  reduce using rule 56 (ex -> comparacion .)
    DIVISION        reduce using rule 56 (ex -> comparacion .)
    COMA            reduce using rule 56 (ex -> comparacion .)
    LLAVE_CIERRA    reduce using rule 56 (ex -> comparacion .)

  ! CONJUNCION      [ reduce using rule 62 (ex1 -> comparacion .) ]
  ! DISYUNCION      [ reduce using rule 62 (ex1 -> comparacion .) ]
  ! PUNTO_Y_COMA    [ reduce using rule 62 (ex1 -> comparacion .) ]
  ! IGUAL           [ reduce using rule 62 (ex1 -> comparacion .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 62 (ex1 -> comparacion .) ]
  ! SUMA            [ reduce using rule 62 (ex1 -> comparacion .) ]
  ! RESTA           [ reduce using rule 62 (ex1 -> comparacion .) ]
  ! MAYOR           [ reduce using rule 62 (ex1 -> comparacion .) ]
  ! MENOR           [ reduce using rule 62 (ex1 -> comparacion .) ]
  ! MAYOR_IGUAL     [ reduce using rule 62 (ex1 -> comparacion .) ]
  ! MENOR_IGUAL     [ reduce using rule 62 (ex1 -> comparacion .) ]
  ! MULTIPLICACION  [ reduce using rule 62 (ex1 -> comparacion .) ]
  ! DIVISION        [ reduce using rule 62 (ex1 -> comparacion .) ]
  ! COMA            [ reduce using rule 62 (ex1 -> comparacion .) ]
  ! LLAVE_CIERRA    [ reduce using rule 62 (ex1 -> comparacion .) ]
  ! CONJUNCION      [ reduce using rule 70 (ex3 -> comparacion .) ]
  ! DISYUNCION      [ reduce using rule 70 (ex3 -> comparacion .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 70 (ex3 -> comparacion .) ]


state 140

    (63) ex1 -> PARENTESIS_ABRE . ex1 PARENTESIS_CIERRA
    (57) ex -> PARENTESIS_ABRE . ex PARENTESIS_CIERRA
    (71) ex3 -> PARENTESIS_ABRE . ex3 PARENTESIS_CIERRA
    (67) ex2 -> PARENTESIS_ABRE . ex2 PARENTESIS_CIERRA
    (58) ex1 -> . ex
    (59) ex1 -> . bool
    (60) ex1 -> . booleana
    (61) ex1 -> . aritmetica
    (62) ex1 -> . comparacion
    (63) ex1 -> . PARENTESIS_ABRE ex1 PARENTESIS_CIERRA
    (52) ex -> . num
    (53) ex -> . CHARACTER
    (54) ex -> . CADENA_NO_COMILLAS
    (55) ex -> . aritmetica
    (56) ex -> . comparacion
    (57) ex -> . PARENTESIS_ABRE ex PARENTESIS_CIERRA
    (68) ex3 -> . bool
    (69) ex3 -> . CADENA_NO_COMILLAS
    (70) ex3 -> . comparacion
    (71) ex3 -> . PARENTESIS_ABRE ex3 PARENTESIS_CIERRA
    (64) ex2 -> . num
    (65) ex2 -> . CADENA_NO_COMILLAS
    (66) ex2 -> . aritmetica
    (67) ex2 -> . PARENTESIS_ABRE ex2 PARENTESIS_CIERRA
    (72) bool -> . TR
    (73) bool -> . FL
    (48) booleana -> . ex3 comparador2 ex3
    (49) booleana -> . NEGACION ex3
    (36) aritmetica -> . ex operador1 ex
    (37) aritmetica -> . ex2 operador2 ex2
    (42) comparacion -> . ex comparador ex
    (43) comparacion -> . ex1 IGUAL ex1
    (74) num -> . ENTERO
    (75) num -> . DECIMAL

    PARENTESIS_ABRE shift and go to state 140
    CHARACTER       shift and go to state 62
    CADENA_NO_COMILLAS shift and go to state 141
    TR              shift and go to state 54
    FL              shift and go to state 55
    NEGACION        shift and go to state 60
    ENTERO          shift and go to state 48
    DECIMAL         shift and go to state 49

    ex1                            shift and go to state 83
    ex                             shift and go to state 80
    ex3                            shift and go to state 82
    ex2                            shift and go to state 81
    bool                           shift and go to state 128
    booleana                       shift and go to state 107
    aritmetica                     shift and go to state 138
    comparacion                    shift and go to state 139
    num                            shift and go to state 72

state 141

    (54) ex -> CADENA_NO_COMILLAS .
    (69) ex3 -> CADENA_NO_COMILLAS .
    (65) ex2 -> CADENA_NO_COMILLAS .

  ! reduce/reduce conflict for CONJUNCION resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for DISYUNCION resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for MULTIPLICACION resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for DIVISION resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 54 (ex -> CADENA_NO_COMILLAS .)
    CONJUNCION      reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    DISYUNCION      reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    PUNTO_Y_COMA    reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    IGUAL           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    PARENTESIS_CIERRA reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    SUMA            reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    RESTA           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MAYOR           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MENOR           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MAYOR_IGUAL     reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MENOR_IGUAL     reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MULTIPLICACION  reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    DIVISION        reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    COMA            reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    LLAVE_CIERRA    reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)

  ! CONJUNCION      [ reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .) ]
  ! DISYUNCION      [ reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .) ]
  ! MULTIPLICACION  [ reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .) ]
  ! DIVISION        [ reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .) ]
  ! PARENTESIS_CIERRA [ reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .) ]


state 142

    (96) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE . statement LLAVE_CIERRA
    (97) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE . statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (14) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (81) declare -> . LET id
    (86) assign -> . variable ASIGNACION valor
    (96) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (97) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (101) loop -> . WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (102) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (103) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (104) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (105) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (85) variable -> . CADENA_NO_COMILLAS

    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    statement                      shift and go to state 159
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 143

    (101) loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE . statement LLAVE_CIERRA
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (14) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (81) declare -> . LET id
    (86) assign -> . variable ASIGNACION valor
    (96) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (97) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (101) loop -> . WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (102) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (103) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (104) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (105) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (85) variable -> . CADENA_NO_COMILLAS

    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    statement                      shift and go to state 160
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 144

    (102) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA . DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (103) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA . DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    DOS_PUNTOS      shift and go to state 161


state 145

    (104) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS . tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (105) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS . tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (76) tipo -> . INT
    (77) tipo -> . FLOAT
    (78) tipo -> . CHARACTER
    (79) tipo -> . BOOLEAN
    (80) tipo -> . CADENA_NO_COMILLAS

    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    CHARACTER       shift and go to state 35
    BOOLEAN         shift and go to state 36
    CADENA_NO_COMILLAS shift and go to state 31

    tipo                           shift and go to state 162

state 146

    (106) function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA .

    PUNTO_Y_COMA    reduce using rule 106 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 106 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA .)


state 147

    (19) lista -> elemento COMA lista .

    LLAVE_CIERRA    reduce using rule 19 (lista -> elemento COMA lista .)


state 148

    (20) elemento -> clave DOS_PUNTOS valor_t .

    COMA            reduce using rule 20 (elemento -> clave DOS_PUNTOS valor_t .)
    LLAVE_CIERRA    reduce using rule 20 (elemento -> clave DOS_PUNTOS valor_t .)


state 149

    (23) valor_t -> CADENA_COMILLAS .

    COMA            reduce using rule 23 (valor_t -> CADENA_COMILLAS .)
    LLAVE_CIERRA    reduce using rule 23 (valor_t -> CADENA_COMILLAS .)


state 150

    (24) valor_t -> num .
    (52) ex -> num .
    (64) ex2 -> num .

    COMA            reduce using rule 24 (valor_t -> num .)
    LLAVE_CIERRA    reduce using rule 24 (valor_t -> num .)
    SUMA            reduce using rule 52 (ex -> num .)
    RESTA           reduce using rule 52 (ex -> num .)
    MAYOR           reduce using rule 52 (ex -> num .)
    MENOR           reduce using rule 52 (ex -> num .)
    MAYOR_IGUAL     reduce using rule 52 (ex -> num .)
    MENOR_IGUAL     reduce using rule 52 (ex -> num .)
    IGUAL           reduce using rule 52 (ex -> num .)
    MULTIPLICACION  reduce using rule 64 (ex2 -> num .)
    DIVISION        reduce using rule 64 (ex2 -> num .)


state 151

    (25) valor_t -> operacion .

    COMA            reduce using rule 25 (valor_t -> operacion .)
    LLAVE_CIERRA    reduce using rule 25 (valor_t -> operacion .)


state 152

    (26) valor_t -> bool .
    (68) ex3 -> bool .
    (59) ex1 -> bool .

    COMA            reduce using rule 26 (valor_t -> bool .)
    LLAVE_CIERRA    reduce using rule 26 (valor_t -> bool .)
    CONJUNCION      reduce using rule 68 (ex3 -> bool .)
    DISYUNCION      reduce using rule 68 (ex3 -> bool .)
    IGUAL           reduce using rule 59 (ex1 -> bool .)


state 153

    (27) valor_t -> NULL .

    COMA            reduce using rule 27 (valor_t -> NULL .)
    LLAVE_CIERRA    reduce using rule 27 (valor_t -> NULL .)


state 154

    (28) valor_t -> ajson .

    COMA            reduce using rule 28 (valor_t -> ajson .)
    LLAVE_CIERRA    reduce using rule 28 (valor_t -> ajson .)


state 155

    (29) valor_t -> tipo .

    COMA            reduce using rule 29 (valor_t -> tipo .)
    LLAVE_CIERRA    reduce using rule 29 (valor_t -> tipo .)


state 156

    (30) valor_t -> CARACTER .

    COMA            reduce using rule 30 (valor_t -> CARACTER .)
    LLAVE_CIERRA    reduce using rule 30 (valor_t -> CARACTER .)


state 157

    (31) valor_t -> CADENA_NO_COMILLAS .
    (80) tipo -> CADENA_NO_COMILLAS .
    (54) ex -> CADENA_NO_COMILLAS .
    (65) ex2 -> CADENA_NO_COMILLAS .
    (69) ex3 -> CADENA_NO_COMILLAS .

  ! reduce/reduce conflict for COMA resolved using rule 31 (valor_t -> CADENA_NO_COMILLAS .)
  ! reduce/reduce conflict for LLAVE_CIERRA resolved using rule 31 (valor_t -> CADENA_NO_COMILLAS .)
    COMA            reduce using rule 31 (valor_t -> CADENA_NO_COMILLAS .)
    LLAVE_CIERRA    reduce using rule 31 (valor_t -> CADENA_NO_COMILLAS .)
    SUMA            reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    RESTA           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MAYOR           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MENOR           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MAYOR_IGUAL     reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MENOR_IGUAL     reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    IGUAL           reduce using rule 54 (ex -> CADENA_NO_COMILLAS .)
    MULTIPLICACION  reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .)
    DIVISION        reduce using rule 65 (ex2 -> CADENA_NO_COMILLAS .)
    CONJUNCION      reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .)
    DISYUNCION      reduce using rule 69 (ex3 -> CADENA_NO_COMILLAS .)

  ! COMA            [ reduce using rule 80 (tipo -> CADENA_NO_COMILLAS .) ]
  ! LLAVE_CIERRA    [ reduce using rule 80 (tipo -> CADENA_NO_COMILLAS .) ]


state 158

    (78) tipo -> CHARACTER .
    (53) ex -> CHARACTER .

    COMA            reduce using rule 78 (tipo -> CHARACTER .)
    LLAVE_CIERRA    reduce using rule 78 (tipo -> CHARACTER .)
    SUMA            reduce using rule 53 (ex -> CHARACTER .)
    RESTA           reduce using rule 53 (ex -> CHARACTER .)
    MAYOR           reduce using rule 53 (ex -> CHARACTER .)
    MENOR           reduce using rule 53 (ex -> CHARACTER .)
    MAYOR_IGUAL     reduce using rule 53 (ex -> CHARACTER .)
    MENOR_IGUAL     reduce using rule 53 (ex -> CHARACTER .)
    IGUAL           reduce using rule 53 (ex -> CHARACTER .)


state 159

    (96) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement . LLAVE_CIERRA
    (97) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement . LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 163


state 160

    (101) loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 164


state 161

    (102) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS . tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (103) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS . tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (76) tipo -> . INT
    (77) tipo -> . FLOAT
    (78) tipo -> . CHARACTER
    (79) tipo -> . BOOLEAN
    (80) tipo -> . CADENA_NO_COMILLAS

    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    CHARACTER       shift and go to state 35
    BOOLEAN         shift and go to state 36
    CADENA_NO_COMILLAS shift and go to state 31

    tipo                           shift and go to state 165

state 162

    (104) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo . LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (105) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo . LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 166


state 163

    (96) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .
    (97) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA . ELSE LLAVE_ABRE statement LLAVE_CIERRA

    TYPE            reduce using rule 96 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    LET             reduce using rule 96 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    IF              reduce using rule 96 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    WHILE           reduce using rule 96 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    FUNCTION        reduce using rule 96 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 96 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    $end            reduce using rule 96 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 96 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    RETURN          reduce using rule 96 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    ELSE            shift and go to state 167


state 164

    (101) loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .

    TYPE            reduce using rule 101 (loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    LET             reduce using rule 101 (loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    IF              reduce using rule 101 (loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    WHILE           reduce using rule 101 (loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    FUNCTION        reduce using rule 101 (loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 101 (loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    $end            reduce using rule 101 (loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 101 (loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    RETURN          reduce using rule 101 (loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)


state 165

    (102) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo . LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (103) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo . LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 168


state 166

    (104) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE . statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (105) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE . RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (14) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (81) declare -> . LET id
    (86) assign -> . variable ASIGNACION valor
    (96) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (97) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (101) loop -> . WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (102) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (103) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (104) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (105) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (85) variable -> . CADENA_NO_COMILLAS

    RETURN          shift and go to state 170
    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    statement                      shift and go to state 169
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 167

    (97) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE . LLAVE_ABRE statement LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 171


state 168

    (102) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE . statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (103) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE . RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (14) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (81) declare -> . LET id
    (86) assign -> . variable ASIGNACION valor
    (96) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (97) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (101) loop -> . WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (102) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (103) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (104) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (105) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (85) variable -> . CADENA_NO_COMILLAS

    RETURN          shift and go to state 173
    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    statement                      shift and go to state 172
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 169

    (104) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement . RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    RETURN          shift and go to state 174


state 170

    (105) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN . valor PUNTO_Y_COMA LLAVE_CIERRA
    (87) valor -> . CADENA_COMILLAS
    (88) valor -> . num
    (89) valor -> . operacion
    (90) valor -> . bool
    (91) valor -> . NULL
    (92) valor -> . ajson
    (93) valor -> . CARACTER
    (94) valor -> . CADENA_NO_COMILLAS
    (95) valor -> . function_call
    (74) num -> . ENTERO
    (75) num -> . DECIMAL
    (32) operacion -> . aritmetica
    (33) operacion -> . booleana
    (34) operacion -> . comparacion
    (35) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (72) bool -> . TR
    (73) bool -> . FL
    (15) ajson -> . LLAVE_ABRE lista LLAVE_CIERRA
    (16) ajson -> . LLAVE_ABRE LLAVE_CIERRA
    (106) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (107) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (36) aritmetica -> . ex operador1 ex
    (37) aritmetica -> . ex2 operador2 ex2
    (48) booleana -> . ex3 comparador2 ex3
    (49) booleana -> . NEGACION ex3
    (42) comparacion -> . ex comparador ex
    (43) comparacion -> . ex1 IGUAL ex1
    (52) ex -> . num
    (53) ex -> . CHARACTER
    (54) ex -> . CADENA_NO_COMILLAS
    (55) ex -> . aritmetica
    (56) ex -> . comparacion
    (57) ex -> . PARENTESIS_ABRE ex PARENTESIS_CIERRA
    (64) ex2 -> . num
    (65) ex2 -> . CADENA_NO_COMILLAS
    (66) ex2 -> . aritmetica
    (67) ex2 -> . PARENTESIS_ABRE ex2 PARENTESIS_CIERRA
    (68) ex3 -> . bool
    (69) ex3 -> . CADENA_NO_COMILLAS
    (70) ex3 -> . comparacion
    (71) ex3 -> . PARENTESIS_ABRE ex3 PARENTESIS_CIERRA
    (58) ex1 -> . ex
    (59) ex1 -> . bool
    (60) ex1 -> . booleana
    (61) ex1 -> . aritmetica
    (62) ex1 -> . comparacion
    (63) ex1 -> . PARENTESIS_ABRE ex1 PARENTESIS_CIERRA

    CADENA_COMILLAS shift and go to state 39
    NULL            shift and go to state 43
    CARACTER        shift and go to state 45
    CADENA_NO_COMILLAS shift and go to state 46
    ENTERO          shift and go to state 48
    DECIMAL         shift and go to state 49
    PARENTESIS_ABRE shift and go to state 53
    TR              shift and go to state 54
    FL              shift and go to state 55
    LLAVE_ABRE      shift and go to state 56
    NEGACION        shift and go to state 60
    CHARACTER       shift and go to state 62

    valor                          shift and go to state 175
    num                            shift and go to state 40
    operacion                      shift and go to state 41
    bool                           shift and go to state 42
    ajson                          shift and go to state 44
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 50
    booleana                       shift and go to state 51
    comparacion                    shift and go to state 52
    ex                             shift and go to state 57
    ex2                            shift and go to state 58
    ex3                            shift and go to state 59
    ex1                            shift and go to state 61

state 171

    (97) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE . statement LLAVE_CIERRA
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (14) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (81) declare -> . LET id
    (86) assign -> . variable ASIGNACION valor
    (96) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (97) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (101) loop -> . WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (102) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (103) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (104) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (105) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (85) variable -> . CADENA_NO_COMILLAS

    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    statement                      shift and go to state 176
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 172

    (102) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement . RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    RETURN          shift and go to state 177


state 173

    (103) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN . valor PUNTO_Y_COMA LLAVE_CIERRA
    (87) valor -> . CADENA_COMILLAS
    (88) valor -> . num
    (89) valor -> . operacion
    (90) valor -> . bool
    (91) valor -> . NULL
    (92) valor -> . ajson
    (93) valor -> . CARACTER
    (94) valor -> . CADENA_NO_COMILLAS
    (95) valor -> . function_call
    (74) num -> . ENTERO
    (75) num -> . DECIMAL
    (32) operacion -> . aritmetica
    (33) operacion -> . booleana
    (34) operacion -> . comparacion
    (35) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (72) bool -> . TR
    (73) bool -> . FL
    (15) ajson -> . LLAVE_ABRE lista LLAVE_CIERRA
    (16) ajson -> . LLAVE_ABRE LLAVE_CIERRA
    (106) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (107) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (36) aritmetica -> . ex operador1 ex
    (37) aritmetica -> . ex2 operador2 ex2
    (48) booleana -> . ex3 comparador2 ex3
    (49) booleana -> . NEGACION ex3
    (42) comparacion -> . ex comparador ex
    (43) comparacion -> . ex1 IGUAL ex1
    (52) ex -> . num
    (53) ex -> . CHARACTER
    (54) ex -> . CADENA_NO_COMILLAS
    (55) ex -> . aritmetica
    (56) ex -> . comparacion
    (57) ex -> . PARENTESIS_ABRE ex PARENTESIS_CIERRA
    (64) ex2 -> . num
    (65) ex2 -> . CADENA_NO_COMILLAS
    (66) ex2 -> . aritmetica
    (67) ex2 -> . PARENTESIS_ABRE ex2 PARENTESIS_CIERRA
    (68) ex3 -> . bool
    (69) ex3 -> . CADENA_NO_COMILLAS
    (70) ex3 -> . comparacion
    (71) ex3 -> . PARENTESIS_ABRE ex3 PARENTESIS_CIERRA
    (58) ex1 -> . ex
    (59) ex1 -> . bool
    (60) ex1 -> . booleana
    (61) ex1 -> . aritmetica
    (62) ex1 -> . comparacion
    (63) ex1 -> . PARENTESIS_ABRE ex1 PARENTESIS_CIERRA

    CADENA_COMILLAS shift and go to state 39
    NULL            shift and go to state 43
    CARACTER        shift and go to state 45
    CADENA_NO_COMILLAS shift and go to state 46
    ENTERO          shift and go to state 48
    DECIMAL         shift and go to state 49
    PARENTESIS_ABRE shift and go to state 53
    TR              shift and go to state 54
    FL              shift and go to state 55
    LLAVE_ABRE      shift and go to state 56
    NEGACION        shift and go to state 60
    CHARACTER       shift and go to state 62

    valor                          shift and go to state 178
    num                            shift and go to state 40
    operacion                      shift and go to state 41
    bool                           shift and go to state 42
    ajson                          shift and go to state 44
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 50
    booleana                       shift and go to state 51
    comparacion                    shift and go to state 52
    ex                             shift and go to state 57
    ex2                            shift and go to state 58
    ex3                            shift and go to state 59
    ex1                            shift and go to state 61

state 174

    (104) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN . valor PUNTO_Y_COMA LLAVE_CIERRA
    (87) valor -> . CADENA_COMILLAS
    (88) valor -> . num
    (89) valor -> . operacion
    (90) valor -> . bool
    (91) valor -> . NULL
    (92) valor -> . ajson
    (93) valor -> . CARACTER
    (94) valor -> . CADENA_NO_COMILLAS
    (95) valor -> . function_call
    (74) num -> . ENTERO
    (75) num -> . DECIMAL
    (32) operacion -> . aritmetica
    (33) operacion -> . booleana
    (34) operacion -> . comparacion
    (35) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (72) bool -> . TR
    (73) bool -> . FL
    (15) ajson -> . LLAVE_ABRE lista LLAVE_CIERRA
    (16) ajson -> . LLAVE_ABRE LLAVE_CIERRA
    (106) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (107) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (36) aritmetica -> . ex operador1 ex
    (37) aritmetica -> . ex2 operador2 ex2
    (48) booleana -> . ex3 comparador2 ex3
    (49) booleana -> . NEGACION ex3
    (42) comparacion -> . ex comparador ex
    (43) comparacion -> . ex1 IGUAL ex1
    (52) ex -> . num
    (53) ex -> . CHARACTER
    (54) ex -> . CADENA_NO_COMILLAS
    (55) ex -> . aritmetica
    (56) ex -> . comparacion
    (57) ex -> . PARENTESIS_ABRE ex PARENTESIS_CIERRA
    (64) ex2 -> . num
    (65) ex2 -> . CADENA_NO_COMILLAS
    (66) ex2 -> . aritmetica
    (67) ex2 -> . PARENTESIS_ABRE ex2 PARENTESIS_CIERRA
    (68) ex3 -> . bool
    (69) ex3 -> . CADENA_NO_COMILLAS
    (70) ex3 -> . comparacion
    (71) ex3 -> . PARENTESIS_ABRE ex3 PARENTESIS_CIERRA
    (58) ex1 -> . ex
    (59) ex1 -> . bool
    (60) ex1 -> . booleana
    (61) ex1 -> . aritmetica
    (62) ex1 -> . comparacion
    (63) ex1 -> . PARENTESIS_ABRE ex1 PARENTESIS_CIERRA

    CADENA_COMILLAS shift and go to state 39
    NULL            shift and go to state 43
    CARACTER        shift and go to state 45
    CADENA_NO_COMILLAS shift and go to state 46
    ENTERO          shift and go to state 48
    DECIMAL         shift and go to state 49
    PARENTESIS_ABRE shift and go to state 53
    TR              shift and go to state 54
    FL              shift and go to state 55
    LLAVE_ABRE      shift and go to state 56
    NEGACION        shift and go to state 60
    CHARACTER       shift and go to state 62

    valor                          shift and go to state 179
    num                            shift and go to state 40
    operacion                      shift and go to state 41
    bool                           shift and go to state 42
    ajson                          shift and go to state 44
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 50
    booleana                       shift and go to state 51
    comparacion                    shift and go to state 52
    ex                             shift and go to state 57
    ex2                            shift and go to state 58
    ex3                            shift and go to state 59
    ex1                            shift and go to state 61

state 175

    (105) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor . PUNTO_Y_COMA LLAVE_CIERRA

    PUNTO_Y_COMA    shift and go to state 180


state 176

    (97) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 181


state 177

    (102) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN . valor PUNTO_Y_COMA LLAVE_CIERRA
    (87) valor -> . CADENA_COMILLAS
    (88) valor -> . num
    (89) valor -> . operacion
    (90) valor -> . bool
    (91) valor -> . NULL
    (92) valor -> . ajson
    (93) valor -> . CARACTER
    (94) valor -> . CADENA_NO_COMILLAS
    (95) valor -> . function_call
    (74) num -> . ENTERO
    (75) num -> . DECIMAL
    (32) operacion -> . aritmetica
    (33) operacion -> . booleana
    (34) operacion -> . comparacion
    (35) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (72) bool -> . TR
    (73) bool -> . FL
    (15) ajson -> . LLAVE_ABRE lista LLAVE_CIERRA
    (16) ajson -> . LLAVE_ABRE LLAVE_CIERRA
    (106) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (107) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (36) aritmetica -> . ex operador1 ex
    (37) aritmetica -> . ex2 operador2 ex2
    (48) booleana -> . ex3 comparador2 ex3
    (49) booleana -> . NEGACION ex3
    (42) comparacion -> . ex comparador ex
    (43) comparacion -> . ex1 IGUAL ex1
    (52) ex -> . num
    (53) ex -> . CHARACTER
    (54) ex -> . CADENA_NO_COMILLAS
    (55) ex -> . aritmetica
    (56) ex -> . comparacion
    (57) ex -> . PARENTESIS_ABRE ex PARENTESIS_CIERRA
    (64) ex2 -> . num
    (65) ex2 -> . CADENA_NO_COMILLAS
    (66) ex2 -> . aritmetica
    (67) ex2 -> . PARENTESIS_ABRE ex2 PARENTESIS_CIERRA
    (68) ex3 -> . bool
    (69) ex3 -> . CADENA_NO_COMILLAS
    (70) ex3 -> . comparacion
    (71) ex3 -> . PARENTESIS_ABRE ex3 PARENTESIS_CIERRA
    (58) ex1 -> . ex
    (59) ex1 -> . bool
    (60) ex1 -> . booleana
    (61) ex1 -> . aritmetica
    (62) ex1 -> . comparacion
    (63) ex1 -> . PARENTESIS_ABRE ex1 PARENTESIS_CIERRA

    CADENA_COMILLAS shift and go to state 39
    NULL            shift and go to state 43
    CARACTER        shift and go to state 45
    CADENA_NO_COMILLAS shift and go to state 46
    ENTERO          shift and go to state 48
    DECIMAL         shift and go to state 49
    PARENTESIS_ABRE shift and go to state 53
    TR              shift and go to state 54
    FL              shift and go to state 55
    LLAVE_ABRE      shift and go to state 56
    NEGACION        shift and go to state 60
    CHARACTER       shift and go to state 62

    valor                          shift and go to state 182
    num                            shift and go to state 40
    operacion                      shift and go to state 41
    bool                           shift and go to state 42
    ajson                          shift and go to state 44
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 50
    booleana                       shift and go to state 51
    comparacion                    shift and go to state 52
    ex                             shift and go to state 57
    ex2                            shift and go to state 58
    ex3                            shift and go to state 59
    ex1                            shift and go to state 61

state 178

    (103) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor . PUNTO_Y_COMA LLAVE_CIERRA

    PUNTO_Y_COMA    shift and go to state 183


state 179

    (104) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor . PUNTO_Y_COMA LLAVE_CIERRA

    PUNTO_Y_COMA    shift and go to state 184


state 180

    (105) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 185


state 181

    (97) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .

    TYPE            reduce using rule 97 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    LET             reduce using rule 97 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    IF              reduce using rule 97 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    WHILE           reduce using rule 97 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    FUNCTION        reduce using rule 97 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 97 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    $end            reduce using rule 97 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 97 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    RETURN          reduce using rule 97 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)


state 182

    (102) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor . PUNTO_Y_COMA LLAVE_CIERRA

    PUNTO_Y_COMA    shift and go to state 186


state 183

    (103) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 187


state 184

    (104) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 188


state 185

    (105) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .

    TYPE            reduce using rule 105 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LET             reduce using rule 105 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    IF              reduce using rule 105 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    WHILE           reduce using rule 105 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    FUNCTION        reduce using rule 105 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 105 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    $end            reduce using rule 105 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 105 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    RETURN          reduce using rule 105 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)


state 186

    (102) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 189


state 187

    (103) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .

    TYPE            reduce using rule 103 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LET             reduce using rule 103 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    IF              reduce using rule 103 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    WHILE           reduce using rule 103 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    FUNCTION        reduce using rule 103 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 103 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    $end            reduce using rule 103 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 103 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    RETURN          reduce using rule 103 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)


state 188

    (104) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .

    TYPE            reduce using rule 104 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LET             reduce using rule 104 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    IF              reduce using rule 104 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    WHILE           reduce using rule 104 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    FUNCTION        reduce using rule 104 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 104 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    $end            reduce using rule 104 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 104 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    RETURN          reduce using rule 104 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)


state 189

    (102) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .

    TYPE            reduce using rule 102 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LET             reduce using rule 102 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    IF              reduce using rule 102 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    WHILE           reduce using rule 102 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    FUNCTION        reduce using rule 102 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 102 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    $end            reduce using rule 102 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 102 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    RETURN          reduce using rule 102 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PARENTESIS_CIERRA in state 80 resolved as shift
WARNING: shift/reduce conflict for CONJUNCION in state 105 resolved as shift
WARNING: shift/reduce conflict for DISYUNCION in state 105 resolved as shift
WARNING: shift/reduce conflict for PARENTESIS_CIERRA in state 109 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 124 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 124 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 124 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 124 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 124 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 124 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 129 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 129 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 129 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 129 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 129 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 129 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 130 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 130 resolved as shift
WARNING: shift/reduce conflict for CONJUNCION in state 135 resolved as shift
WARNING: shift/reduce conflict for DISYUNCION in state 135 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 136 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 137 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 137 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 137 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 137 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 137 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 137 resolved as shift
WARNING: reduce/reduce conflict in state 50 resolved using rule (operacion -> aritmetica)
WARNING: rejected rule (ex -> aritmetica) in state 50
WARNING: reduce/reduce conflict in state 50 resolved using rule (operacion -> aritmetica)
WARNING: rejected rule (ex2 -> aritmetica) in state 50
WARNING: reduce/reduce conflict in state 50 resolved using rule (ex -> aritmetica)
WARNING: rejected rule (ex1 -> aritmetica) in state 50
WARNING: reduce/reduce conflict in state 50 resolved using rule (operacion -> aritmetica)
WARNING: rejected rule (ex1 -> aritmetica) in state 50
WARNING: reduce/reduce conflict in state 51 resolved using rule (operacion -> booleana)
WARNING: rejected rule (ex1 -> booleana) in state 51
WARNING: reduce/reduce conflict in state 52 resolved using rule (operacion -> comparacion)
WARNING: rejected rule (ex -> comparacion) in state 52
WARNING: reduce/reduce conflict in state 52 resolved using rule (operacion -> comparacion)
WARNING: rejected rule (ex3 -> comparacion) in state 52
WARNING: reduce/reduce conflict in state 52 resolved using rule (ex -> comparacion)
WARNING: rejected rule (ex1 -> comparacion) in state 52
WARNING: reduce/reduce conflict in state 52 resolved using rule (operacion -> comparacion)
WARNING: rejected rule (ex1 -> comparacion) in state 52
WARNING: reduce/reduce conflict in state 68 resolved using rule (ex1 -> bool)
WARNING: rejected rule (ex3 -> bool) in state 68
WARNING: reduce/reduce conflict in state 70 resolved using rule (ex -> comparacion)
WARNING: rejected rule (ex3 -> comparacion) in state 70
WARNING: reduce/reduce conflict in state 70 resolved using rule (ex -> comparacion)
WARNING: rejected rule (ex1 -> comparacion) in state 70
WARNING: reduce/reduce conflict in state 72 resolved using rule (ex -> num)
WARNING: rejected rule (ex2 -> num) in state 72
WARNING: reduce/reduce conflict in state 73 resolved using rule (ex -> aritmetica)
WARNING: rejected rule (ex1 -> aritmetica) in state 73
WARNING: reduce/reduce conflict in state 73 resolved using rule (ex -> aritmetica)
WARNING: rejected rule (ex2 -> aritmetica) in state 73
WARNING: reduce/reduce conflict in state 84 resolved using rule (ex -> CADENA_NO_COMILLAS)
WARNING: rejected rule (ex2 -> CADENA_NO_COMILLAS) in state 84
WARNING: reduce/reduce conflict in state 84 resolved using rule (ex -> CADENA_NO_COMILLAS)
WARNING: rejected rule (ex3 -> CADENA_NO_COMILLAS) in state 84
WARNING: reduce/reduce conflict in state 106 resolved using rule (ex -> CADENA_NO_COMILLAS)
WARNING: rejected rule (ex3 -> CADENA_NO_COMILLAS) in state 106
WARNING: reduce/reduce conflict in state 106 resolved using rule (ex2 -> CADENA_NO_COMILLAS)
WARNING: rejected rule (ex3 -> CADENA_NO_COMILLAS) in state 106
WARNING: reduce/reduce conflict in state 106 resolved using rule (ex -> CADENA_NO_COMILLAS)
WARNING: rejected rule (ex2 -> CADENA_NO_COMILLAS) in state 106
WARNING: reduce/reduce conflict in state 124 resolved using rule (aritmetica -> ex operador1 ex)
WARNING: rejected rule (ex1 -> ex) in state 124
WARNING: reduce/reduce conflict in state 125 resolved using rule (ex -> aritmetica)
WARNING: rejected rule (ex2 -> aritmetica) in state 125
WARNING: reduce/reduce conflict in state 125 resolved using rule (ex -> aritmetica)
WARNING: rejected rule (ex1 -> aritmetica) in state 125
WARNING: reduce/reduce conflict in state 126 resolved using rule (ex -> comparacion)
WARNING: rejected rule (ex1 -> comparacion) in state 126
WARNING: reduce/reduce conflict in state 126 resolved using rule (ex -> comparacion)
WARNING: rejected rule (ex3 -> comparacion) in state 126
WARNING: reduce/reduce conflict in state 128 resolved using rule (ex1 -> bool)
WARNING: rejected rule (ex3 -> bool) in state 128
WARNING: reduce/reduce conflict in state 129 resolved using rule (comparacion -> ex comparador ex)
WARNING: rejected rule (ex1 -> ex) in state 129
WARNING: reduce/reduce conflict in state 131 resolved using rule (ex -> num)
WARNING: rejected rule (ex2 -> num) in state 131
WARNING: reduce/reduce conflict in state 132 resolved using rule (ex -> CADENA_NO_COMILLAS)
WARNING: rejected rule (ex2 -> CADENA_NO_COMILLAS) in state 132
WARNING: reduce/reduce conflict in state 132 resolved using rule (ex2 -> CADENA_NO_COMILLAS)
WARNING: rejected rule (ex3 -> CADENA_NO_COMILLAS) in state 132
WARNING: reduce/reduce conflict in state 132 resolved using rule (ex -> CADENA_NO_COMILLAS)
WARNING: rejected rule (ex3 -> CADENA_NO_COMILLAS) in state 132
WARNING: reduce/reduce conflict in state 133 resolved using rule (ex -> aritmetica)
WARNING: rejected rule (ex2 -> aritmetica) in state 133
WARNING: reduce/reduce conflict in state 133 resolved using rule (ex -> aritmetica)
WARNING: rejected rule (ex1 -> aritmetica) in state 133
WARNING: reduce/reduce conflict in state 138 resolved using rule (ex -> aritmetica)
WARNING: rejected rule (ex1 -> aritmetica) in state 138
WARNING: reduce/reduce conflict in state 138 resolved using rule (ex -> aritmetica)
WARNING: rejected rule (ex2 -> aritmetica) in state 138
WARNING: reduce/reduce conflict in state 139 resolved using rule (ex -> comparacion)
WARNING: rejected rule (ex1 -> comparacion) in state 139
WARNING: reduce/reduce conflict in state 139 resolved using rule (ex -> comparacion)
WARNING: rejected rule (ex3 -> comparacion) in state 139
WARNING: reduce/reduce conflict in state 141 resolved using rule (ex -> CADENA_NO_COMILLAS)
WARNING: rejected rule (ex3 -> CADENA_NO_COMILLAS) in state 141
WARNING: reduce/reduce conflict in state 141 resolved using rule (ex -> CADENA_NO_COMILLAS)
WARNING: rejected rule (ex2 -> CADENA_NO_COMILLAS) in state 141
WARNING: reduce/reduce conflict in state 157 resolved using rule (valor_t -> CADENA_NO_COMILLAS)
WARNING: rejected rule (tipo -> CADENA_NO_COMILLAS) in state 157
WARNING: Rule (ex1 -> aritmetica) is never reduced
WARNING: Rule (ex1 -> comparacion) is never reduced
