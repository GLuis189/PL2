Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> statement
Rule 2     programa -> empty
Rule 3     empty -> <empty>
Rule 4     statement -> content PUNTO_Y_COMA
Rule 5     statement -> content PUNTO_Y_COMA statement
Rule 6     statement -> no_semicolon
Rule 7     statement -> no_semicolon statement
Rule 8     content -> define
Rule 9     content -> declare
Rule 10    content -> assign
Rule 11    no_semicolon -> condition
Rule 12    no_semicolon -> loop
Rule 13    no_semicolon -> function_def
Rule 14    ident -> CADENA_NO_COMILLAS
Rule 15    ident -> CADENA_NO_COMILLAS PUNTO ident
Rule 16    ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
Rule 17    ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
Rule 18    declare -> LET id asign_valor
Rule 19    asign_valor -> ASIGNACION valor
Rule 20    asign_valor -> empty
Rule 21    id -> variable
Rule 22    id -> variable COMA id
Rule 23    variable -> ident
Rule 24    variable -> ident DOS_PUNTOS CADENA_NO_COMILLAS
Rule 25    assign -> ident asign_valor
Rule 26    valor -> operacion
Rule 27    valor -> ajson_v
Rule 28    valor -> function_call
Rule 29    valor -> ident
Rule 30    valor -> ENTERO
Rule 31    valor -> DECIMAL
Rule 32    valor -> TR
Rule 33    valor -> FL
Rule 34    valor -> NULL
Rule 35    valor -> CARACTER
Rule 36    valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA
Rule 37    valor -> SUMA valor
Rule 38    valor -> RESTA valor
Rule 39    define -> TYPE CADENA_NO_COMILLAS ASIGNACION ajson
Rule 40    ajson -> LLAVE_ABRE lista LLAVE_CIERRA
Rule 41    lista -> elemento
Rule 42    lista -> elemento COMA
Rule 43    lista -> elemento COMA lista
Rule 44    elemento -> clave DOS_PUNTOS valor_t
Rule 45    valor_t -> tipo
Rule 46    valor_t -> ajson
Rule 47    clave -> CADENA_COMILLAS
Rule 48    clave -> CADENA_NO_COMILLAS
Rule 49    ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA
Rule 50    lista_v -> elemento_v
Rule 51    lista_v -> elemento_v COMA
Rule 52    lista_v -> elemento_v COMA lista_v
Rule 53    elemento_v -> clave_v DOS_PUNTOS valor
Rule 54    clave_v -> CADENA_NO_COMILLAS
Rule 55    clave_v -> CADENA_COMILLAS
Rule 56    operacion -> aritmetica
Rule 57    operacion -> booleana
Rule 58    operacion -> comparacion
Rule 59    aritmetica -> valor SUMA valor
Rule 60    aritmetica -> valor RESTA valor
Rule 61    aritmetica -> valor MULTIPLICACION valor
Rule 62    aritmetica -> valor DIVISION valor
Rule 63    comparacion -> valor MAYOR valor
Rule 64    comparacion -> valor MENOR valor
Rule 65    comparacion -> valor MAYOR_IGUAL valor
Rule 66    comparacion -> valor MENOR_IGUAL valor
Rule 67    comparacion -> valor IGUAL valor
Rule 68    booleana -> valor CONJUNCION valor
Rule 69    booleana -> valor DISYUNCION valor
Rule 70    booleana -> NEGACION valor
Rule 71    tipo -> INT
Rule 72    tipo -> FLOAT
Rule 73    tipo -> CHARACTER
Rule 74    tipo -> BOOLEAN
Rule 75    tipo -> CADENA_NO_COMILLAS
Rule 76    condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
Rule 77    condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
Rule 78    loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
Rule 79    id_t -> variable_t
Rule 80    id_t -> variable_t COMA id_t
Rule 81    id_t -> empty
Rule 82    variable_t -> CADENA_NO_COMILLAS DOS_PUNTOS tipo
Rule 83    function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
Rule 84    function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
Rule 85    function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
Rule 86    arg -> valor
Rule 87    arg -> valor COMA arg
Rule 88    arg -> empty

Terminals, with rules where they appear

ASIGNACION           : 19 39
BOOLEAN              : 74
CADENA_COMILLAS      : 16 17 47 55
CADENA_NO_COMILLAS   : 14 15 16 17 24 39 48 54 75 82 83 84 85
CARACTER             : 35
CHARACTER            : 73
COMA                 : 22 42 43 51 52 80 87
CONJUNCION           : 68
CORCHETE_ABRE        : 16 17
CORCHETE_CIERRA      : 16 17
DECIMAL              : 31
DISYUNCION           : 69
DIVISION             : 62
DOS_PUNTOS           : 24 44 53 82 83 84
ELSE                 : 77
ENTERO               : 30
FL                   : 33
FLOAT                : 72
FUNCTION             : 83 84
IF                   : 76 77
IGUAL                : 67
INT                  : 71
LET                  : 18
LLAVE_ABRE           : 40 49 76 77 77 78 83 84
LLAVE_CIERRA         : 40 49 76 77 77 78 83 84
MAYOR                : 63
MAYOR_IGUAL          : 65
MENOR                : 64
MENOR_IGUAL          : 66
MULTIPLICACION       : 61
NEGACION             : 70
NULL                 : 34
PARENTESIS_ABRE      : 36 76 77 78 83 84 85
PARENTESIS_CIERRA    : 36 76 77 78 83 84 85
PUNTO                : 15 17
PUNTO_Y_COMA         : 4 5 83 84
RESTA                : 38 60
RETURN               : 83 84
SUMA                 : 37 59
TR                   : 32
TYPE                 : 39
WHILE                : 78
error                : 

Nonterminals, with rules where they appear

ajson                : 39 46
ajson_v              : 27
arg                  : 85 87
aritmetica           : 56
asign_valor          : 18 25
assign               : 10
booleana             : 57
clave                : 44
clave_v              : 53
comparacion          : 58
condition            : 11
content              : 4 5
declare              : 9
define               : 8
elemento             : 41 42 43
elemento_v           : 50 51 52
empty                : 2 20 81 88
function_call        : 28
function_def         : 13
id                   : 18 22
id_t                 : 80 83 84
ident                : 15 17 23 24 25 29
lista                : 40 43
lista_v              : 49 52
loop                 : 12
no_semicolon         : 6 7
operacion            : 26
programa             : 0
statement            : 1 5 7 76 77 77 78 83
tipo                 : 45 82 83 84
valor                : 19 36 37 38 53 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 76 77 78 83 84 86 87
valor_t              : 44
variable             : 21 22
variable_t           : 79 80

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . statement
    (2) programa -> . empty
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (3) empty -> .
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (39) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (18) declare -> . LET id asign_valor
    (25) assign -> . ident asign_valor
    (76) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (78) loop -> . WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (83) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident

    $end            reduce using rule 3 (empty -> .)
    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    programa                       shift and go to state 1
    statement                      shift and go to state 2
    empty                          shift and go to state 3
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    ident                          shift and go to state 15

state 1

    (0) S' -> programa .



state 2

    (1) programa -> statement .

    $end            reduce using rule 1 (programa -> statement .)


state 3

    (2) programa -> empty .

    $end            reduce using rule 2 (programa -> empty .)


state 4

    (4) statement -> content . PUNTO_Y_COMA
    (5) statement -> content . PUNTO_Y_COMA statement

    PUNTO_Y_COMA    shift and go to state 19


state 5

    (6) statement -> no_semicolon .
    (7) statement -> no_semicolon . statement
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (39) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (18) declare -> . LET id asign_valor
    (25) assign -> . ident asign_valor
    (76) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (78) loop -> . WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (83) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident

    $end            reduce using rule 6 (statement -> no_semicolon .)
    LLAVE_CIERRA    reduce using rule 6 (statement -> no_semicolon .)
    RETURN          reduce using rule 6 (statement -> no_semicolon .)
    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    no_semicolon                   shift and go to state 5
    statement                      shift and go to state 20
    content                        shift and go to state 4
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    ident                          shift and go to state 15

state 6

    (8) content -> define .

    PUNTO_Y_COMA    reduce using rule 8 (content -> define .)


state 7

    (9) content -> declare .

    PUNTO_Y_COMA    reduce using rule 9 (content -> declare .)


state 8

    (10) content -> assign .

    PUNTO_Y_COMA    reduce using rule 10 (content -> assign .)


state 9

    (11) no_semicolon -> condition .

    TYPE            reduce using rule 11 (no_semicolon -> condition .)
    LET             reduce using rule 11 (no_semicolon -> condition .)
    IF              reduce using rule 11 (no_semicolon -> condition .)
    WHILE           reduce using rule 11 (no_semicolon -> condition .)
    FUNCTION        reduce using rule 11 (no_semicolon -> condition .)
    CADENA_NO_COMILLAS reduce using rule 11 (no_semicolon -> condition .)
    $end            reduce using rule 11 (no_semicolon -> condition .)
    LLAVE_CIERRA    reduce using rule 11 (no_semicolon -> condition .)
    RETURN          reduce using rule 11 (no_semicolon -> condition .)


state 10

    (12) no_semicolon -> loop .

    TYPE            reduce using rule 12 (no_semicolon -> loop .)
    LET             reduce using rule 12 (no_semicolon -> loop .)
    IF              reduce using rule 12 (no_semicolon -> loop .)
    WHILE           reduce using rule 12 (no_semicolon -> loop .)
    FUNCTION        reduce using rule 12 (no_semicolon -> loop .)
    CADENA_NO_COMILLAS reduce using rule 12 (no_semicolon -> loop .)
    $end            reduce using rule 12 (no_semicolon -> loop .)
    LLAVE_CIERRA    reduce using rule 12 (no_semicolon -> loop .)
    RETURN          reduce using rule 12 (no_semicolon -> loop .)


state 11

    (13) no_semicolon -> function_def .

    TYPE            reduce using rule 13 (no_semicolon -> function_def .)
    LET             reduce using rule 13 (no_semicolon -> function_def .)
    IF              reduce using rule 13 (no_semicolon -> function_def .)
    WHILE           reduce using rule 13 (no_semicolon -> function_def .)
    FUNCTION        reduce using rule 13 (no_semicolon -> function_def .)
    CADENA_NO_COMILLAS reduce using rule 13 (no_semicolon -> function_def .)
    $end            reduce using rule 13 (no_semicolon -> function_def .)
    LLAVE_CIERRA    reduce using rule 13 (no_semicolon -> function_def .)
    RETURN          reduce using rule 13 (no_semicolon -> function_def .)


state 12

    (39) define -> TYPE . CADENA_NO_COMILLAS ASIGNACION ajson

    CADENA_NO_COMILLAS shift and go to state 21


state 13

    (14) ident -> CADENA_NO_COMILLAS .
    (15) ident -> CADENA_NO_COMILLAS . PUNTO ident
    (16) ident -> CADENA_NO_COMILLAS . CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> CADENA_NO_COMILLAS . CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident

    ASIGNACION      reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    PUNTO_Y_COMA    reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    DOS_PUNTOS      reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    COMA            reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    SUMA            reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    RESTA           reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    MULTIPLICACION  reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    DIVISION        reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    CONJUNCION      reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    DISYUNCION      reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    MAYOR           reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    MENOR           reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    MAYOR_IGUAL     reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    MENOR_IGUAL     reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    IGUAL           reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    PARENTESIS_CIERRA reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    LLAVE_CIERRA    reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    PUNTO           shift and go to state 22
    CORCHETE_ABRE   shift and go to state 23


state 14

    (18) declare -> LET . id asign_valor
    (21) id -> . variable
    (22) id -> . variable COMA id
    (23) variable -> . ident
    (24) variable -> . ident DOS_PUNTOS CADENA_NO_COMILLAS
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident

    CADENA_NO_COMILLAS shift and go to state 13

    id                             shift and go to state 24
    variable                       shift and go to state 25
    ident                          shift and go to state 26

state 15

    (25) assign -> ident . asign_valor
    (19) asign_valor -> . ASIGNACION valor
    (20) asign_valor -> . empty
    (3) empty -> .

    ASIGNACION      shift and go to state 28
    PUNTO_Y_COMA    reduce using rule 3 (empty -> .)

    asign_valor                    shift and go to state 27
    empty                          shift and go to state 29

state 16

    (76) condition -> IF . PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> IF . PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA

    PARENTESIS_ABRE shift and go to state 30


state 17

    (78) loop -> WHILE . PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA

    PARENTESIS_ABRE shift and go to state 31


state 18

    (83) function_def -> FUNCTION . CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) function_def -> FUNCTION . CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    CADENA_NO_COMILLAS shift and go to state 32


state 19

    (4) statement -> content PUNTO_Y_COMA .
    (5) statement -> content PUNTO_Y_COMA . statement
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (39) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (18) declare -> . LET id asign_valor
    (25) assign -> . ident asign_valor
    (76) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (78) loop -> . WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (83) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident

    $end            reduce using rule 4 (statement -> content PUNTO_Y_COMA .)
    LLAVE_CIERRA    reduce using rule 4 (statement -> content PUNTO_Y_COMA .)
    RETURN          reduce using rule 4 (statement -> content PUNTO_Y_COMA .)
    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    content                        shift and go to state 4
    statement                      shift and go to state 33
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    ident                          shift and go to state 15

state 20

    (7) statement -> no_semicolon statement .

    $end            reduce using rule 7 (statement -> no_semicolon statement .)
    LLAVE_CIERRA    reduce using rule 7 (statement -> no_semicolon statement .)
    RETURN          reduce using rule 7 (statement -> no_semicolon statement .)


state 21

    (39) define -> TYPE CADENA_NO_COMILLAS . ASIGNACION ajson

    ASIGNACION      shift and go to state 34


state 22

    (15) ident -> CADENA_NO_COMILLAS PUNTO . ident
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident

    CADENA_NO_COMILLAS shift and go to state 13

    ident                          shift and go to state 35

state 23

    (16) ident -> CADENA_NO_COMILLAS CORCHETE_ABRE . CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> CADENA_NO_COMILLAS CORCHETE_ABRE . CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident

    CADENA_COMILLAS shift and go to state 36


state 24

    (18) declare -> LET id . asign_valor
    (19) asign_valor -> . ASIGNACION valor
    (20) asign_valor -> . empty
    (3) empty -> .

    ASIGNACION      shift and go to state 28
    PUNTO_Y_COMA    reduce using rule 3 (empty -> .)

    asign_valor                    shift and go to state 37
    empty                          shift and go to state 29

state 25

    (21) id -> variable .
    (22) id -> variable . COMA id

    ASIGNACION      reduce using rule 21 (id -> variable .)
    PUNTO_Y_COMA    reduce using rule 21 (id -> variable .)
    COMA            shift and go to state 38


state 26

    (23) variable -> ident .
    (24) variable -> ident . DOS_PUNTOS CADENA_NO_COMILLAS

    COMA            reduce using rule 23 (variable -> ident .)
    ASIGNACION      reduce using rule 23 (variable -> ident .)
    PUNTO_Y_COMA    reduce using rule 23 (variable -> ident .)
    DOS_PUNTOS      shift and go to state 39


state 27

    (25) assign -> ident asign_valor .

    PUNTO_Y_COMA    reduce using rule 25 (assign -> ident asign_valor .)


state 28

    (19) asign_valor -> ASIGNACION . valor
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 40
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 29

    (20) asign_valor -> empty .

    PUNTO_Y_COMA    reduce using rule 20 (asign_valor -> empty .)


state 30

    (76) condition -> IF PARENTESIS_ABRE . valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> IF PARENTESIS_ABRE . valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 60
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 31

    (78) loop -> WHILE PARENTESIS_ABRE . valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 61
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 32

    (83) function_def -> FUNCTION CADENA_NO_COMILLAS . PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) function_def -> FUNCTION CADENA_NO_COMILLAS . PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    PARENTESIS_ABRE shift and go to state 62


state 33

    (5) statement -> content PUNTO_Y_COMA statement .

    $end            reduce using rule 5 (statement -> content PUNTO_Y_COMA statement .)
    LLAVE_CIERRA    reduce using rule 5 (statement -> content PUNTO_Y_COMA statement .)
    RETURN          reduce using rule 5 (statement -> content PUNTO_Y_COMA statement .)


state 34

    (39) define -> TYPE CADENA_NO_COMILLAS ASIGNACION . ajson
    (40) ajson -> . LLAVE_ABRE lista LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 64

    ajson                          shift and go to state 63

state 35

    (15) ident -> CADENA_NO_COMILLAS PUNTO ident .

    ASIGNACION      reduce using rule 15 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    PUNTO_Y_COMA    reduce using rule 15 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    DOS_PUNTOS      reduce using rule 15 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    COMA            reduce using rule 15 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    SUMA            reduce using rule 15 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    RESTA           reduce using rule 15 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    MULTIPLICACION  reduce using rule 15 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    DIVISION        reduce using rule 15 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    CONJUNCION      reduce using rule 15 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    DISYUNCION      reduce using rule 15 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    MAYOR           reduce using rule 15 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    MENOR           reduce using rule 15 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    MAYOR_IGUAL     reduce using rule 15 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    MENOR_IGUAL     reduce using rule 15 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    IGUAL           reduce using rule 15 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    PARENTESIS_CIERRA reduce using rule 15 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    LLAVE_CIERRA    reduce using rule 15 (ident -> CADENA_NO_COMILLAS PUNTO ident .)


state 36

    (16) ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS . CORCHETE_CIERRA
    (17) ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS . CORCHETE_CIERRA PUNTO ident

    CORCHETE_CIERRA shift and go to state 65


state 37

    (18) declare -> LET id asign_valor .

    PUNTO_Y_COMA    reduce using rule 18 (declare -> LET id asign_valor .)


state 38

    (22) id -> variable COMA . id
    (21) id -> . variable
    (22) id -> . variable COMA id
    (23) variable -> . ident
    (24) variable -> . ident DOS_PUNTOS CADENA_NO_COMILLAS
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident

    CADENA_NO_COMILLAS shift and go to state 13

    variable                       shift and go to state 25
    id                             shift and go to state 66
    ident                          shift and go to state 26

state 39

    (24) variable -> ident DOS_PUNTOS . CADENA_NO_COMILLAS

    CADENA_NO_COMILLAS shift and go to state 67


state 40

    (19) asign_valor -> ASIGNACION valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    PUNTO_Y_COMA    reduce using rule 19 (asign_valor -> ASIGNACION valor .)
    SUMA            shift and go to state 68
    RESTA           shift and go to state 69
    MULTIPLICACION  shift and go to state 70
    DIVISION        shift and go to state 71
    CONJUNCION      shift and go to state 72
    DISYUNCION      shift and go to state 73
    MAYOR           shift and go to state 74
    MENOR           shift and go to state 75
    MAYOR_IGUAL     shift and go to state 76
    MENOR_IGUAL     shift and go to state 77
    IGUAL           shift and go to state 78


state 41

    (26) valor -> operacion .

    SUMA            reduce using rule 26 (valor -> operacion .)
    RESTA           reduce using rule 26 (valor -> operacion .)
    MULTIPLICACION  reduce using rule 26 (valor -> operacion .)
    DIVISION        reduce using rule 26 (valor -> operacion .)
    CONJUNCION      reduce using rule 26 (valor -> operacion .)
    DISYUNCION      reduce using rule 26 (valor -> operacion .)
    MAYOR           reduce using rule 26 (valor -> operacion .)
    MENOR           reduce using rule 26 (valor -> operacion .)
    MAYOR_IGUAL     reduce using rule 26 (valor -> operacion .)
    MENOR_IGUAL     reduce using rule 26 (valor -> operacion .)
    IGUAL           reduce using rule 26 (valor -> operacion .)
    PUNTO_Y_COMA    reduce using rule 26 (valor -> operacion .)
    PARENTESIS_CIERRA reduce using rule 26 (valor -> operacion .)
    COMA            reduce using rule 26 (valor -> operacion .)
    LLAVE_CIERRA    reduce using rule 26 (valor -> operacion .)


state 42

    (27) valor -> ajson_v .

    SUMA            reduce using rule 27 (valor -> ajson_v .)
    RESTA           reduce using rule 27 (valor -> ajson_v .)
    MULTIPLICACION  reduce using rule 27 (valor -> ajson_v .)
    DIVISION        reduce using rule 27 (valor -> ajson_v .)
    CONJUNCION      reduce using rule 27 (valor -> ajson_v .)
    DISYUNCION      reduce using rule 27 (valor -> ajson_v .)
    MAYOR           reduce using rule 27 (valor -> ajson_v .)
    MENOR           reduce using rule 27 (valor -> ajson_v .)
    MAYOR_IGUAL     reduce using rule 27 (valor -> ajson_v .)
    MENOR_IGUAL     reduce using rule 27 (valor -> ajson_v .)
    IGUAL           reduce using rule 27 (valor -> ajson_v .)
    PUNTO_Y_COMA    reduce using rule 27 (valor -> ajson_v .)
    PARENTESIS_CIERRA reduce using rule 27 (valor -> ajson_v .)
    COMA            reduce using rule 27 (valor -> ajson_v .)
    LLAVE_CIERRA    reduce using rule 27 (valor -> ajson_v .)


state 43

    (28) valor -> function_call .

    SUMA            reduce using rule 28 (valor -> function_call .)
    RESTA           reduce using rule 28 (valor -> function_call .)
    MULTIPLICACION  reduce using rule 28 (valor -> function_call .)
    DIVISION        reduce using rule 28 (valor -> function_call .)
    CONJUNCION      reduce using rule 28 (valor -> function_call .)
    DISYUNCION      reduce using rule 28 (valor -> function_call .)
    MAYOR           reduce using rule 28 (valor -> function_call .)
    MENOR           reduce using rule 28 (valor -> function_call .)
    MAYOR_IGUAL     reduce using rule 28 (valor -> function_call .)
    MENOR_IGUAL     reduce using rule 28 (valor -> function_call .)
    IGUAL           reduce using rule 28 (valor -> function_call .)
    PUNTO_Y_COMA    reduce using rule 28 (valor -> function_call .)
    PARENTESIS_CIERRA reduce using rule 28 (valor -> function_call .)
    COMA            reduce using rule 28 (valor -> function_call .)
    LLAVE_CIERRA    reduce using rule 28 (valor -> function_call .)


state 44

    (29) valor -> ident .

    SUMA            reduce using rule 29 (valor -> ident .)
    RESTA           reduce using rule 29 (valor -> ident .)
    MULTIPLICACION  reduce using rule 29 (valor -> ident .)
    DIVISION        reduce using rule 29 (valor -> ident .)
    CONJUNCION      reduce using rule 29 (valor -> ident .)
    DISYUNCION      reduce using rule 29 (valor -> ident .)
    MAYOR           reduce using rule 29 (valor -> ident .)
    MENOR           reduce using rule 29 (valor -> ident .)
    MAYOR_IGUAL     reduce using rule 29 (valor -> ident .)
    MENOR_IGUAL     reduce using rule 29 (valor -> ident .)
    IGUAL           reduce using rule 29 (valor -> ident .)
    PUNTO_Y_COMA    reduce using rule 29 (valor -> ident .)
    PARENTESIS_CIERRA reduce using rule 29 (valor -> ident .)
    COMA            reduce using rule 29 (valor -> ident .)
    LLAVE_CIERRA    reduce using rule 29 (valor -> ident .)


state 45

    (30) valor -> ENTERO .

    SUMA            reduce using rule 30 (valor -> ENTERO .)
    RESTA           reduce using rule 30 (valor -> ENTERO .)
    MULTIPLICACION  reduce using rule 30 (valor -> ENTERO .)
    DIVISION        reduce using rule 30 (valor -> ENTERO .)
    CONJUNCION      reduce using rule 30 (valor -> ENTERO .)
    DISYUNCION      reduce using rule 30 (valor -> ENTERO .)
    MAYOR           reduce using rule 30 (valor -> ENTERO .)
    MENOR           reduce using rule 30 (valor -> ENTERO .)
    MAYOR_IGUAL     reduce using rule 30 (valor -> ENTERO .)
    MENOR_IGUAL     reduce using rule 30 (valor -> ENTERO .)
    IGUAL           reduce using rule 30 (valor -> ENTERO .)
    PUNTO_Y_COMA    reduce using rule 30 (valor -> ENTERO .)
    PARENTESIS_CIERRA reduce using rule 30 (valor -> ENTERO .)
    COMA            reduce using rule 30 (valor -> ENTERO .)
    LLAVE_CIERRA    reduce using rule 30 (valor -> ENTERO .)


state 46

    (31) valor -> DECIMAL .

    SUMA            reduce using rule 31 (valor -> DECIMAL .)
    RESTA           reduce using rule 31 (valor -> DECIMAL .)
    MULTIPLICACION  reduce using rule 31 (valor -> DECIMAL .)
    DIVISION        reduce using rule 31 (valor -> DECIMAL .)
    CONJUNCION      reduce using rule 31 (valor -> DECIMAL .)
    DISYUNCION      reduce using rule 31 (valor -> DECIMAL .)
    MAYOR           reduce using rule 31 (valor -> DECIMAL .)
    MENOR           reduce using rule 31 (valor -> DECIMAL .)
    MAYOR_IGUAL     reduce using rule 31 (valor -> DECIMAL .)
    MENOR_IGUAL     reduce using rule 31 (valor -> DECIMAL .)
    IGUAL           reduce using rule 31 (valor -> DECIMAL .)
    PUNTO_Y_COMA    reduce using rule 31 (valor -> DECIMAL .)
    PARENTESIS_CIERRA reduce using rule 31 (valor -> DECIMAL .)
    COMA            reduce using rule 31 (valor -> DECIMAL .)
    LLAVE_CIERRA    reduce using rule 31 (valor -> DECIMAL .)


state 47

    (32) valor -> TR .

    SUMA            reduce using rule 32 (valor -> TR .)
    RESTA           reduce using rule 32 (valor -> TR .)
    MULTIPLICACION  reduce using rule 32 (valor -> TR .)
    DIVISION        reduce using rule 32 (valor -> TR .)
    CONJUNCION      reduce using rule 32 (valor -> TR .)
    DISYUNCION      reduce using rule 32 (valor -> TR .)
    MAYOR           reduce using rule 32 (valor -> TR .)
    MENOR           reduce using rule 32 (valor -> TR .)
    MAYOR_IGUAL     reduce using rule 32 (valor -> TR .)
    MENOR_IGUAL     reduce using rule 32 (valor -> TR .)
    IGUAL           reduce using rule 32 (valor -> TR .)
    PUNTO_Y_COMA    reduce using rule 32 (valor -> TR .)
    PARENTESIS_CIERRA reduce using rule 32 (valor -> TR .)
    COMA            reduce using rule 32 (valor -> TR .)
    LLAVE_CIERRA    reduce using rule 32 (valor -> TR .)


state 48

    (33) valor -> FL .

    SUMA            reduce using rule 33 (valor -> FL .)
    RESTA           reduce using rule 33 (valor -> FL .)
    MULTIPLICACION  reduce using rule 33 (valor -> FL .)
    DIVISION        reduce using rule 33 (valor -> FL .)
    CONJUNCION      reduce using rule 33 (valor -> FL .)
    DISYUNCION      reduce using rule 33 (valor -> FL .)
    MAYOR           reduce using rule 33 (valor -> FL .)
    MENOR           reduce using rule 33 (valor -> FL .)
    MAYOR_IGUAL     reduce using rule 33 (valor -> FL .)
    MENOR_IGUAL     reduce using rule 33 (valor -> FL .)
    IGUAL           reduce using rule 33 (valor -> FL .)
    PUNTO_Y_COMA    reduce using rule 33 (valor -> FL .)
    PARENTESIS_CIERRA reduce using rule 33 (valor -> FL .)
    COMA            reduce using rule 33 (valor -> FL .)
    LLAVE_CIERRA    reduce using rule 33 (valor -> FL .)


state 49

    (34) valor -> NULL .

    SUMA            reduce using rule 34 (valor -> NULL .)
    RESTA           reduce using rule 34 (valor -> NULL .)
    MULTIPLICACION  reduce using rule 34 (valor -> NULL .)
    DIVISION        reduce using rule 34 (valor -> NULL .)
    CONJUNCION      reduce using rule 34 (valor -> NULL .)
    DISYUNCION      reduce using rule 34 (valor -> NULL .)
    MAYOR           reduce using rule 34 (valor -> NULL .)
    MENOR           reduce using rule 34 (valor -> NULL .)
    MAYOR_IGUAL     reduce using rule 34 (valor -> NULL .)
    MENOR_IGUAL     reduce using rule 34 (valor -> NULL .)
    IGUAL           reduce using rule 34 (valor -> NULL .)
    PUNTO_Y_COMA    reduce using rule 34 (valor -> NULL .)
    PARENTESIS_CIERRA reduce using rule 34 (valor -> NULL .)
    COMA            reduce using rule 34 (valor -> NULL .)
    LLAVE_CIERRA    reduce using rule 34 (valor -> NULL .)


state 50

    (35) valor -> CARACTER .

    SUMA            reduce using rule 35 (valor -> CARACTER .)
    RESTA           reduce using rule 35 (valor -> CARACTER .)
    MULTIPLICACION  reduce using rule 35 (valor -> CARACTER .)
    DIVISION        reduce using rule 35 (valor -> CARACTER .)
    CONJUNCION      reduce using rule 35 (valor -> CARACTER .)
    DISYUNCION      reduce using rule 35 (valor -> CARACTER .)
    MAYOR           reduce using rule 35 (valor -> CARACTER .)
    MENOR           reduce using rule 35 (valor -> CARACTER .)
    MAYOR_IGUAL     reduce using rule 35 (valor -> CARACTER .)
    MENOR_IGUAL     reduce using rule 35 (valor -> CARACTER .)
    IGUAL           reduce using rule 35 (valor -> CARACTER .)
    PUNTO_Y_COMA    reduce using rule 35 (valor -> CARACTER .)
    PARENTESIS_CIERRA reduce using rule 35 (valor -> CARACTER .)
    COMA            reduce using rule 35 (valor -> CARACTER .)
    LLAVE_CIERRA    reduce using rule 35 (valor -> CARACTER .)


state 51

    (36) valor -> PARENTESIS_ABRE . valor PARENTESIS_CIERRA
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 79
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 52

    (37) valor -> SUMA . valor
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 80
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 53

    (38) valor -> RESTA . valor
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 81
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 54

    (56) operacion -> aritmetica .

    SUMA            reduce using rule 56 (operacion -> aritmetica .)
    RESTA           reduce using rule 56 (operacion -> aritmetica .)
    MULTIPLICACION  reduce using rule 56 (operacion -> aritmetica .)
    DIVISION        reduce using rule 56 (operacion -> aritmetica .)
    CONJUNCION      reduce using rule 56 (operacion -> aritmetica .)
    DISYUNCION      reduce using rule 56 (operacion -> aritmetica .)
    MAYOR           reduce using rule 56 (operacion -> aritmetica .)
    MENOR           reduce using rule 56 (operacion -> aritmetica .)
    MAYOR_IGUAL     reduce using rule 56 (operacion -> aritmetica .)
    MENOR_IGUAL     reduce using rule 56 (operacion -> aritmetica .)
    IGUAL           reduce using rule 56 (operacion -> aritmetica .)
    PUNTO_Y_COMA    reduce using rule 56 (operacion -> aritmetica .)
    PARENTESIS_CIERRA reduce using rule 56 (operacion -> aritmetica .)
    COMA            reduce using rule 56 (operacion -> aritmetica .)
    LLAVE_CIERRA    reduce using rule 56 (operacion -> aritmetica .)


state 55

    (57) operacion -> booleana .

    SUMA            reduce using rule 57 (operacion -> booleana .)
    RESTA           reduce using rule 57 (operacion -> booleana .)
    MULTIPLICACION  reduce using rule 57 (operacion -> booleana .)
    DIVISION        reduce using rule 57 (operacion -> booleana .)
    CONJUNCION      reduce using rule 57 (operacion -> booleana .)
    DISYUNCION      reduce using rule 57 (operacion -> booleana .)
    MAYOR           reduce using rule 57 (operacion -> booleana .)
    MENOR           reduce using rule 57 (operacion -> booleana .)
    MAYOR_IGUAL     reduce using rule 57 (operacion -> booleana .)
    MENOR_IGUAL     reduce using rule 57 (operacion -> booleana .)
    IGUAL           reduce using rule 57 (operacion -> booleana .)
    PUNTO_Y_COMA    reduce using rule 57 (operacion -> booleana .)
    PARENTESIS_CIERRA reduce using rule 57 (operacion -> booleana .)
    COMA            reduce using rule 57 (operacion -> booleana .)
    LLAVE_CIERRA    reduce using rule 57 (operacion -> booleana .)


state 56

    (58) operacion -> comparacion .

    SUMA            reduce using rule 58 (operacion -> comparacion .)
    RESTA           reduce using rule 58 (operacion -> comparacion .)
    MULTIPLICACION  reduce using rule 58 (operacion -> comparacion .)
    DIVISION        reduce using rule 58 (operacion -> comparacion .)
    CONJUNCION      reduce using rule 58 (operacion -> comparacion .)
    DISYUNCION      reduce using rule 58 (operacion -> comparacion .)
    MAYOR           reduce using rule 58 (operacion -> comparacion .)
    MENOR           reduce using rule 58 (operacion -> comparacion .)
    MAYOR_IGUAL     reduce using rule 58 (operacion -> comparacion .)
    MENOR_IGUAL     reduce using rule 58 (operacion -> comparacion .)
    IGUAL           reduce using rule 58 (operacion -> comparacion .)
    PUNTO_Y_COMA    reduce using rule 58 (operacion -> comparacion .)
    PARENTESIS_CIERRA reduce using rule 58 (operacion -> comparacion .)
    COMA            reduce using rule 58 (operacion -> comparacion .)
    LLAVE_CIERRA    reduce using rule 58 (operacion -> comparacion .)


state 57

    (49) ajson_v -> LLAVE_ABRE . lista_v LLAVE_CIERRA
    (50) lista_v -> . elemento_v
    (51) lista_v -> . elemento_v COMA
    (52) lista_v -> . elemento_v COMA lista_v
    (53) elemento_v -> . clave_v DOS_PUNTOS valor
    (54) clave_v -> . CADENA_NO_COMILLAS
    (55) clave_v -> . CADENA_COMILLAS

    CADENA_NO_COMILLAS shift and go to state 85
    CADENA_COMILLAS shift and go to state 86

    lista_v                        shift and go to state 82
    elemento_v                     shift and go to state 83
    clave_v                        shift and go to state 84

state 58

    (85) function_call -> CADENA_NO_COMILLAS . PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> CADENA_NO_COMILLAS .
    (15) ident -> CADENA_NO_COMILLAS . PUNTO ident
    (16) ident -> CADENA_NO_COMILLAS . CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> CADENA_NO_COMILLAS . CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident

    PARENTESIS_ABRE shift and go to state 87
    SUMA            reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    RESTA           reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    MULTIPLICACION  reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    DIVISION        reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    CONJUNCION      reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    DISYUNCION      reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    MAYOR           reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    MENOR           reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    MAYOR_IGUAL     reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    MENOR_IGUAL     reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    IGUAL           reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    PUNTO_Y_COMA    reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    PARENTESIS_CIERRA reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    COMA            reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    LLAVE_CIERRA    reduce using rule 14 (ident -> CADENA_NO_COMILLAS .)
    PUNTO           shift and go to state 22
    CORCHETE_ABRE   shift and go to state 23


state 59

    (70) booleana -> NEGACION . valor
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 88
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 60

    (76) condition -> IF PARENTESIS_ABRE valor . PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> IF PARENTESIS_ABRE valor . PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    PARENTESIS_CIERRA shift and go to state 89
    SUMA            shift and go to state 68
    RESTA           shift and go to state 69
    MULTIPLICACION  shift and go to state 70
    DIVISION        shift and go to state 71
    CONJUNCION      shift and go to state 72
    DISYUNCION      shift and go to state 73
    MAYOR           shift and go to state 74
    MENOR           shift and go to state 75
    MAYOR_IGUAL     shift and go to state 76
    MENOR_IGUAL     shift and go to state 77
    IGUAL           shift and go to state 78


state 61

    (78) loop -> WHILE PARENTESIS_ABRE valor . PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    PARENTESIS_CIERRA shift and go to state 90
    SUMA            shift and go to state 68
    RESTA           shift and go to state 69
    MULTIPLICACION  shift and go to state 70
    DIVISION        shift and go to state 71
    CONJUNCION      shift and go to state 72
    DISYUNCION      shift and go to state 73
    MAYOR           shift and go to state 74
    MENOR           shift and go to state 75
    MAYOR_IGUAL     shift and go to state 76
    MENOR_IGUAL     shift and go to state 77
    IGUAL           shift and go to state 78


state 62

    (83) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE . id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE . id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (79) id_t -> . variable_t
    (80) id_t -> . variable_t COMA id_t
    (81) id_t -> . empty
    (82) variable_t -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (3) empty -> .

    CADENA_NO_COMILLAS shift and go to state 91
    PARENTESIS_CIERRA reduce using rule 3 (empty -> .)

    id_t                           shift and go to state 92
    variable_t                     shift and go to state 93
    empty                          shift and go to state 94

state 63

    (39) define -> TYPE CADENA_NO_COMILLAS ASIGNACION ajson .

    PUNTO_Y_COMA    reduce using rule 39 (define -> TYPE CADENA_NO_COMILLAS ASIGNACION ajson .)


state 64

    (40) ajson -> LLAVE_ABRE . lista LLAVE_CIERRA
    (41) lista -> . elemento
    (42) lista -> . elemento COMA
    (43) lista -> . elemento COMA lista
    (44) elemento -> . clave DOS_PUNTOS valor_t
    (47) clave -> . CADENA_COMILLAS
    (48) clave -> . CADENA_NO_COMILLAS

    CADENA_COMILLAS shift and go to state 98
    CADENA_NO_COMILLAS shift and go to state 99

    lista                          shift and go to state 95
    elemento                       shift and go to state 96
    clave                          shift and go to state 97

state 65

    (16) ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .
    (17) ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA . PUNTO ident

    ASIGNACION      reduce using rule 16 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    PUNTO_Y_COMA    reduce using rule 16 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    DOS_PUNTOS      reduce using rule 16 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    COMA            reduce using rule 16 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    SUMA            reduce using rule 16 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    RESTA           reduce using rule 16 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    MULTIPLICACION  reduce using rule 16 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    DIVISION        reduce using rule 16 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    CONJUNCION      reduce using rule 16 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    DISYUNCION      reduce using rule 16 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    MAYOR           reduce using rule 16 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    MENOR           reduce using rule 16 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    MAYOR_IGUAL     reduce using rule 16 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    MENOR_IGUAL     reduce using rule 16 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    IGUAL           reduce using rule 16 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 16 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 16 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    PUNTO           shift and go to state 100


state 66

    (22) id -> variable COMA id .

    ASIGNACION      reduce using rule 22 (id -> variable COMA id .)
    PUNTO_Y_COMA    reduce using rule 22 (id -> variable COMA id .)


state 67

    (24) variable -> ident DOS_PUNTOS CADENA_NO_COMILLAS .

    COMA            reduce using rule 24 (variable -> ident DOS_PUNTOS CADENA_NO_COMILLAS .)
    ASIGNACION      reduce using rule 24 (variable -> ident DOS_PUNTOS CADENA_NO_COMILLAS .)
    PUNTO_Y_COMA    reduce using rule 24 (variable -> ident DOS_PUNTOS CADENA_NO_COMILLAS .)


state 68

    (59) aritmetica -> valor SUMA . valor
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 101
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 69

    (60) aritmetica -> valor RESTA . valor
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 102
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 70

    (61) aritmetica -> valor MULTIPLICACION . valor
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 103
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 71

    (62) aritmetica -> valor DIVISION . valor
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 104
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 72

    (68) booleana -> valor CONJUNCION . valor
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 105
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 73

    (69) booleana -> valor DISYUNCION . valor
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 106
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 74

    (63) comparacion -> valor MAYOR . valor
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 107
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 75

    (64) comparacion -> valor MENOR . valor
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 108
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 76

    (65) comparacion -> valor MAYOR_IGUAL . valor
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 109
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 77

    (66) comparacion -> valor MENOR_IGUAL . valor
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 110
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 78

    (67) comparacion -> valor IGUAL . valor
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 111
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 79

    (36) valor -> PARENTESIS_ABRE valor . PARENTESIS_CIERRA
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    PARENTESIS_CIERRA shift and go to state 112
    SUMA            shift and go to state 68
    RESTA           shift and go to state 69
    MULTIPLICACION  shift and go to state 70
    DIVISION        shift and go to state 71
    CONJUNCION      shift and go to state 72
    DISYUNCION      shift and go to state 73
    MAYOR           shift and go to state 74
    MENOR           shift and go to state 75
    MAYOR_IGUAL     shift and go to state 76
    MENOR_IGUAL     shift and go to state 77
    IGUAL           shift and go to state 78


state 80

    (37) valor -> SUMA valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    SUMA            reduce using rule 37 (valor -> SUMA valor .)
    RESTA           reduce using rule 37 (valor -> SUMA valor .)
    MULTIPLICACION  reduce using rule 37 (valor -> SUMA valor .)
    DIVISION        reduce using rule 37 (valor -> SUMA valor .)
    CONJUNCION      reduce using rule 37 (valor -> SUMA valor .)
    DISYUNCION      reduce using rule 37 (valor -> SUMA valor .)
    MAYOR           reduce using rule 37 (valor -> SUMA valor .)
    MENOR           reduce using rule 37 (valor -> SUMA valor .)
    MAYOR_IGUAL     reduce using rule 37 (valor -> SUMA valor .)
    MENOR_IGUAL     reduce using rule 37 (valor -> SUMA valor .)
    IGUAL           reduce using rule 37 (valor -> SUMA valor .)
    PUNTO_Y_COMA    reduce using rule 37 (valor -> SUMA valor .)
    PARENTESIS_CIERRA reduce using rule 37 (valor -> SUMA valor .)
    COMA            reduce using rule 37 (valor -> SUMA valor .)
    LLAVE_CIERRA    reduce using rule 37 (valor -> SUMA valor .)

  ! SUMA            [ shift and go to state 68 ]
  ! RESTA           [ shift and go to state 69 ]
  ! MULTIPLICACION  [ shift and go to state 70 ]
  ! DIVISION        [ shift and go to state 71 ]
  ! CONJUNCION      [ shift and go to state 72 ]
  ! DISYUNCION      [ shift and go to state 73 ]
  ! MAYOR           [ shift and go to state 74 ]
  ! MENOR           [ shift and go to state 75 ]
  ! MAYOR_IGUAL     [ shift and go to state 76 ]
  ! MENOR_IGUAL     [ shift and go to state 77 ]
  ! IGUAL           [ shift and go to state 78 ]


state 81

    (38) valor -> RESTA valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    SUMA            reduce using rule 38 (valor -> RESTA valor .)
    RESTA           reduce using rule 38 (valor -> RESTA valor .)
    MULTIPLICACION  reduce using rule 38 (valor -> RESTA valor .)
    DIVISION        reduce using rule 38 (valor -> RESTA valor .)
    CONJUNCION      reduce using rule 38 (valor -> RESTA valor .)
    DISYUNCION      reduce using rule 38 (valor -> RESTA valor .)
    MAYOR           reduce using rule 38 (valor -> RESTA valor .)
    MENOR           reduce using rule 38 (valor -> RESTA valor .)
    MAYOR_IGUAL     reduce using rule 38 (valor -> RESTA valor .)
    MENOR_IGUAL     reduce using rule 38 (valor -> RESTA valor .)
    IGUAL           reduce using rule 38 (valor -> RESTA valor .)
    PUNTO_Y_COMA    reduce using rule 38 (valor -> RESTA valor .)
    PARENTESIS_CIERRA reduce using rule 38 (valor -> RESTA valor .)
    COMA            reduce using rule 38 (valor -> RESTA valor .)
    LLAVE_CIERRA    reduce using rule 38 (valor -> RESTA valor .)

  ! SUMA            [ shift and go to state 68 ]
  ! RESTA           [ shift and go to state 69 ]
  ! MULTIPLICACION  [ shift and go to state 70 ]
  ! DIVISION        [ shift and go to state 71 ]
  ! CONJUNCION      [ shift and go to state 72 ]
  ! DISYUNCION      [ shift and go to state 73 ]
  ! MAYOR           [ shift and go to state 74 ]
  ! MENOR           [ shift and go to state 75 ]
  ! MAYOR_IGUAL     [ shift and go to state 76 ]
  ! MENOR_IGUAL     [ shift and go to state 77 ]
  ! IGUAL           [ shift and go to state 78 ]


state 82

    (49) ajson_v -> LLAVE_ABRE lista_v . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 113


state 83

    (50) lista_v -> elemento_v .
    (51) lista_v -> elemento_v . COMA
    (52) lista_v -> elemento_v . COMA lista_v

    LLAVE_CIERRA    reduce using rule 50 (lista_v -> elemento_v .)
    COMA            shift and go to state 114


state 84

    (53) elemento_v -> clave_v . DOS_PUNTOS valor

    DOS_PUNTOS      shift and go to state 115


state 85

    (54) clave_v -> CADENA_NO_COMILLAS .

    DOS_PUNTOS      reduce using rule 54 (clave_v -> CADENA_NO_COMILLAS .)


state 86

    (55) clave_v -> CADENA_COMILLAS .

    DOS_PUNTOS      reduce using rule 55 (clave_v -> CADENA_COMILLAS .)


state 87

    (85) function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE . arg PARENTESIS_CIERRA
    (86) arg -> . valor
    (87) arg -> . valor COMA arg
    (88) arg -> . empty
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (3) empty -> .
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    PARENTESIS_CIERRA reduce using rule 3 (empty -> .)
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    arg                            shift and go to state 116
    valor                          shift and go to state 117
    empty                          shift and go to state 118
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 88

    (70) booleana -> NEGACION valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    CONJUNCION      reduce using rule 70 (booleana -> NEGACION valor .)
    DISYUNCION      reduce using rule 70 (booleana -> NEGACION valor .)
    PUNTO_Y_COMA    reduce using rule 70 (booleana -> NEGACION valor .)
    PARENTESIS_CIERRA reduce using rule 70 (booleana -> NEGACION valor .)
    COMA            reduce using rule 70 (booleana -> NEGACION valor .)
    LLAVE_CIERRA    reduce using rule 70 (booleana -> NEGACION valor .)
    SUMA            shift and go to state 68
    RESTA           shift and go to state 69
    MULTIPLICACION  shift and go to state 70
    DIVISION        shift and go to state 71
    MAYOR           shift and go to state 74
    MENOR           shift and go to state 75
    MAYOR_IGUAL     shift and go to state 76
    MENOR_IGUAL     shift and go to state 77
    IGUAL           shift and go to state 78

  ! SUMA            [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! RESTA           [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! MULTIPLICACION  [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! DIVISION        [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! MAYOR           [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! MENOR           [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! MAYOR_IGUAL     [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! MENOR_IGUAL     [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! IGUAL           [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! CONJUNCION      [ shift and go to state 72 ]
  ! DISYUNCION      [ shift and go to state 73 ]


state 89

    (76) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA . LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA . LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 119


state 90

    (78) loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA . LLAVE_ABRE statement LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 120


state 91

    (82) variable_t -> CADENA_NO_COMILLAS . DOS_PUNTOS tipo

    DOS_PUNTOS      shift and go to state 121


state 92

    (83) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t . PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t . PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    PARENTESIS_CIERRA shift and go to state 122


state 93

    (79) id_t -> variable_t .
    (80) id_t -> variable_t . COMA id_t

    PARENTESIS_CIERRA reduce using rule 79 (id_t -> variable_t .)
    COMA            shift and go to state 123


state 94

    (81) id_t -> empty .

    PARENTESIS_CIERRA reduce using rule 81 (id_t -> empty .)


state 95

    (40) ajson -> LLAVE_ABRE lista . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 124


state 96

    (41) lista -> elemento .
    (42) lista -> elemento . COMA
    (43) lista -> elemento . COMA lista

    LLAVE_CIERRA    reduce using rule 41 (lista -> elemento .)
    COMA            shift and go to state 125


state 97

    (44) elemento -> clave . DOS_PUNTOS valor_t

    DOS_PUNTOS      shift and go to state 126


state 98

    (47) clave -> CADENA_COMILLAS .

    DOS_PUNTOS      reduce using rule 47 (clave -> CADENA_COMILLAS .)


state 99

    (48) clave -> CADENA_NO_COMILLAS .

    DOS_PUNTOS      reduce using rule 48 (clave -> CADENA_NO_COMILLAS .)


state 100

    (17) ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO . ident
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident

    CADENA_NO_COMILLAS shift and go to state 13

    ident                          shift and go to state 127

state 101

    (59) aritmetica -> valor SUMA valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    SUMA            reduce using rule 59 (aritmetica -> valor SUMA valor .)
    RESTA           reduce using rule 59 (aritmetica -> valor SUMA valor .)
    CONJUNCION      reduce using rule 59 (aritmetica -> valor SUMA valor .)
    DISYUNCION      reduce using rule 59 (aritmetica -> valor SUMA valor .)
    MAYOR           reduce using rule 59 (aritmetica -> valor SUMA valor .)
    MENOR           reduce using rule 59 (aritmetica -> valor SUMA valor .)
    MAYOR_IGUAL     reduce using rule 59 (aritmetica -> valor SUMA valor .)
    MENOR_IGUAL     reduce using rule 59 (aritmetica -> valor SUMA valor .)
    IGUAL           reduce using rule 59 (aritmetica -> valor SUMA valor .)
    PUNTO_Y_COMA    reduce using rule 59 (aritmetica -> valor SUMA valor .)
    PARENTESIS_CIERRA reduce using rule 59 (aritmetica -> valor SUMA valor .)
    COMA            reduce using rule 59 (aritmetica -> valor SUMA valor .)
    LLAVE_CIERRA    reduce using rule 59 (aritmetica -> valor SUMA valor .)
    MULTIPLICACION  shift and go to state 70
    DIVISION        shift and go to state 71

  ! MULTIPLICACION  [ reduce using rule 59 (aritmetica -> valor SUMA valor .) ]
  ! DIVISION        [ reduce using rule 59 (aritmetica -> valor SUMA valor .) ]
  ! SUMA            [ shift and go to state 68 ]
  ! RESTA           [ shift and go to state 69 ]
  ! CONJUNCION      [ shift and go to state 72 ]
  ! DISYUNCION      [ shift and go to state 73 ]
  ! MAYOR           [ shift and go to state 74 ]
  ! MENOR           [ shift and go to state 75 ]
  ! MAYOR_IGUAL     [ shift and go to state 76 ]
  ! MENOR_IGUAL     [ shift and go to state 77 ]
  ! IGUAL           [ shift and go to state 78 ]


state 102

    (60) aritmetica -> valor RESTA valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    SUMA            reduce using rule 60 (aritmetica -> valor RESTA valor .)
    RESTA           reduce using rule 60 (aritmetica -> valor RESTA valor .)
    CONJUNCION      reduce using rule 60 (aritmetica -> valor RESTA valor .)
    DISYUNCION      reduce using rule 60 (aritmetica -> valor RESTA valor .)
    MAYOR           reduce using rule 60 (aritmetica -> valor RESTA valor .)
    MENOR           reduce using rule 60 (aritmetica -> valor RESTA valor .)
    MAYOR_IGUAL     reduce using rule 60 (aritmetica -> valor RESTA valor .)
    MENOR_IGUAL     reduce using rule 60 (aritmetica -> valor RESTA valor .)
    IGUAL           reduce using rule 60 (aritmetica -> valor RESTA valor .)
    PUNTO_Y_COMA    reduce using rule 60 (aritmetica -> valor RESTA valor .)
    PARENTESIS_CIERRA reduce using rule 60 (aritmetica -> valor RESTA valor .)
    COMA            reduce using rule 60 (aritmetica -> valor RESTA valor .)
    LLAVE_CIERRA    reduce using rule 60 (aritmetica -> valor RESTA valor .)
    MULTIPLICACION  shift and go to state 70
    DIVISION        shift and go to state 71

  ! MULTIPLICACION  [ reduce using rule 60 (aritmetica -> valor RESTA valor .) ]
  ! DIVISION        [ reduce using rule 60 (aritmetica -> valor RESTA valor .) ]
  ! SUMA            [ shift and go to state 68 ]
  ! RESTA           [ shift and go to state 69 ]
  ! CONJUNCION      [ shift and go to state 72 ]
  ! DISYUNCION      [ shift and go to state 73 ]
  ! MAYOR           [ shift and go to state 74 ]
  ! MENOR           [ shift and go to state 75 ]
  ! MAYOR_IGUAL     [ shift and go to state 76 ]
  ! MENOR_IGUAL     [ shift and go to state 77 ]
  ! IGUAL           [ shift and go to state 78 ]


state 103

    (61) aritmetica -> valor MULTIPLICACION valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    SUMA            reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    RESTA           reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    MULTIPLICACION  reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    DIVISION        reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    CONJUNCION      reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    DISYUNCION      reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    MAYOR           reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    MENOR           reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    MAYOR_IGUAL     reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    MENOR_IGUAL     reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    IGUAL           reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    PUNTO_Y_COMA    reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    PARENTESIS_CIERRA reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    COMA            reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    LLAVE_CIERRA    reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)

  ! SUMA            [ shift and go to state 68 ]
  ! RESTA           [ shift and go to state 69 ]
  ! MULTIPLICACION  [ shift and go to state 70 ]
  ! DIVISION        [ shift and go to state 71 ]
  ! CONJUNCION      [ shift and go to state 72 ]
  ! DISYUNCION      [ shift and go to state 73 ]
  ! MAYOR           [ shift and go to state 74 ]
  ! MENOR           [ shift and go to state 75 ]
  ! MAYOR_IGUAL     [ shift and go to state 76 ]
  ! MENOR_IGUAL     [ shift and go to state 77 ]
  ! IGUAL           [ shift and go to state 78 ]


state 104

    (62) aritmetica -> valor DIVISION valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    SUMA            reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    RESTA           reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    MULTIPLICACION  reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    DIVISION        reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    CONJUNCION      reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    DISYUNCION      reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    MAYOR           reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    MENOR           reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    MAYOR_IGUAL     reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    MENOR_IGUAL     reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    IGUAL           reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    PUNTO_Y_COMA    reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    PARENTESIS_CIERRA reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    COMA            reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    LLAVE_CIERRA    reduce using rule 62 (aritmetica -> valor DIVISION valor .)

  ! SUMA            [ shift and go to state 68 ]
  ! RESTA           [ shift and go to state 69 ]
  ! MULTIPLICACION  [ shift and go to state 70 ]
  ! DIVISION        [ shift and go to state 71 ]
  ! CONJUNCION      [ shift and go to state 72 ]
  ! DISYUNCION      [ shift and go to state 73 ]
  ! MAYOR           [ shift and go to state 74 ]
  ! MENOR           [ shift and go to state 75 ]
  ! MAYOR_IGUAL     [ shift and go to state 76 ]
  ! MENOR_IGUAL     [ shift and go to state 77 ]
  ! IGUAL           [ shift and go to state 78 ]


state 105

    (68) booleana -> valor CONJUNCION valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    CONJUNCION      reduce using rule 68 (booleana -> valor CONJUNCION valor .)
    DISYUNCION      reduce using rule 68 (booleana -> valor CONJUNCION valor .)
    PUNTO_Y_COMA    reduce using rule 68 (booleana -> valor CONJUNCION valor .)
    PARENTESIS_CIERRA reduce using rule 68 (booleana -> valor CONJUNCION valor .)
    COMA            reduce using rule 68 (booleana -> valor CONJUNCION valor .)
    LLAVE_CIERRA    reduce using rule 68 (booleana -> valor CONJUNCION valor .)
    SUMA            shift and go to state 68
    RESTA           shift and go to state 69
    MULTIPLICACION  shift and go to state 70
    DIVISION        shift and go to state 71
    MAYOR           shift and go to state 74
    MENOR           shift and go to state 75
    MAYOR_IGUAL     shift and go to state 76
    MENOR_IGUAL     shift and go to state 77
    IGUAL           shift and go to state 78

  ! SUMA            [ reduce using rule 68 (booleana -> valor CONJUNCION valor .) ]
  ! RESTA           [ reduce using rule 68 (booleana -> valor CONJUNCION valor .) ]
  ! MULTIPLICACION  [ reduce using rule 68 (booleana -> valor CONJUNCION valor .) ]
  ! DIVISION        [ reduce using rule 68 (booleana -> valor CONJUNCION valor .) ]
  ! MAYOR           [ reduce using rule 68 (booleana -> valor CONJUNCION valor .) ]
  ! MENOR           [ reduce using rule 68 (booleana -> valor CONJUNCION valor .) ]
  ! MAYOR_IGUAL     [ reduce using rule 68 (booleana -> valor CONJUNCION valor .) ]
  ! MENOR_IGUAL     [ reduce using rule 68 (booleana -> valor CONJUNCION valor .) ]
  ! IGUAL           [ reduce using rule 68 (booleana -> valor CONJUNCION valor .) ]
  ! CONJUNCION      [ shift and go to state 72 ]
  ! DISYUNCION      [ shift and go to state 73 ]


state 106

    (69) booleana -> valor DISYUNCION valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    CONJUNCION      reduce using rule 69 (booleana -> valor DISYUNCION valor .)
    DISYUNCION      reduce using rule 69 (booleana -> valor DISYUNCION valor .)
    PUNTO_Y_COMA    reduce using rule 69 (booleana -> valor DISYUNCION valor .)
    PARENTESIS_CIERRA reduce using rule 69 (booleana -> valor DISYUNCION valor .)
    COMA            reduce using rule 69 (booleana -> valor DISYUNCION valor .)
    LLAVE_CIERRA    reduce using rule 69 (booleana -> valor DISYUNCION valor .)
    SUMA            shift and go to state 68
    RESTA           shift and go to state 69
    MULTIPLICACION  shift and go to state 70
    DIVISION        shift and go to state 71
    MAYOR           shift and go to state 74
    MENOR           shift and go to state 75
    MAYOR_IGUAL     shift and go to state 76
    MENOR_IGUAL     shift and go to state 77
    IGUAL           shift and go to state 78

  ! SUMA            [ reduce using rule 69 (booleana -> valor DISYUNCION valor .) ]
  ! RESTA           [ reduce using rule 69 (booleana -> valor DISYUNCION valor .) ]
  ! MULTIPLICACION  [ reduce using rule 69 (booleana -> valor DISYUNCION valor .) ]
  ! DIVISION        [ reduce using rule 69 (booleana -> valor DISYUNCION valor .) ]
  ! MAYOR           [ reduce using rule 69 (booleana -> valor DISYUNCION valor .) ]
  ! MENOR           [ reduce using rule 69 (booleana -> valor DISYUNCION valor .) ]
  ! MAYOR_IGUAL     [ reduce using rule 69 (booleana -> valor DISYUNCION valor .) ]
  ! MENOR_IGUAL     [ reduce using rule 69 (booleana -> valor DISYUNCION valor .) ]
  ! IGUAL           [ reduce using rule 69 (booleana -> valor DISYUNCION valor .) ]
  ! CONJUNCION      [ shift and go to state 72 ]
  ! DISYUNCION      [ shift and go to state 73 ]


state 107

    (63) comparacion -> valor MAYOR valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    CONJUNCION      reduce using rule 63 (comparacion -> valor MAYOR valor .)
    DISYUNCION      reduce using rule 63 (comparacion -> valor MAYOR valor .)
    MAYOR           reduce using rule 63 (comparacion -> valor MAYOR valor .)
    MENOR           reduce using rule 63 (comparacion -> valor MAYOR valor .)
    MAYOR_IGUAL     reduce using rule 63 (comparacion -> valor MAYOR valor .)
    MENOR_IGUAL     reduce using rule 63 (comparacion -> valor MAYOR valor .)
    IGUAL           reduce using rule 63 (comparacion -> valor MAYOR valor .)
    PUNTO_Y_COMA    reduce using rule 63 (comparacion -> valor MAYOR valor .)
    PARENTESIS_CIERRA reduce using rule 63 (comparacion -> valor MAYOR valor .)
    COMA            reduce using rule 63 (comparacion -> valor MAYOR valor .)
    LLAVE_CIERRA    reduce using rule 63 (comparacion -> valor MAYOR valor .)
    SUMA            shift and go to state 68
    RESTA           shift and go to state 69
    MULTIPLICACION  shift and go to state 70
    DIVISION        shift and go to state 71

  ! SUMA            [ reduce using rule 63 (comparacion -> valor MAYOR valor .) ]
  ! RESTA           [ reduce using rule 63 (comparacion -> valor MAYOR valor .) ]
  ! MULTIPLICACION  [ reduce using rule 63 (comparacion -> valor MAYOR valor .) ]
  ! DIVISION        [ reduce using rule 63 (comparacion -> valor MAYOR valor .) ]
  ! CONJUNCION      [ shift and go to state 72 ]
  ! DISYUNCION      [ shift and go to state 73 ]
  ! MAYOR           [ shift and go to state 74 ]
  ! MENOR           [ shift and go to state 75 ]
  ! MAYOR_IGUAL     [ shift and go to state 76 ]
  ! MENOR_IGUAL     [ shift and go to state 77 ]
  ! IGUAL           [ shift and go to state 78 ]


state 108

    (64) comparacion -> valor MENOR valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    CONJUNCION      reduce using rule 64 (comparacion -> valor MENOR valor .)
    DISYUNCION      reduce using rule 64 (comparacion -> valor MENOR valor .)
    MAYOR           reduce using rule 64 (comparacion -> valor MENOR valor .)
    MENOR           reduce using rule 64 (comparacion -> valor MENOR valor .)
    MAYOR_IGUAL     reduce using rule 64 (comparacion -> valor MENOR valor .)
    MENOR_IGUAL     reduce using rule 64 (comparacion -> valor MENOR valor .)
    IGUAL           reduce using rule 64 (comparacion -> valor MENOR valor .)
    PUNTO_Y_COMA    reduce using rule 64 (comparacion -> valor MENOR valor .)
    PARENTESIS_CIERRA reduce using rule 64 (comparacion -> valor MENOR valor .)
    COMA            reduce using rule 64 (comparacion -> valor MENOR valor .)
    LLAVE_CIERRA    reduce using rule 64 (comparacion -> valor MENOR valor .)
    SUMA            shift and go to state 68
    RESTA           shift and go to state 69
    MULTIPLICACION  shift and go to state 70
    DIVISION        shift and go to state 71

  ! SUMA            [ reduce using rule 64 (comparacion -> valor MENOR valor .) ]
  ! RESTA           [ reduce using rule 64 (comparacion -> valor MENOR valor .) ]
  ! MULTIPLICACION  [ reduce using rule 64 (comparacion -> valor MENOR valor .) ]
  ! DIVISION        [ reduce using rule 64 (comparacion -> valor MENOR valor .) ]
  ! CONJUNCION      [ shift and go to state 72 ]
  ! DISYUNCION      [ shift and go to state 73 ]
  ! MAYOR           [ shift and go to state 74 ]
  ! MENOR           [ shift and go to state 75 ]
  ! MAYOR_IGUAL     [ shift and go to state 76 ]
  ! MENOR_IGUAL     [ shift and go to state 77 ]
  ! IGUAL           [ shift and go to state 78 ]


state 109

    (65) comparacion -> valor MAYOR_IGUAL valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    CONJUNCION      reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    DISYUNCION      reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    MAYOR           reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    MENOR           reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    MAYOR_IGUAL     reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    MENOR_IGUAL     reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    IGUAL           reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    PUNTO_Y_COMA    reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    PARENTESIS_CIERRA reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    COMA            reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    LLAVE_CIERRA    reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    SUMA            shift and go to state 68
    RESTA           shift and go to state 69
    MULTIPLICACION  shift and go to state 70
    DIVISION        shift and go to state 71

  ! SUMA            [ reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .) ]
  ! RESTA           [ reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .) ]
  ! MULTIPLICACION  [ reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .) ]
  ! DIVISION        [ reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .) ]
  ! CONJUNCION      [ shift and go to state 72 ]
  ! DISYUNCION      [ shift and go to state 73 ]
  ! MAYOR           [ shift and go to state 74 ]
  ! MENOR           [ shift and go to state 75 ]
  ! MAYOR_IGUAL     [ shift and go to state 76 ]
  ! MENOR_IGUAL     [ shift and go to state 77 ]
  ! IGUAL           [ shift and go to state 78 ]


state 110

    (66) comparacion -> valor MENOR_IGUAL valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    CONJUNCION      reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    DISYUNCION      reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    MAYOR           reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    MENOR           reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    MAYOR_IGUAL     reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    MENOR_IGUAL     reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    IGUAL           reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    PUNTO_Y_COMA    reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    PARENTESIS_CIERRA reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    COMA            reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    LLAVE_CIERRA    reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    SUMA            shift and go to state 68
    RESTA           shift and go to state 69
    MULTIPLICACION  shift and go to state 70
    DIVISION        shift and go to state 71

  ! SUMA            [ reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .) ]
  ! RESTA           [ reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .) ]
  ! MULTIPLICACION  [ reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .) ]
  ! DIVISION        [ reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .) ]
  ! CONJUNCION      [ shift and go to state 72 ]
  ! DISYUNCION      [ shift and go to state 73 ]
  ! MAYOR           [ shift and go to state 74 ]
  ! MENOR           [ shift and go to state 75 ]
  ! MAYOR_IGUAL     [ shift and go to state 76 ]
  ! MENOR_IGUAL     [ shift and go to state 77 ]
  ! IGUAL           [ shift and go to state 78 ]


state 111

    (67) comparacion -> valor IGUAL valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    CONJUNCION      reduce using rule 67 (comparacion -> valor IGUAL valor .)
    DISYUNCION      reduce using rule 67 (comparacion -> valor IGUAL valor .)
    IGUAL           reduce using rule 67 (comparacion -> valor IGUAL valor .)
    PUNTO_Y_COMA    reduce using rule 67 (comparacion -> valor IGUAL valor .)
    PARENTESIS_CIERRA reduce using rule 67 (comparacion -> valor IGUAL valor .)
    COMA            reduce using rule 67 (comparacion -> valor IGUAL valor .)
    LLAVE_CIERRA    reduce using rule 67 (comparacion -> valor IGUAL valor .)
    SUMA            shift and go to state 68
    RESTA           shift and go to state 69
    MULTIPLICACION  shift and go to state 70
    DIVISION        shift and go to state 71
    MAYOR           shift and go to state 74
    MENOR           shift and go to state 75
    MAYOR_IGUAL     shift and go to state 76
    MENOR_IGUAL     shift and go to state 77

  ! SUMA            [ reduce using rule 67 (comparacion -> valor IGUAL valor .) ]
  ! RESTA           [ reduce using rule 67 (comparacion -> valor IGUAL valor .) ]
  ! MULTIPLICACION  [ reduce using rule 67 (comparacion -> valor IGUAL valor .) ]
  ! DIVISION        [ reduce using rule 67 (comparacion -> valor IGUAL valor .) ]
  ! MAYOR           [ reduce using rule 67 (comparacion -> valor IGUAL valor .) ]
  ! MENOR           [ reduce using rule 67 (comparacion -> valor IGUAL valor .) ]
  ! MAYOR_IGUAL     [ reduce using rule 67 (comparacion -> valor IGUAL valor .) ]
  ! MENOR_IGUAL     [ reduce using rule 67 (comparacion -> valor IGUAL valor .) ]
  ! CONJUNCION      [ shift and go to state 72 ]
  ! DISYUNCION      [ shift and go to state 73 ]
  ! IGUAL           [ shift and go to state 78 ]


state 112

    (36) valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .

    SUMA            reduce using rule 36 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    RESTA           reduce using rule 36 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    MULTIPLICACION  reduce using rule 36 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    DIVISION        reduce using rule 36 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    CONJUNCION      reduce using rule 36 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    DISYUNCION      reduce using rule 36 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    MAYOR           reduce using rule 36 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    MENOR           reduce using rule 36 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    MAYOR_IGUAL     reduce using rule 36 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    MENOR_IGUAL     reduce using rule 36 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    IGUAL           reduce using rule 36 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    PUNTO_Y_COMA    reduce using rule 36 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 36 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    COMA            reduce using rule 36 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    LLAVE_CIERRA    reduce using rule 36 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)


state 113

    (49) ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .

    SUMA            reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    RESTA           reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    MULTIPLICACION  reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    DIVISION        reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    CONJUNCION      reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    DISYUNCION      reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    MAYOR           reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    MENOR           reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    MAYOR_IGUAL     reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    MENOR_IGUAL     reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    IGUAL           reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    PUNTO_Y_COMA    reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    COMA            reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)


state 114

    (51) lista_v -> elemento_v COMA .
    (52) lista_v -> elemento_v COMA . lista_v
    (50) lista_v -> . elemento_v
    (51) lista_v -> . elemento_v COMA
    (52) lista_v -> . elemento_v COMA lista_v
    (53) elemento_v -> . clave_v DOS_PUNTOS valor
    (54) clave_v -> . CADENA_NO_COMILLAS
    (55) clave_v -> . CADENA_COMILLAS

    LLAVE_CIERRA    reduce using rule 51 (lista_v -> elemento_v COMA .)
    CADENA_NO_COMILLAS shift and go to state 85
    CADENA_COMILLAS shift and go to state 86

    elemento_v                     shift and go to state 83
    lista_v                        shift and go to state 128
    clave_v                        shift and go to state 84

state 115

    (53) elemento_v -> clave_v DOS_PUNTOS . valor
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 129
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 116

    (85) function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg . PARENTESIS_CIERRA

    PARENTESIS_CIERRA shift and go to state 130


state 117

    (86) arg -> valor .
    (87) arg -> valor . COMA arg
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    PARENTESIS_CIERRA reduce using rule 86 (arg -> valor .)
    COMA            shift and go to state 131
    SUMA            shift and go to state 68
    RESTA           shift and go to state 69
    MULTIPLICACION  shift and go to state 70
    DIVISION        shift and go to state 71
    CONJUNCION      shift and go to state 72
    DISYUNCION      shift and go to state 73
    MAYOR           shift and go to state 74
    MENOR           shift and go to state 75
    MAYOR_IGUAL     shift and go to state 76
    MENOR_IGUAL     shift and go to state 77
    IGUAL           shift and go to state 78


state 118

    (88) arg -> empty .

    PARENTESIS_CIERRA reduce using rule 88 (arg -> empty .)


state 119

    (76) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE . statement LLAVE_CIERRA
    (77) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE . statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (39) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (18) declare -> . LET id asign_valor
    (25) assign -> . ident asign_valor
    (76) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (78) loop -> . WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (83) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident

    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    statement                      shift and go to state 132
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    ident                          shift and go to state 15

state 120

    (78) loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE . statement LLAVE_CIERRA
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (39) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (18) declare -> . LET id asign_valor
    (25) assign -> . ident asign_valor
    (76) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (78) loop -> . WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (83) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident

    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    statement                      shift and go to state 133
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    ident                          shift and go to state 15

state 121

    (82) variable_t -> CADENA_NO_COMILLAS DOS_PUNTOS . tipo
    (71) tipo -> . INT
    (72) tipo -> . FLOAT
    (73) tipo -> . CHARACTER
    (74) tipo -> . BOOLEAN
    (75) tipo -> . CADENA_NO_COMILLAS

    INT             shift and go to state 136
    FLOAT           shift and go to state 137
    CHARACTER       shift and go to state 138
    BOOLEAN         shift and go to state 139
    CADENA_NO_COMILLAS shift and go to state 134

    tipo                           shift and go to state 135

state 122

    (83) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA . DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA . DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    DOS_PUNTOS      shift and go to state 140


state 123

    (80) id_t -> variable_t COMA . id_t
    (79) id_t -> . variable_t
    (80) id_t -> . variable_t COMA id_t
    (81) id_t -> . empty
    (82) variable_t -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (3) empty -> .

    CADENA_NO_COMILLAS shift and go to state 91
    PARENTESIS_CIERRA reduce using rule 3 (empty -> .)

    variable_t                     shift and go to state 93
    id_t                           shift and go to state 141
    empty                          shift and go to state 94

state 124

    (40) ajson -> LLAVE_ABRE lista LLAVE_CIERRA .

    PUNTO_Y_COMA    reduce using rule 40 (ajson -> LLAVE_ABRE lista LLAVE_CIERRA .)
    COMA            reduce using rule 40 (ajson -> LLAVE_ABRE lista LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 40 (ajson -> LLAVE_ABRE lista LLAVE_CIERRA .)


state 125

    (42) lista -> elemento COMA .
    (43) lista -> elemento COMA . lista
    (41) lista -> . elemento
    (42) lista -> . elemento COMA
    (43) lista -> . elemento COMA lista
    (44) elemento -> . clave DOS_PUNTOS valor_t
    (47) clave -> . CADENA_COMILLAS
    (48) clave -> . CADENA_NO_COMILLAS

    LLAVE_CIERRA    reduce using rule 42 (lista -> elemento COMA .)
    CADENA_COMILLAS shift and go to state 98
    CADENA_NO_COMILLAS shift and go to state 99

    elemento                       shift and go to state 96
    lista                          shift and go to state 142
    clave                          shift and go to state 97

state 126

    (44) elemento -> clave DOS_PUNTOS . valor_t
    (45) valor_t -> . tipo
    (46) valor_t -> . ajson
    (71) tipo -> . INT
    (72) tipo -> . FLOAT
    (73) tipo -> . CHARACTER
    (74) tipo -> . BOOLEAN
    (75) tipo -> . CADENA_NO_COMILLAS
    (40) ajson -> . LLAVE_ABRE lista LLAVE_CIERRA

    INT             shift and go to state 136
    FLOAT           shift and go to state 137
    CHARACTER       shift and go to state 138
    BOOLEAN         shift and go to state 139
    CADENA_NO_COMILLAS shift and go to state 134
    LLAVE_ABRE      shift and go to state 64

    valor_t                        shift and go to state 143
    tipo                           shift and go to state 144
    ajson                          shift and go to state 145

state 127

    (17) ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .

    ASIGNACION      reduce using rule 17 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    PUNTO_Y_COMA    reduce using rule 17 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    DOS_PUNTOS      reduce using rule 17 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    COMA            reduce using rule 17 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    SUMA            reduce using rule 17 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    RESTA           reduce using rule 17 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    MULTIPLICACION  reduce using rule 17 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    DIVISION        reduce using rule 17 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    CONJUNCION      reduce using rule 17 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    DISYUNCION      reduce using rule 17 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    MAYOR           reduce using rule 17 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    MENOR           reduce using rule 17 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    MAYOR_IGUAL     reduce using rule 17 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    MENOR_IGUAL     reduce using rule 17 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    IGUAL           reduce using rule 17 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    PARENTESIS_CIERRA reduce using rule 17 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    LLAVE_CIERRA    reduce using rule 17 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)


state 128

    (52) lista_v -> elemento_v COMA lista_v .

    LLAVE_CIERRA    reduce using rule 52 (lista_v -> elemento_v COMA lista_v .)


state 129

    (53) elemento_v -> clave_v DOS_PUNTOS valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    COMA            reduce using rule 53 (elemento_v -> clave_v DOS_PUNTOS valor .)
    LLAVE_CIERRA    reduce using rule 53 (elemento_v -> clave_v DOS_PUNTOS valor .)
    SUMA            shift and go to state 68
    RESTA           shift and go to state 69
    MULTIPLICACION  shift and go to state 70
    DIVISION        shift and go to state 71
    CONJUNCION      shift and go to state 72
    DISYUNCION      shift and go to state 73
    MAYOR           shift and go to state 74
    MENOR           shift and go to state 75
    MAYOR_IGUAL     shift and go to state 76
    MENOR_IGUAL     shift and go to state 77
    IGUAL           shift and go to state 78


state 130

    (85) function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .

    SUMA            reduce using rule 85 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    RESTA           reduce using rule 85 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    MULTIPLICACION  reduce using rule 85 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    DIVISION        reduce using rule 85 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    CONJUNCION      reduce using rule 85 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    DISYUNCION      reduce using rule 85 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    MAYOR           reduce using rule 85 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    MENOR           reduce using rule 85 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    MAYOR_IGUAL     reduce using rule 85 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    MENOR_IGUAL     reduce using rule 85 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    IGUAL           reduce using rule 85 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    PUNTO_Y_COMA    reduce using rule 85 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 85 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    COMA            reduce using rule 85 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    LLAVE_CIERRA    reduce using rule 85 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)


state 131

    (87) arg -> valor COMA . arg
    (86) arg -> . valor
    (87) arg -> . valor COMA arg
    (88) arg -> . empty
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (3) empty -> .
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    PARENTESIS_CIERRA reduce using rule 3 (empty -> .)
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 117
    arg                            shift and go to state 146
    empty                          shift and go to state 118
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 132

    (76) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement . LLAVE_CIERRA
    (77) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement . LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 147


state 133

    (78) loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 148


state 134

    (75) tipo -> CADENA_NO_COMILLAS .

    COMA            reduce using rule 75 (tipo -> CADENA_NO_COMILLAS .)
    PARENTESIS_CIERRA reduce using rule 75 (tipo -> CADENA_NO_COMILLAS .)
    LLAVE_CIERRA    reduce using rule 75 (tipo -> CADENA_NO_COMILLAS .)
    LLAVE_ABRE      reduce using rule 75 (tipo -> CADENA_NO_COMILLAS .)


state 135

    (82) variable_t -> CADENA_NO_COMILLAS DOS_PUNTOS tipo .

    COMA            reduce using rule 82 (variable_t -> CADENA_NO_COMILLAS DOS_PUNTOS tipo .)
    PARENTESIS_CIERRA reduce using rule 82 (variable_t -> CADENA_NO_COMILLAS DOS_PUNTOS tipo .)


state 136

    (71) tipo -> INT .

    COMA            reduce using rule 71 (tipo -> INT .)
    PARENTESIS_CIERRA reduce using rule 71 (tipo -> INT .)
    LLAVE_CIERRA    reduce using rule 71 (tipo -> INT .)
    LLAVE_ABRE      reduce using rule 71 (tipo -> INT .)


state 137

    (72) tipo -> FLOAT .

    COMA            reduce using rule 72 (tipo -> FLOAT .)
    PARENTESIS_CIERRA reduce using rule 72 (tipo -> FLOAT .)
    LLAVE_CIERRA    reduce using rule 72 (tipo -> FLOAT .)
    LLAVE_ABRE      reduce using rule 72 (tipo -> FLOAT .)


state 138

    (73) tipo -> CHARACTER .

    COMA            reduce using rule 73 (tipo -> CHARACTER .)
    PARENTESIS_CIERRA reduce using rule 73 (tipo -> CHARACTER .)
    LLAVE_CIERRA    reduce using rule 73 (tipo -> CHARACTER .)
    LLAVE_ABRE      reduce using rule 73 (tipo -> CHARACTER .)


state 139

    (74) tipo -> BOOLEAN .

    COMA            reduce using rule 74 (tipo -> BOOLEAN .)
    PARENTESIS_CIERRA reduce using rule 74 (tipo -> BOOLEAN .)
    LLAVE_CIERRA    reduce using rule 74 (tipo -> BOOLEAN .)
    LLAVE_ABRE      reduce using rule 74 (tipo -> BOOLEAN .)


state 140

    (83) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS . tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS . tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (71) tipo -> . INT
    (72) tipo -> . FLOAT
    (73) tipo -> . CHARACTER
    (74) tipo -> . BOOLEAN
    (75) tipo -> . CADENA_NO_COMILLAS

    INT             shift and go to state 136
    FLOAT           shift and go to state 137
    CHARACTER       shift and go to state 138
    BOOLEAN         shift and go to state 139
    CADENA_NO_COMILLAS shift and go to state 134

    tipo                           shift and go to state 149

state 141

    (80) id_t -> variable_t COMA id_t .

    PARENTESIS_CIERRA reduce using rule 80 (id_t -> variable_t COMA id_t .)


state 142

    (43) lista -> elemento COMA lista .

    LLAVE_CIERRA    reduce using rule 43 (lista -> elemento COMA lista .)


state 143

    (44) elemento -> clave DOS_PUNTOS valor_t .

    COMA            reduce using rule 44 (elemento -> clave DOS_PUNTOS valor_t .)
    LLAVE_CIERRA    reduce using rule 44 (elemento -> clave DOS_PUNTOS valor_t .)


state 144

    (45) valor_t -> tipo .

    COMA            reduce using rule 45 (valor_t -> tipo .)
    LLAVE_CIERRA    reduce using rule 45 (valor_t -> tipo .)


state 145

    (46) valor_t -> ajson .

    COMA            reduce using rule 46 (valor_t -> ajson .)
    LLAVE_CIERRA    reduce using rule 46 (valor_t -> ajson .)


state 146

    (87) arg -> valor COMA arg .

    PARENTESIS_CIERRA reduce using rule 87 (arg -> valor COMA arg .)


state 147

    (76) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .
    (77) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA . ELSE LLAVE_ABRE statement LLAVE_CIERRA

    TYPE            reduce using rule 76 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    LET             reduce using rule 76 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    IF              reduce using rule 76 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    WHILE           reduce using rule 76 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    FUNCTION        reduce using rule 76 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 76 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    $end            reduce using rule 76 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 76 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    RETURN          reduce using rule 76 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    ELSE            shift and go to state 150


state 148

    (78) loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .

    TYPE            reduce using rule 78 (loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    LET             reduce using rule 78 (loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    IF              reduce using rule 78 (loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    WHILE           reduce using rule 78 (loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    FUNCTION        reduce using rule 78 (loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 78 (loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    $end            reduce using rule 78 (loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 78 (loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    RETURN          reduce using rule 78 (loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)


state 149

    (83) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo . LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo . LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 151


state 150

    (77) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE . LLAVE_ABRE statement LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 152


state 151

    (83) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE . statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE . RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (39) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (18) declare -> . LET id asign_valor
    (25) assign -> . ident asign_valor
    (76) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (78) loop -> . WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (83) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident

    RETURN          shift and go to state 154
    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    statement                      shift and go to state 153
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    ident                          shift and go to state 15

state 152

    (77) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE . statement LLAVE_CIERRA
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (39) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (18) declare -> . LET id asign_valor
    (25) assign -> . ident asign_valor
    (76) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (78) loop -> . WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (83) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (84) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident

    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    statement                      shift and go to state 155
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    ident                          shift and go to state 15

state 153

    (83) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement . RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    RETURN          shift and go to state 156


state 154

    (84) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN . valor PUNTO_Y_COMA LLAVE_CIERRA
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 157
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 155

    (77) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 158


state 156

    (83) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN . valor PUNTO_Y_COMA LLAVE_CIERRA
    (26) valor -> . operacion
    (27) valor -> . ajson_v
    (28) valor -> . function_call
    (29) valor -> . ident
    (30) valor -> . ENTERO
    (31) valor -> . DECIMAL
    (32) valor -> . TR
    (33) valor -> . FL
    (34) valor -> . NULL
    (35) valor -> . CARACTER
    (36) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (37) valor -> . SUMA valor
    (38) valor -> . RESTA valor
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (85) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (14) ident -> . CADENA_NO_COMILLAS
    (15) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (16) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (17) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    ENTERO          shift and go to state 45
    DECIMAL         shift and go to state 46
    TR              shift and go to state 47
    FL              shift and go to state 48
    NULL            shift and go to state 49
    CARACTER        shift and go to state 50
    PARENTESIS_ABRE shift and go to state 51
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    LLAVE_ABRE      shift and go to state 57
    CADENA_NO_COMILLAS shift and go to state 58
    NEGACION        shift and go to state 59

    valor                          shift and go to state 159
    operacion                      shift and go to state 41
    ajson_v                        shift and go to state 42
    function_call                  shift and go to state 43
    ident                          shift and go to state 44
    aritmetica                     shift and go to state 54
    booleana                       shift and go to state 55
    comparacion                    shift and go to state 56

state 157

    (84) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor . PUNTO_Y_COMA LLAVE_CIERRA
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    PUNTO_Y_COMA    shift and go to state 160
    SUMA            shift and go to state 68
    RESTA           shift and go to state 69
    MULTIPLICACION  shift and go to state 70
    DIVISION        shift and go to state 71
    CONJUNCION      shift and go to state 72
    DISYUNCION      shift and go to state 73
    MAYOR           shift and go to state 74
    MENOR           shift and go to state 75
    MAYOR_IGUAL     shift and go to state 76
    MENOR_IGUAL     shift and go to state 77
    IGUAL           shift and go to state 78


state 158

    (77) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .

    TYPE            reduce using rule 77 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    LET             reduce using rule 77 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    IF              reduce using rule 77 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    WHILE           reduce using rule 77 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    FUNCTION        reduce using rule 77 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 77 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    $end            reduce using rule 77 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 77 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    RETURN          reduce using rule 77 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)


state 159

    (83) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor . PUNTO_Y_COMA LLAVE_CIERRA
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    PUNTO_Y_COMA    shift and go to state 161
    SUMA            shift and go to state 68
    RESTA           shift and go to state 69
    MULTIPLICACION  shift and go to state 70
    DIVISION        shift and go to state 71
    CONJUNCION      shift and go to state 72
    DISYUNCION      shift and go to state 73
    MAYOR           shift and go to state 74
    MENOR           shift and go to state 75
    MAYOR_IGUAL     shift and go to state 76
    MENOR_IGUAL     shift and go to state 77
    IGUAL           shift and go to state 78


state 160

    (84) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 162


state 161

    (83) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 163


state 162

    (84) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .

    TYPE            reduce using rule 84 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LET             reduce using rule 84 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    IF              reduce using rule 84 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    WHILE           reduce using rule 84 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    FUNCTION        reduce using rule 84 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 84 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    $end            reduce using rule 84 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 84 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    RETURN          reduce using rule 84 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)


state 163

    (83) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .

    TYPE            reduce using rule 83 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LET             reduce using rule 83 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    IF              reduce using rule 83 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    WHILE           reduce using rule 83 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    FUNCTION        reduce using rule 83 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 83 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    $end            reduce using rule 83 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 83 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    RETURN          reduce using rule 83 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id_t PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)

