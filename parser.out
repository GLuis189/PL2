Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMENTARIO_BLOQUE
    COMENTARIO_LINEA
    CORCHETE_ABRE
    CORCHETE_CIERRA
    PUNTO

Grammar

Rule 0     S' -> programa
Rule 1     programa -> statement
Rule 2     programa -> empty
Rule 3     empty -> <empty>
Rule 4     statement -> content PUNTO_Y_COMA
Rule 5     statement -> content PUNTO_Y_COMA statement
Rule 6     statement -> no_semicolon
Rule 7     statement -> no_semicolon statement
Rule 8     content -> define
Rule 9     content -> declare
Rule 10    content -> assign
Rule 11    no_semicolon -> condition
Rule 12    no_semicolon -> loop
Rule 13    no_semicolon -> function_def
Rule 14    bool -> TR
Rule 15    bool -> FL
Rule 16    num -> ENTERO
Rule 17    num -> DECIMAL
Rule 18    declare -> LET id
Rule 19    id -> variable
Rule 20    id -> variable COMA id
Rule 21    id -> variable ASIGNACION valor
Rule 22    id -> variable ASIGNACION valor COMA id
Rule 23    variable -> CADENA_NO_COMILLAS DOS_PUNTOS tipo
Rule 24    variable -> CADENA_NO_COMILLAS
Rule 25    assign -> variable ASIGNACION valor
Rule 26    valor -> CADENA_COMILLAS
Rule 27    valor -> num
Rule 28    valor -> operacion
Rule 29    valor -> bool
Rule 30    valor -> NULL
Rule 31    valor -> ajson_v
Rule 32    valor -> CARACTER
Rule 33    valor -> CADENA_NO_COMILLAS
Rule 34    valor -> function_call
Rule 35    valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA
Rule 36    define -> TYPE CADENA_NO_COMILLAS ASIGNACION ajson
Rule 37    ajson -> LLAVE_ABRE lista LLAVE_CIERRA
Rule 38    lista -> elemento
Rule 39    lista -> elemento COMA
Rule 40    lista -> elemento COMA lista
Rule 41    elemento -> clave DOS_PUNTOS valor_t
Rule 42    valor_t -> tipo
Rule 43    valor_t -> ajson
Rule 44    clave -> CADENA_NO_COMILLAS
Rule 45    clave -> CADENA_COMILLAS
Rule 46    ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA
Rule 47    lista_v -> elemento_v
Rule 48    lista_v -> elemento_v COMA
Rule 49    lista_v -> elemento_v COMA lista_v
Rule 50    elemento_v -> clave_v DOS_PUNTOS valor
Rule 51    clave_v -> CADENA_NO_COMILLAS
Rule 52    clave_v -> CADENA_COMILLAS
Rule 53    operacion -> aritmetica
Rule 54    operacion -> booleana
Rule 55    operacion -> comparacion
Rule 56    operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA
Rule 57    aritmetica -> valor operador1 valor
Rule 58    aritmetica -> valor operador2 valor
Rule 59    operador1 -> SUMA
Rule 60    operador1 -> RESTA
Rule 61    operador2 -> MULTIPLICACION
Rule 62    operador2 -> DIVISION
Rule 63    comparacion -> valor comparador valor
Rule 64    comparacion -> valor IGUAL valor
Rule 65    comparador -> MAYOR
Rule 66    comparador -> MENOR
Rule 67    comparador -> MAYOR_IGUAL
Rule 68    comparador -> MENOR_IGUAL
Rule 69    booleana -> valor comparador2 valor
Rule 70    booleana -> NEGACION valor
Rule 71    comparador2 -> CONJUNCION
Rule 72    comparador2 -> DISYUNCION
Rule 73    tipo -> INT
Rule 74    tipo -> FLOAT
Rule 75    tipo -> CHARACTER
Rule 76    tipo -> BOOLEAN
Rule 77    tipo -> CADENA_NO_COMILLAS
Rule 78    condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
Rule 79    condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
Rule 80    expersion -> valor
Rule 81    expersion -> booleana
Rule 82    expersion -> function_call
Rule 83    loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
Rule 84    function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
Rule 85    function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
Rule 86    function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
Rule 87    function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
Rule 88    function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
Rule 89    function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA

Terminals, with rules where they appear

ASIGNACION           : 21 22 25 36
BOOLEAN              : 76
CADENA_COMILLAS      : 26 45 52
CADENA_NO_COMILLAS   : 23 24 33 36 44 51 77 84 85 86 87 88 89
CARACTER             : 32
CHARACTER            : 75
COMA                 : 20 22 39 40 48 49
COMENTARIO_BLOQUE    : 
COMENTARIO_LINEA     : 
CONJUNCION           : 71
CORCHETE_ABRE        : 
CORCHETE_CIERRA      : 
DECIMAL              : 17
DISYUNCION           : 72
DIVISION             : 62
DOS_PUNTOS           : 23 41 50 84 85 86 87
ELSE                 : 79
ENTERO               : 16
FL                   : 15
FLOAT                : 74
FUNCTION             : 84 85 86 87
IF                   : 78 79
IGUAL                : 64
INT                  : 73
LET                  : 18
LLAVE_ABRE           : 37 46 78 79 79 83 84 85 86 87
LLAVE_CIERRA         : 37 46 78 79 79 83 84 85 86 87
MAYOR                : 65
MAYOR_IGUAL          : 67
MENOR                : 66
MENOR_IGUAL          : 68
MULTIPLICACION       : 61
NEGACION             : 70
NULL                 : 30
PARENTESIS_ABRE      : 35 56 78 79 83 84 85 86 87 88 89
PARENTESIS_CIERRA    : 35 56 78 79 83 84 85 86 87 88 89
PUNTO                : 
PUNTO_Y_COMA         : 4 5 84 85 86 87
RESTA                : 60
RETURN               : 84 85 86 87
SUMA                 : 59
TR                   : 14
TYPE                 : 36
WHILE                : 83
error                : 

Nonterminals, with rules where they appear

ajson                : 36 43
ajson_v              : 31
aritmetica           : 53
assign               : 10
bool                 : 29
booleana             : 54 81
clave                : 41
clave_v              : 50
comparacion          : 55
comparador           : 63
comparador2          : 69
condition            : 11
content              : 4 5
declare              : 9
define               : 8
elemento             : 38 39 40
elemento_v           : 47 48 49
empty                : 2
expersion            : 78 79 83
function_call        : 34 82
function_def         : 13
id                   : 18 20 22 84 85
lista                : 37 40
lista_v              : 46 49
loop                 : 12
no_semicolon         : 6 7
num                  : 27
operacion            : 28 56
operador1            : 57
operador2            : 58
programa             : 0
statement            : 1 5 7 78 79 79 83 84 86
tipo                 : 23 42 84 85 86 87
valor                : 21 22 25 35 50 57 57 58 58 63 63 64 64 69 69 70 80 84 85 86 87 88
valor_t              : 41
variable             : 19 20 21 22 25

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . statement
    (2) programa -> . empty
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (3) empty -> .
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (36) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (18) declare -> . LET id
    (25) assign -> . variable ASIGNACION valor
    (78) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (79) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (83) loop -> . WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (84) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (85) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (86) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (87) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (23) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (24) variable -> . CADENA_NO_COMILLAS

    $end            reduce using rule 3 (empty -> .)
    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    programa                       shift and go to state 1
    statement                      shift and go to state 2
    empty                          shift and go to state 3
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 1

    (0) S' -> programa .



state 2

    (1) programa -> statement .

    $end            reduce using rule 1 (programa -> statement .)


state 3

    (2) programa -> empty .

    $end            reduce using rule 2 (programa -> empty .)


state 4

    (4) statement -> content . PUNTO_Y_COMA
    (5) statement -> content . PUNTO_Y_COMA statement

    PUNTO_Y_COMA    shift and go to state 19


state 5

    (6) statement -> no_semicolon .
    (7) statement -> no_semicolon . statement
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (36) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (18) declare -> . LET id
    (25) assign -> . variable ASIGNACION valor
    (78) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (79) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (83) loop -> . WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (84) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (85) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (86) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (87) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (23) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (24) variable -> . CADENA_NO_COMILLAS

    $end            reduce using rule 6 (statement -> no_semicolon .)
    LLAVE_CIERRA    reduce using rule 6 (statement -> no_semicolon .)
    RETURN          reduce using rule 6 (statement -> no_semicolon .)
    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    no_semicolon                   shift and go to state 5
    statement                      shift and go to state 20
    content                        shift and go to state 4
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 6

    (8) content -> define .

    PUNTO_Y_COMA    reduce using rule 8 (content -> define .)


state 7

    (9) content -> declare .

    PUNTO_Y_COMA    reduce using rule 9 (content -> declare .)


state 8

    (10) content -> assign .

    PUNTO_Y_COMA    reduce using rule 10 (content -> assign .)


state 9

    (11) no_semicolon -> condition .

    TYPE            reduce using rule 11 (no_semicolon -> condition .)
    LET             reduce using rule 11 (no_semicolon -> condition .)
    IF              reduce using rule 11 (no_semicolon -> condition .)
    WHILE           reduce using rule 11 (no_semicolon -> condition .)
    FUNCTION        reduce using rule 11 (no_semicolon -> condition .)
    CADENA_NO_COMILLAS reduce using rule 11 (no_semicolon -> condition .)
    $end            reduce using rule 11 (no_semicolon -> condition .)
    LLAVE_CIERRA    reduce using rule 11 (no_semicolon -> condition .)
    RETURN          reduce using rule 11 (no_semicolon -> condition .)


state 10

    (12) no_semicolon -> loop .

    TYPE            reduce using rule 12 (no_semicolon -> loop .)
    LET             reduce using rule 12 (no_semicolon -> loop .)
    IF              reduce using rule 12 (no_semicolon -> loop .)
    WHILE           reduce using rule 12 (no_semicolon -> loop .)
    FUNCTION        reduce using rule 12 (no_semicolon -> loop .)
    CADENA_NO_COMILLAS reduce using rule 12 (no_semicolon -> loop .)
    $end            reduce using rule 12 (no_semicolon -> loop .)
    LLAVE_CIERRA    reduce using rule 12 (no_semicolon -> loop .)
    RETURN          reduce using rule 12 (no_semicolon -> loop .)


state 11

    (13) no_semicolon -> function_def .

    TYPE            reduce using rule 13 (no_semicolon -> function_def .)
    LET             reduce using rule 13 (no_semicolon -> function_def .)
    IF              reduce using rule 13 (no_semicolon -> function_def .)
    WHILE           reduce using rule 13 (no_semicolon -> function_def .)
    FUNCTION        reduce using rule 13 (no_semicolon -> function_def .)
    CADENA_NO_COMILLAS reduce using rule 13 (no_semicolon -> function_def .)
    $end            reduce using rule 13 (no_semicolon -> function_def .)
    LLAVE_CIERRA    reduce using rule 13 (no_semicolon -> function_def .)
    RETURN          reduce using rule 13 (no_semicolon -> function_def .)


state 12

    (36) define -> TYPE . CADENA_NO_COMILLAS ASIGNACION ajson

    CADENA_NO_COMILLAS shift and go to state 21


state 13

    (23) variable -> CADENA_NO_COMILLAS . DOS_PUNTOS tipo
    (24) variable -> CADENA_NO_COMILLAS .

    DOS_PUNTOS      shift and go to state 22
    ASIGNACION      reduce using rule 24 (variable -> CADENA_NO_COMILLAS .)
    COMA            reduce using rule 24 (variable -> CADENA_NO_COMILLAS .)
    PUNTO_Y_COMA    reduce using rule 24 (variable -> CADENA_NO_COMILLAS .)
    PARENTESIS_CIERRA reduce using rule 24 (variable -> CADENA_NO_COMILLAS .)


state 14

    (18) declare -> LET . id
    (19) id -> . variable
    (20) id -> . variable COMA id
    (21) id -> . variable ASIGNACION valor
    (22) id -> . variable ASIGNACION valor COMA id
    (23) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (24) variable -> . CADENA_NO_COMILLAS

    CADENA_NO_COMILLAS shift and go to state 13

    id                             shift and go to state 23
    variable                       shift and go to state 24

state 15

    (25) assign -> variable . ASIGNACION valor

    ASIGNACION      shift and go to state 25


state 16

    (78) condition -> IF . PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (79) condition -> IF . PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA

    PARENTESIS_ABRE shift and go to state 26


state 17

    (83) loop -> WHILE . PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA

    PARENTESIS_ABRE shift and go to state 27


state 18

    (84) function_def -> FUNCTION . CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (85) function_def -> FUNCTION . CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (86) function_def -> FUNCTION . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (87) function_def -> FUNCTION . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    CADENA_NO_COMILLAS shift and go to state 28


state 19

    (4) statement -> content PUNTO_Y_COMA .
    (5) statement -> content PUNTO_Y_COMA . statement
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (36) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (18) declare -> . LET id
    (25) assign -> . variable ASIGNACION valor
    (78) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (79) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (83) loop -> . WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (84) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (85) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (86) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (87) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (23) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (24) variable -> . CADENA_NO_COMILLAS

    $end            reduce using rule 4 (statement -> content PUNTO_Y_COMA .)
    LLAVE_CIERRA    reduce using rule 4 (statement -> content PUNTO_Y_COMA .)
    RETURN          reduce using rule 4 (statement -> content PUNTO_Y_COMA .)
    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    content                        shift and go to state 4
    statement                      shift and go to state 29
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 20

    (7) statement -> no_semicolon statement .

    $end            reduce using rule 7 (statement -> no_semicolon statement .)
    LLAVE_CIERRA    reduce using rule 7 (statement -> no_semicolon statement .)
    RETURN          reduce using rule 7 (statement -> no_semicolon statement .)


state 21

    (36) define -> TYPE CADENA_NO_COMILLAS . ASIGNACION ajson

    ASIGNACION      shift and go to state 30


state 22

    (23) variable -> CADENA_NO_COMILLAS DOS_PUNTOS . tipo
    (73) tipo -> . INT
    (74) tipo -> . FLOAT
    (75) tipo -> . CHARACTER
    (76) tipo -> . BOOLEAN
    (77) tipo -> . CADENA_NO_COMILLAS

    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    CHARACTER       shift and go to state 35
    BOOLEAN         shift and go to state 36
    CADENA_NO_COMILLAS shift and go to state 31

    tipo                           shift and go to state 32

state 23

    (18) declare -> LET id .

    PUNTO_Y_COMA    reduce using rule 18 (declare -> LET id .)


state 24

    (19) id -> variable .
    (20) id -> variable . COMA id
    (21) id -> variable . ASIGNACION valor
    (22) id -> variable . ASIGNACION valor COMA id

    PUNTO_Y_COMA    reduce using rule 19 (id -> variable .)
    PARENTESIS_CIERRA reduce using rule 19 (id -> variable .)
    COMA            shift and go to state 37
    ASIGNACION      shift and go to state 38


state 25

    (25) assign -> variable ASIGNACION . valor
    (26) valor -> . CADENA_COMILLAS
    (27) valor -> . num
    (28) valor -> . operacion
    (29) valor -> . bool
    (30) valor -> . NULL
    (31) valor -> . ajson_v
    (32) valor -> . CARACTER
    (33) valor -> . CADENA_NO_COMILLAS
    (34) valor -> . function_call
    (35) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (53) operacion -> . aritmetica
    (54) operacion -> . booleana
    (55) operacion -> . comparacion
    (56) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (14) bool -> . TR
    (15) bool -> . FL
    (46) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (88) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (89) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (57) aritmetica -> . valor operador1 valor
    (58) aritmetica -> . valor operador2 valor
    (69) booleana -> . valor comparador2 valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor comparador valor
    (64) comparacion -> . valor IGUAL valor

    CADENA_COMILLAS shift and go to state 40
    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    CADENA_NO_COMILLAS shift and go to state 47
    PARENTESIS_ABRE shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 39
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 48
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 26

    (78) condition -> IF PARENTESIS_ABRE . expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (79) condition -> IF PARENTESIS_ABRE . expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (80) expersion -> . valor
    (81) expersion -> . booleana
    (82) expersion -> . function_call
    (26) valor -> . CADENA_COMILLAS
    (27) valor -> . num
    (28) valor -> . operacion
    (29) valor -> . bool
    (30) valor -> . NULL
    (31) valor -> . ajson_v
    (32) valor -> . CARACTER
    (33) valor -> . CADENA_NO_COMILLAS
    (34) valor -> . function_call
    (35) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (69) booleana -> . valor comparador2 valor
    (70) booleana -> . NEGACION valor
    (88) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (89) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (53) operacion -> . aritmetica
    (54) operacion -> . booleana
    (55) operacion -> . comparacion
    (56) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (14) bool -> . TR
    (15) bool -> . FL
    (46) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (57) aritmetica -> . valor operador1 valor
    (58) aritmetica -> . valor operador2 valor
    (63) comparacion -> . valor comparador valor
    (64) comparacion -> . valor IGUAL valor

    CADENA_COMILLAS shift and go to state 40
    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    CADENA_NO_COMILLAS shift and go to state 47
    PARENTESIS_ABRE shift and go to state 49
    NEGACION        shift and go to state 58
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57

    expersion                      shift and go to state 59
    valor                          shift and go to state 60
    booleana                       shift and go to state 61
    function_call                  shift and go to state 62
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    aritmetica                     shift and go to state 52
    comparacion                    shift and go to state 54

state 27

    (83) loop -> WHILE PARENTESIS_ABRE . expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (80) expersion -> . valor
    (81) expersion -> . booleana
    (82) expersion -> . function_call
    (26) valor -> . CADENA_COMILLAS
    (27) valor -> . num
    (28) valor -> . operacion
    (29) valor -> . bool
    (30) valor -> . NULL
    (31) valor -> . ajson_v
    (32) valor -> . CARACTER
    (33) valor -> . CADENA_NO_COMILLAS
    (34) valor -> . function_call
    (35) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (69) booleana -> . valor comparador2 valor
    (70) booleana -> . NEGACION valor
    (88) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (89) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (53) operacion -> . aritmetica
    (54) operacion -> . booleana
    (55) operacion -> . comparacion
    (56) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (14) bool -> . TR
    (15) bool -> . FL
    (46) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (57) aritmetica -> . valor operador1 valor
    (58) aritmetica -> . valor operador2 valor
    (63) comparacion -> . valor comparador valor
    (64) comparacion -> . valor IGUAL valor

    CADENA_COMILLAS shift and go to state 40
    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    CADENA_NO_COMILLAS shift and go to state 47
    PARENTESIS_ABRE shift and go to state 49
    NEGACION        shift and go to state 58
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57

    expersion                      shift and go to state 63
    valor                          shift and go to state 60
    booleana                       shift and go to state 61
    function_call                  shift and go to state 62
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    aritmetica                     shift and go to state 52
    comparacion                    shift and go to state 54

state 28

    (84) function_def -> FUNCTION CADENA_NO_COMILLAS . PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (85) function_def -> FUNCTION CADENA_NO_COMILLAS . PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (86) function_def -> FUNCTION CADENA_NO_COMILLAS . PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (87) function_def -> FUNCTION CADENA_NO_COMILLAS . PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    PARENTESIS_ABRE shift and go to state 64


state 29

    (5) statement -> content PUNTO_Y_COMA statement .

    $end            reduce using rule 5 (statement -> content PUNTO_Y_COMA statement .)
    LLAVE_CIERRA    reduce using rule 5 (statement -> content PUNTO_Y_COMA statement .)
    RETURN          reduce using rule 5 (statement -> content PUNTO_Y_COMA statement .)


state 30

    (36) define -> TYPE CADENA_NO_COMILLAS ASIGNACION . ajson
    (37) ajson -> . LLAVE_ABRE lista LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 66

    ajson                          shift and go to state 65

state 31

    (77) tipo -> CADENA_NO_COMILLAS .

    ASIGNACION      reduce using rule 77 (tipo -> CADENA_NO_COMILLAS .)
    COMA            reduce using rule 77 (tipo -> CADENA_NO_COMILLAS .)
    PUNTO_Y_COMA    reduce using rule 77 (tipo -> CADENA_NO_COMILLAS .)
    PARENTESIS_CIERRA reduce using rule 77 (tipo -> CADENA_NO_COMILLAS .)
    LLAVE_ABRE      reduce using rule 77 (tipo -> CADENA_NO_COMILLAS .)
    LLAVE_CIERRA    reduce using rule 77 (tipo -> CADENA_NO_COMILLAS .)


state 32

    (23) variable -> CADENA_NO_COMILLAS DOS_PUNTOS tipo .

    ASIGNACION      reduce using rule 23 (variable -> CADENA_NO_COMILLAS DOS_PUNTOS tipo .)
    COMA            reduce using rule 23 (variable -> CADENA_NO_COMILLAS DOS_PUNTOS tipo .)
    PUNTO_Y_COMA    reduce using rule 23 (variable -> CADENA_NO_COMILLAS DOS_PUNTOS tipo .)
    PARENTESIS_CIERRA reduce using rule 23 (variable -> CADENA_NO_COMILLAS DOS_PUNTOS tipo .)


state 33

    (73) tipo -> INT .

    ASIGNACION      reduce using rule 73 (tipo -> INT .)
    COMA            reduce using rule 73 (tipo -> INT .)
    PUNTO_Y_COMA    reduce using rule 73 (tipo -> INT .)
    PARENTESIS_CIERRA reduce using rule 73 (tipo -> INT .)
    LLAVE_ABRE      reduce using rule 73 (tipo -> INT .)
    LLAVE_CIERRA    reduce using rule 73 (tipo -> INT .)


state 34

    (74) tipo -> FLOAT .

    ASIGNACION      reduce using rule 74 (tipo -> FLOAT .)
    COMA            reduce using rule 74 (tipo -> FLOAT .)
    PUNTO_Y_COMA    reduce using rule 74 (tipo -> FLOAT .)
    PARENTESIS_CIERRA reduce using rule 74 (tipo -> FLOAT .)
    LLAVE_ABRE      reduce using rule 74 (tipo -> FLOAT .)
    LLAVE_CIERRA    reduce using rule 74 (tipo -> FLOAT .)


state 35

    (75) tipo -> CHARACTER .

    ASIGNACION      reduce using rule 75 (tipo -> CHARACTER .)
    COMA            reduce using rule 75 (tipo -> CHARACTER .)
    PUNTO_Y_COMA    reduce using rule 75 (tipo -> CHARACTER .)
    PARENTESIS_CIERRA reduce using rule 75 (tipo -> CHARACTER .)
    LLAVE_ABRE      reduce using rule 75 (tipo -> CHARACTER .)
    LLAVE_CIERRA    reduce using rule 75 (tipo -> CHARACTER .)


state 36

    (76) tipo -> BOOLEAN .

    ASIGNACION      reduce using rule 76 (tipo -> BOOLEAN .)
    COMA            reduce using rule 76 (tipo -> BOOLEAN .)
    PUNTO_Y_COMA    reduce using rule 76 (tipo -> BOOLEAN .)
    PARENTESIS_CIERRA reduce using rule 76 (tipo -> BOOLEAN .)
    LLAVE_ABRE      reduce using rule 76 (tipo -> BOOLEAN .)
    LLAVE_CIERRA    reduce using rule 76 (tipo -> BOOLEAN .)


state 37

    (20) id -> variable COMA . id
    (19) id -> . variable
    (20) id -> . variable COMA id
    (21) id -> . variable ASIGNACION valor
    (22) id -> . variable ASIGNACION valor COMA id
    (23) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (24) variable -> . CADENA_NO_COMILLAS

    CADENA_NO_COMILLAS shift and go to state 13

    variable                       shift and go to state 24
    id                             shift and go to state 67

state 38

    (21) id -> variable ASIGNACION . valor
    (22) id -> variable ASIGNACION . valor COMA id
    (26) valor -> . CADENA_COMILLAS
    (27) valor -> . num
    (28) valor -> . operacion
    (29) valor -> . bool
    (30) valor -> . NULL
    (31) valor -> . ajson_v
    (32) valor -> . CARACTER
    (33) valor -> . CADENA_NO_COMILLAS
    (34) valor -> . function_call
    (35) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (53) operacion -> . aritmetica
    (54) operacion -> . booleana
    (55) operacion -> . comparacion
    (56) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (14) bool -> . TR
    (15) bool -> . FL
    (46) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (88) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (89) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (57) aritmetica -> . valor operador1 valor
    (58) aritmetica -> . valor operador2 valor
    (69) booleana -> . valor comparador2 valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor comparador valor
    (64) comparacion -> . valor IGUAL valor

    CADENA_COMILLAS shift and go to state 40
    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    CADENA_NO_COMILLAS shift and go to state 47
    PARENTESIS_ABRE shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 68
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 48
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 39

    (25) assign -> variable ASIGNACION valor .
    (57) aritmetica -> valor . operador1 valor
    (58) aritmetica -> valor . operador2 valor
    (69) booleana -> valor . comparador2 valor
    (63) comparacion -> valor . comparador valor
    (64) comparacion -> valor . IGUAL valor
    (59) operador1 -> . SUMA
    (60) operador1 -> . RESTA
    (61) operador2 -> . MULTIPLICACION
    (62) operador2 -> . DIVISION
    (71) comparador2 -> . CONJUNCION
    (72) comparador2 -> . DISYUNCION
    (65) comparador -> . MAYOR
    (66) comparador -> . MENOR
    (67) comparador -> . MAYOR_IGUAL
    (68) comparador -> . MENOR_IGUAL

    PUNTO_Y_COMA    reduce using rule 25 (assign -> variable ASIGNACION valor .)
    IGUAL           shift and go to state 73
    SUMA            shift and go to state 74
    RESTA           shift and go to state 75
    MULTIPLICACION  shift and go to state 76
    DIVISION        shift and go to state 77
    CONJUNCION      shift and go to state 78
    DISYUNCION      shift and go to state 79
    MAYOR           shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR_IGUAL     shift and go to state 82
    MENOR_IGUAL     shift and go to state 83

    operador1                      shift and go to state 69
    operador2                      shift and go to state 70
    comparador2                    shift and go to state 71
    comparador                     shift and go to state 72

state 40

    (26) valor -> CADENA_COMILLAS .

    IGUAL           reduce using rule 26 (valor -> CADENA_COMILLAS .)
    SUMA            reduce using rule 26 (valor -> CADENA_COMILLAS .)
    RESTA           reduce using rule 26 (valor -> CADENA_COMILLAS .)
    MULTIPLICACION  reduce using rule 26 (valor -> CADENA_COMILLAS .)
    DIVISION        reduce using rule 26 (valor -> CADENA_COMILLAS .)
    CONJUNCION      reduce using rule 26 (valor -> CADENA_COMILLAS .)
    DISYUNCION      reduce using rule 26 (valor -> CADENA_COMILLAS .)
    MAYOR           reduce using rule 26 (valor -> CADENA_COMILLAS .)
    MENOR           reduce using rule 26 (valor -> CADENA_COMILLAS .)
    MAYOR_IGUAL     reduce using rule 26 (valor -> CADENA_COMILLAS .)
    MENOR_IGUAL     reduce using rule 26 (valor -> CADENA_COMILLAS .)
    PUNTO_Y_COMA    reduce using rule 26 (valor -> CADENA_COMILLAS .)
    PARENTESIS_CIERRA reduce using rule 26 (valor -> CADENA_COMILLAS .)
    COMA            reduce using rule 26 (valor -> CADENA_COMILLAS .)
    LLAVE_CIERRA    reduce using rule 26 (valor -> CADENA_COMILLAS .)


state 41

    (27) valor -> num .

    IGUAL           reduce using rule 27 (valor -> num .)
    SUMA            reduce using rule 27 (valor -> num .)
    RESTA           reduce using rule 27 (valor -> num .)
    MULTIPLICACION  reduce using rule 27 (valor -> num .)
    DIVISION        reduce using rule 27 (valor -> num .)
    CONJUNCION      reduce using rule 27 (valor -> num .)
    DISYUNCION      reduce using rule 27 (valor -> num .)
    MAYOR           reduce using rule 27 (valor -> num .)
    MENOR           reduce using rule 27 (valor -> num .)
    MAYOR_IGUAL     reduce using rule 27 (valor -> num .)
    MENOR_IGUAL     reduce using rule 27 (valor -> num .)
    PUNTO_Y_COMA    reduce using rule 27 (valor -> num .)
    PARENTESIS_CIERRA reduce using rule 27 (valor -> num .)
    COMA            reduce using rule 27 (valor -> num .)
    LLAVE_CIERRA    reduce using rule 27 (valor -> num .)


state 42

    (28) valor -> operacion .

    IGUAL           reduce using rule 28 (valor -> operacion .)
    SUMA            reduce using rule 28 (valor -> operacion .)
    RESTA           reduce using rule 28 (valor -> operacion .)
    MULTIPLICACION  reduce using rule 28 (valor -> operacion .)
    DIVISION        reduce using rule 28 (valor -> operacion .)
    CONJUNCION      reduce using rule 28 (valor -> operacion .)
    DISYUNCION      reduce using rule 28 (valor -> operacion .)
    MAYOR           reduce using rule 28 (valor -> operacion .)
    MENOR           reduce using rule 28 (valor -> operacion .)
    MAYOR_IGUAL     reduce using rule 28 (valor -> operacion .)
    MENOR_IGUAL     reduce using rule 28 (valor -> operacion .)
    PUNTO_Y_COMA    reduce using rule 28 (valor -> operacion .)
    PARENTESIS_CIERRA reduce using rule 28 (valor -> operacion .)
    COMA            reduce using rule 28 (valor -> operacion .)
    LLAVE_CIERRA    reduce using rule 28 (valor -> operacion .)


state 43

    (29) valor -> bool .

    IGUAL           reduce using rule 29 (valor -> bool .)
    SUMA            reduce using rule 29 (valor -> bool .)
    RESTA           reduce using rule 29 (valor -> bool .)
    MULTIPLICACION  reduce using rule 29 (valor -> bool .)
    DIVISION        reduce using rule 29 (valor -> bool .)
    CONJUNCION      reduce using rule 29 (valor -> bool .)
    DISYUNCION      reduce using rule 29 (valor -> bool .)
    MAYOR           reduce using rule 29 (valor -> bool .)
    MENOR           reduce using rule 29 (valor -> bool .)
    MAYOR_IGUAL     reduce using rule 29 (valor -> bool .)
    MENOR_IGUAL     reduce using rule 29 (valor -> bool .)
    PUNTO_Y_COMA    reduce using rule 29 (valor -> bool .)
    PARENTESIS_CIERRA reduce using rule 29 (valor -> bool .)
    COMA            reduce using rule 29 (valor -> bool .)
    LLAVE_CIERRA    reduce using rule 29 (valor -> bool .)


state 44

    (30) valor -> NULL .

    IGUAL           reduce using rule 30 (valor -> NULL .)
    SUMA            reduce using rule 30 (valor -> NULL .)
    RESTA           reduce using rule 30 (valor -> NULL .)
    MULTIPLICACION  reduce using rule 30 (valor -> NULL .)
    DIVISION        reduce using rule 30 (valor -> NULL .)
    CONJUNCION      reduce using rule 30 (valor -> NULL .)
    DISYUNCION      reduce using rule 30 (valor -> NULL .)
    MAYOR           reduce using rule 30 (valor -> NULL .)
    MENOR           reduce using rule 30 (valor -> NULL .)
    MAYOR_IGUAL     reduce using rule 30 (valor -> NULL .)
    MENOR_IGUAL     reduce using rule 30 (valor -> NULL .)
    PUNTO_Y_COMA    reduce using rule 30 (valor -> NULL .)
    PARENTESIS_CIERRA reduce using rule 30 (valor -> NULL .)
    COMA            reduce using rule 30 (valor -> NULL .)
    LLAVE_CIERRA    reduce using rule 30 (valor -> NULL .)


state 45

    (31) valor -> ajson_v .

    IGUAL           reduce using rule 31 (valor -> ajson_v .)
    SUMA            reduce using rule 31 (valor -> ajson_v .)
    RESTA           reduce using rule 31 (valor -> ajson_v .)
    MULTIPLICACION  reduce using rule 31 (valor -> ajson_v .)
    DIVISION        reduce using rule 31 (valor -> ajson_v .)
    CONJUNCION      reduce using rule 31 (valor -> ajson_v .)
    DISYUNCION      reduce using rule 31 (valor -> ajson_v .)
    MAYOR           reduce using rule 31 (valor -> ajson_v .)
    MENOR           reduce using rule 31 (valor -> ajson_v .)
    MAYOR_IGUAL     reduce using rule 31 (valor -> ajson_v .)
    MENOR_IGUAL     reduce using rule 31 (valor -> ajson_v .)
    PUNTO_Y_COMA    reduce using rule 31 (valor -> ajson_v .)
    PARENTESIS_CIERRA reduce using rule 31 (valor -> ajson_v .)
    COMA            reduce using rule 31 (valor -> ajson_v .)
    LLAVE_CIERRA    reduce using rule 31 (valor -> ajson_v .)


state 46

    (32) valor -> CARACTER .

    IGUAL           reduce using rule 32 (valor -> CARACTER .)
    SUMA            reduce using rule 32 (valor -> CARACTER .)
    RESTA           reduce using rule 32 (valor -> CARACTER .)
    MULTIPLICACION  reduce using rule 32 (valor -> CARACTER .)
    DIVISION        reduce using rule 32 (valor -> CARACTER .)
    CONJUNCION      reduce using rule 32 (valor -> CARACTER .)
    DISYUNCION      reduce using rule 32 (valor -> CARACTER .)
    MAYOR           reduce using rule 32 (valor -> CARACTER .)
    MENOR           reduce using rule 32 (valor -> CARACTER .)
    MAYOR_IGUAL     reduce using rule 32 (valor -> CARACTER .)
    MENOR_IGUAL     reduce using rule 32 (valor -> CARACTER .)
    PUNTO_Y_COMA    reduce using rule 32 (valor -> CARACTER .)
    PARENTESIS_CIERRA reduce using rule 32 (valor -> CARACTER .)
    COMA            reduce using rule 32 (valor -> CARACTER .)
    LLAVE_CIERRA    reduce using rule 32 (valor -> CARACTER .)


state 47

    (33) valor -> CADENA_NO_COMILLAS .
    (88) function_call -> CADENA_NO_COMILLAS . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (89) function_call -> CADENA_NO_COMILLAS . PARENTESIS_ABRE PARENTESIS_CIERRA

    IGUAL           reduce using rule 33 (valor -> CADENA_NO_COMILLAS .)
    SUMA            reduce using rule 33 (valor -> CADENA_NO_COMILLAS .)
    RESTA           reduce using rule 33 (valor -> CADENA_NO_COMILLAS .)
    MULTIPLICACION  reduce using rule 33 (valor -> CADENA_NO_COMILLAS .)
    DIVISION        reduce using rule 33 (valor -> CADENA_NO_COMILLAS .)
    CONJUNCION      reduce using rule 33 (valor -> CADENA_NO_COMILLAS .)
    DISYUNCION      reduce using rule 33 (valor -> CADENA_NO_COMILLAS .)
    MAYOR           reduce using rule 33 (valor -> CADENA_NO_COMILLAS .)
    MENOR           reduce using rule 33 (valor -> CADENA_NO_COMILLAS .)
    MAYOR_IGUAL     reduce using rule 33 (valor -> CADENA_NO_COMILLAS .)
    MENOR_IGUAL     reduce using rule 33 (valor -> CADENA_NO_COMILLAS .)
    PUNTO_Y_COMA    reduce using rule 33 (valor -> CADENA_NO_COMILLAS .)
    PARENTESIS_CIERRA reduce using rule 33 (valor -> CADENA_NO_COMILLAS .)
    COMA            reduce using rule 33 (valor -> CADENA_NO_COMILLAS .)
    LLAVE_CIERRA    reduce using rule 33 (valor -> CADENA_NO_COMILLAS .)
    PARENTESIS_ABRE shift and go to state 84


state 48

    (34) valor -> function_call .

    IGUAL           reduce using rule 34 (valor -> function_call .)
    SUMA            reduce using rule 34 (valor -> function_call .)
    RESTA           reduce using rule 34 (valor -> function_call .)
    MULTIPLICACION  reduce using rule 34 (valor -> function_call .)
    DIVISION        reduce using rule 34 (valor -> function_call .)
    CONJUNCION      reduce using rule 34 (valor -> function_call .)
    DISYUNCION      reduce using rule 34 (valor -> function_call .)
    MAYOR           reduce using rule 34 (valor -> function_call .)
    MENOR           reduce using rule 34 (valor -> function_call .)
    MAYOR_IGUAL     reduce using rule 34 (valor -> function_call .)
    MENOR_IGUAL     reduce using rule 34 (valor -> function_call .)
    PUNTO_Y_COMA    reduce using rule 34 (valor -> function_call .)
    COMA            reduce using rule 34 (valor -> function_call .)
    PARENTESIS_CIERRA reduce using rule 34 (valor -> function_call .)
    LLAVE_CIERRA    reduce using rule 34 (valor -> function_call .)


state 49

    (35) valor -> PARENTESIS_ABRE . valor PARENTESIS_CIERRA
    (56) operacion -> PARENTESIS_ABRE . operacion PARENTESIS_CIERRA
    (26) valor -> . CADENA_COMILLAS
    (27) valor -> . num
    (28) valor -> . operacion
    (29) valor -> . bool
    (30) valor -> . NULL
    (31) valor -> . ajson_v
    (32) valor -> . CARACTER
    (33) valor -> . CADENA_NO_COMILLAS
    (34) valor -> . function_call
    (35) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (53) operacion -> . aritmetica
    (54) operacion -> . booleana
    (55) operacion -> . comparacion
    (56) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (14) bool -> . TR
    (15) bool -> . FL
    (46) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (88) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (89) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (57) aritmetica -> . valor operador1 valor
    (58) aritmetica -> . valor operador2 valor
    (69) booleana -> . valor comparador2 valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor comparador valor
    (64) comparacion -> . valor IGUAL valor

    CADENA_COMILLAS shift and go to state 40
    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    CADENA_NO_COMILLAS shift and go to state 47
    PARENTESIS_ABRE shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 85
    operacion                      shift and go to state 86
    num                            shift and go to state 41
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 48
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 50

    (16) num -> ENTERO .

    IGUAL           reduce using rule 16 (num -> ENTERO .)
    SUMA            reduce using rule 16 (num -> ENTERO .)
    RESTA           reduce using rule 16 (num -> ENTERO .)
    MULTIPLICACION  reduce using rule 16 (num -> ENTERO .)
    DIVISION        reduce using rule 16 (num -> ENTERO .)
    CONJUNCION      reduce using rule 16 (num -> ENTERO .)
    DISYUNCION      reduce using rule 16 (num -> ENTERO .)
    MAYOR           reduce using rule 16 (num -> ENTERO .)
    MENOR           reduce using rule 16 (num -> ENTERO .)
    MAYOR_IGUAL     reduce using rule 16 (num -> ENTERO .)
    MENOR_IGUAL     reduce using rule 16 (num -> ENTERO .)
    PUNTO_Y_COMA    reduce using rule 16 (num -> ENTERO .)
    PARENTESIS_CIERRA reduce using rule 16 (num -> ENTERO .)
    COMA            reduce using rule 16 (num -> ENTERO .)
    LLAVE_CIERRA    reduce using rule 16 (num -> ENTERO .)


state 51

    (17) num -> DECIMAL .

    IGUAL           reduce using rule 17 (num -> DECIMAL .)
    SUMA            reduce using rule 17 (num -> DECIMAL .)
    RESTA           reduce using rule 17 (num -> DECIMAL .)
    MULTIPLICACION  reduce using rule 17 (num -> DECIMAL .)
    DIVISION        reduce using rule 17 (num -> DECIMAL .)
    CONJUNCION      reduce using rule 17 (num -> DECIMAL .)
    DISYUNCION      reduce using rule 17 (num -> DECIMAL .)
    MAYOR           reduce using rule 17 (num -> DECIMAL .)
    MENOR           reduce using rule 17 (num -> DECIMAL .)
    MAYOR_IGUAL     reduce using rule 17 (num -> DECIMAL .)
    MENOR_IGUAL     reduce using rule 17 (num -> DECIMAL .)
    PUNTO_Y_COMA    reduce using rule 17 (num -> DECIMAL .)
    PARENTESIS_CIERRA reduce using rule 17 (num -> DECIMAL .)
    COMA            reduce using rule 17 (num -> DECIMAL .)
    LLAVE_CIERRA    reduce using rule 17 (num -> DECIMAL .)


state 52

    (53) operacion -> aritmetica .

    IGUAL           reduce using rule 53 (operacion -> aritmetica .)
    SUMA            reduce using rule 53 (operacion -> aritmetica .)
    RESTA           reduce using rule 53 (operacion -> aritmetica .)
    MULTIPLICACION  reduce using rule 53 (operacion -> aritmetica .)
    DIVISION        reduce using rule 53 (operacion -> aritmetica .)
    CONJUNCION      reduce using rule 53 (operacion -> aritmetica .)
    DISYUNCION      reduce using rule 53 (operacion -> aritmetica .)
    MAYOR           reduce using rule 53 (operacion -> aritmetica .)
    MENOR           reduce using rule 53 (operacion -> aritmetica .)
    MAYOR_IGUAL     reduce using rule 53 (operacion -> aritmetica .)
    MENOR_IGUAL     reduce using rule 53 (operacion -> aritmetica .)
    PUNTO_Y_COMA    reduce using rule 53 (operacion -> aritmetica .)
    PARENTESIS_CIERRA reduce using rule 53 (operacion -> aritmetica .)
    COMA            reduce using rule 53 (operacion -> aritmetica .)
    LLAVE_CIERRA    reduce using rule 53 (operacion -> aritmetica .)


state 53

    (54) operacion -> booleana .

    IGUAL           reduce using rule 54 (operacion -> booleana .)
    SUMA            reduce using rule 54 (operacion -> booleana .)
    RESTA           reduce using rule 54 (operacion -> booleana .)
    MULTIPLICACION  reduce using rule 54 (operacion -> booleana .)
    DIVISION        reduce using rule 54 (operacion -> booleana .)
    CONJUNCION      reduce using rule 54 (operacion -> booleana .)
    DISYUNCION      reduce using rule 54 (operacion -> booleana .)
    MAYOR           reduce using rule 54 (operacion -> booleana .)
    MENOR           reduce using rule 54 (operacion -> booleana .)
    MAYOR_IGUAL     reduce using rule 54 (operacion -> booleana .)
    MENOR_IGUAL     reduce using rule 54 (operacion -> booleana .)
    PUNTO_Y_COMA    reduce using rule 54 (operacion -> booleana .)
    COMA            reduce using rule 54 (operacion -> booleana .)
    PARENTESIS_CIERRA reduce using rule 54 (operacion -> booleana .)
    LLAVE_CIERRA    reduce using rule 54 (operacion -> booleana .)


state 54

    (55) operacion -> comparacion .

    IGUAL           reduce using rule 55 (operacion -> comparacion .)
    SUMA            reduce using rule 55 (operacion -> comparacion .)
    RESTA           reduce using rule 55 (operacion -> comparacion .)
    MULTIPLICACION  reduce using rule 55 (operacion -> comparacion .)
    DIVISION        reduce using rule 55 (operacion -> comparacion .)
    CONJUNCION      reduce using rule 55 (operacion -> comparacion .)
    DISYUNCION      reduce using rule 55 (operacion -> comparacion .)
    MAYOR           reduce using rule 55 (operacion -> comparacion .)
    MENOR           reduce using rule 55 (operacion -> comparacion .)
    MAYOR_IGUAL     reduce using rule 55 (operacion -> comparacion .)
    MENOR_IGUAL     reduce using rule 55 (operacion -> comparacion .)
    PUNTO_Y_COMA    reduce using rule 55 (operacion -> comparacion .)
    PARENTESIS_CIERRA reduce using rule 55 (operacion -> comparacion .)
    COMA            reduce using rule 55 (operacion -> comparacion .)
    LLAVE_CIERRA    reduce using rule 55 (operacion -> comparacion .)


state 55

    (14) bool -> TR .

    IGUAL           reduce using rule 14 (bool -> TR .)
    SUMA            reduce using rule 14 (bool -> TR .)
    RESTA           reduce using rule 14 (bool -> TR .)
    MULTIPLICACION  reduce using rule 14 (bool -> TR .)
    DIVISION        reduce using rule 14 (bool -> TR .)
    CONJUNCION      reduce using rule 14 (bool -> TR .)
    DISYUNCION      reduce using rule 14 (bool -> TR .)
    MAYOR           reduce using rule 14 (bool -> TR .)
    MENOR           reduce using rule 14 (bool -> TR .)
    MAYOR_IGUAL     reduce using rule 14 (bool -> TR .)
    MENOR_IGUAL     reduce using rule 14 (bool -> TR .)
    PUNTO_Y_COMA    reduce using rule 14 (bool -> TR .)
    PARENTESIS_CIERRA reduce using rule 14 (bool -> TR .)
    COMA            reduce using rule 14 (bool -> TR .)
    LLAVE_CIERRA    reduce using rule 14 (bool -> TR .)


state 56

    (15) bool -> FL .

    IGUAL           reduce using rule 15 (bool -> FL .)
    SUMA            reduce using rule 15 (bool -> FL .)
    RESTA           reduce using rule 15 (bool -> FL .)
    MULTIPLICACION  reduce using rule 15 (bool -> FL .)
    DIVISION        reduce using rule 15 (bool -> FL .)
    CONJUNCION      reduce using rule 15 (bool -> FL .)
    DISYUNCION      reduce using rule 15 (bool -> FL .)
    MAYOR           reduce using rule 15 (bool -> FL .)
    MENOR           reduce using rule 15 (bool -> FL .)
    MAYOR_IGUAL     reduce using rule 15 (bool -> FL .)
    MENOR_IGUAL     reduce using rule 15 (bool -> FL .)
    PUNTO_Y_COMA    reduce using rule 15 (bool -> FL .)
    PARENTESIS_CIERRA reduce using rule 15 (bool -> FL .)
    COMA            reduce using rule 15 (bool -> FL .)
    LLAVE_CIERRA    reduce using rule 15 (bool -> FL .)


state 57

    (46) ajson_v -> LLAVE_ABRE . lista_v LLAVE_CIERRA
    (47) lista_v -> . elemento_v
    (48) lista_v -> . elemento_v COMA
    (49) lista_v -> . elemento_v COMA lista_v
    (50) elemento_v -> . clave_v DOS_PUNTOS valor
    (51) clave_v -> . CADENA_NO_COMILLAS
    (52) clave_v -> . CADENA_COMILLAS

    CADENA_NO_COMILLAS shift and go to state 90
    CADENA_COMILLAS shift and go to state 91

    lista_v                        shift and go to state 87
    elemento_v                     shift and go to state 88
    clave_v                        shift and go to state 89

state 58

    (70) booleana -> NEGACION . valor
    (26) valor -> . CADENA_COMILLAS
    (27) valor -> . num
    (28) valor -> . operacion
    (29) valor -> . bool
    (30) valor -> . NULL
    (31) valor -> . ajson_v
    (32) valor -> . CARACTER
    (33) valor -> . CADENA_NO_COMILLAS
    (34) valor -> . function_call
    (35) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (53) operacion -> . aritmetica
    (54) operacion -> . booleana
    (55) operacion -> . comparacion
    (56) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (14) bool -> . TR
    (15) bool -> . FL
    (46) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (88) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (89) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (57) aritmetica -> . valor operador1 valor
    (58) aritmetica -> . valor operador2 valor
    (69) booleana -> . valor comparador2 valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor comparador valor
    (64) comparacion -> . valor IGUAL valor

    CADENA_COMILLAS shift and go to state 40
    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    CADENA_NO_COMILLAS shift and go to state 47
    PARENTESIS_ABRE shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 92
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 48
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 59

    (78) condition -> IF PARENTESIS_ABRE expersion . PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (79) condition -> IF PARENTESIS_ABRE expersion . PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA

    PARENTESIS_CIERRA shift and go to state 93


state 60

    (80) expersion -> valor .
    (69) booleana -> valor . comparador2 valor
    (57) aritmetica -> valor . operador1 valor
    (58) aritmetica -> valor . operador2 valor
    (63) comparacion -> valor . comparador valor
    (64) comparacion -> valor . IGUAL valor
    (71) comparador2 -> . CONJUNCION
    (72) comparador2 -> . DISYUNCION
    (59) operador1 -> . SUMA
    (60) operador1 -> . RESTA
    (61) operador2 -> . MULTIPLICACION
    (62) operador2 -> . DIVISION
    (65) comparador -> . MAYOR
    (66) comparador -> . MENOR
    (67) comparador -> . MAYOR_IGUAL
    (68) comparador -> . MENOR_IGUAL

    PARENTESIS_CIERRA reduce using rule 80 (expersion -> valor .)
    IGUAL           shift and go to state 73
    CONJUNCION      shift and go to state 78
    DISYUNCION      shift and go to state 79
    SUMA            shift and go to state 74
    RESTA           shift and go to state 75
    MULTIPLICACION  shift and go to state 76
    DIVISION        shift and go to state 77
    MAYOR           shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR_IGUAL     shift and go to state 82
    MENOR_IGUAL     shift and go to state 83

    comparador2                    shift and go to state 71
    operador1                      shift and go to state 69
    operador2                      shift and go to state 70
    comparador                     shift and go to state 72

state 61

    (81) expersion -> booleana .
    (54) operacion -> booleana .

  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 54 (operacion -> booleana .)
    IGUAL           reduce using rule 54 (operacion -> booleana .)
    CONJUNCION      reduce using rule 54 (operacion -> booleana .)
    DISYUNCION      reduce using rule 54 (operacion -> booleana .)
    SUMA            reduce using rule 54 (operacion -> booleana .)
    RESTA           reduce using rule 54 (operacion -> booleana .)
    MULTIPLICACION  reduce using rule 54 (operacion -> booleana .)
    DIVISION        reduce using rule 54 (operacion -> booleana .)
    MAYOR           reduce using rule 54 (operacion -> booleana .)
    MENOR           reduce using rule 54 (operacion -> booleana .)
    MAYOR_IGUAL     reduce using rule 54 (operacion -> booleana .)
    MENOR_IGUAL     reduce using rule 54 (operacion -> booleana .)
    PARENTESIS_CIERRA reduce using rule 54 (operacion -> booleana .)

  ! PARENTESIS_CIERRA [ reduce using rule 81 (expersion -> booleana .) ]


state 62

    (82) expersion -> function_call .
    (34) valor -> function_call .

  ! reduce/reduce conflict for PARENTESIS_CIERRA resolved using rule 34 (valor -> function_call .)
    IGUAL           reduce using rule 34 (valor -> function_call .)
    CONJUNCION      reduce using rule 34 (valor -> function_call .)
    DISYUNCION      reduce using rule 34 (valor -> function_call .)
    SUMA            reduce using rule 34 (valor -> function_call .)
    RESTA           reduce using rule 34 (valor -> function_call .)
    MULTIPLICACION  reduce using rule 34 (valor -> function_call .)
    DIVISION        reduce using rule 34 (valor -> function_call .)
    MAYOR           reduce using rule 34 (valor -> function_call .)
    MENOR           reduce using rule 34 (valor -> function_call .)
    MAYOR_IGUAL     reduce using rule 34 (valor -> function_call .)
    MENOR_IGUAL     reduce using rule 34 (valor -> function_call .)
    PARENTESIS_CIERRA reduce using rule 34 (valor -> function_call .)

  ! PARENTESIS_CIERRA [ reduce using rule 82 (expersion -> function_call .) ]


state 63

    (83) loop -> WHILE PARENTESIS_ABRE expersion . PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA

    PARENTESIS_CIERRA shift and go to state 94


state 64

    (84) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE . id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (85) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE . id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (86) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE . PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (87) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE . PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (19) id -> . variable
    (20) id -> . variable COMA id
    (21) id -> . variable ASIGNACION valor
    (22) id -> . variable ASIGNACION valor COMA id
    (23) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (24) variable -> . CADENA_NO_COMILLAS

    PARENTESIS_CIERRA shift and go to state 96
    CADENA_NO_COMILLAS shift and go to state 13

    id                             shift and go to state 95
    variable                       shift and go to state 24

state 65

    (36) define -> TYPE CADENA_NO_COMILLAS ASIGNACION ajson .

    PUNTO_Y_COMA    reduce using rule 36 (define -> TYPE CADENA_NO_COMILLAS ASIGNACION ajson .)


state 66

    (37) ajson -> LLAVE_ABRE . lista LLAVE_CIERRA
    (38) lista -> . elemento
    (39) lista -> . elemento COMA
    (40) lista -> . elemento COMA lista
    (41) elemento -> . clave DOS_PUNTOS valor_t
    (44) clave -> . CADENA_NO_COMILLAS
    (45) clave -> . CADENA_COMILLAS

    CADENA_NO_COMILLAS shift and go to state 100
    CADENA_COMILLAS shift and go to state 101

    lista                          shift and go to state 97
    elemento                       shift and go to state 98
    clave                          shift and go to state 99

state 67

    (20) id -> variable COMA id .

    PUNTO_Y_COMA    reduce using rule 20 (id -> variable COMA id .)
    PARENTESIS_CIERRA reduce using rule 20 (id -> variable COMA id .)


state 68

    (21) id -> variable ASIGNACION valor .
    (22) id -> variable ASIGNACION valor . COMA id
    (57) aritmetica -> valor . operador1 valor
    (58) aritmetica -> valor . operador2 valor
    (69) booleana -> valor . comparador2 valor
    (63) comparacion -> valor . comparador valor
    (64) comparacion -> valor . IGUAL valor
    (59) operador1 -> . SUMA
    (60) operador1 -> . RESTA
    (61) operador2 -> . MULTIPLICACION
    (62) operador2 -> . DIVISION
    (71) comparador2 -> . CONJUNCION
    (72) comparador2 -> . DISYUNCION
    (65) comparador -> . MAYOR
    (66) comparador -> . MENOR
    (67) comparador -> . MAYOR_IGUAL
    (68) comparador -> . MENOR_IGUAL

    PUNTO_Y_COMA    reduce using rule 21 (id -> variable ASIGNACION valor .)
    PARENTESIS_CIERRA reduce using rule 21 (id -> variable ASIGNACION valor .)
    COMA            shift and go to state 102
    IGUAL           shift and go to state 73
    SUMA            shift and go to state 74
    RESTA           shift and go to state 75
    MULTIPLICACION  shift and go to state 76
    DIVISION        shift and go to state 77
    CONJUNCION      shift and go to state 78
    DISYUNCION      shift and go to state 79
    MAYOR           shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR_IGUAL     shift and go to state 82
    MENOR_IGUAL     shift and go to state 83

    operador1                      shift and go to state 69
    operador2                      shift and go to state 70
    comparador2                    shift and go to state 71
    comparador                     shift and go to state 72

state 69

    (57) aritmetica -> valor operador1 . valor
    (26) valor -> . CADENA_COMILLAS
    (27) valor -> . num
    (28) valor -> . operacion
    (29) valor -> . bool
    (30) valor -> . NULL
    (31) valor -> . ajson_v
    (32) valor -> . CARACTER
    (33) valor -> . CADENA_NO_COMILLAS
    (34) valor -> . function_call
    (35) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (53) operacion -> . aritmetica
    (54) operacion -> . booleana
    (55) operacion -> . comparacion
    (56) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (14) bool -> . TR
    (15) bool -> . FL
    (46) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (88) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (89) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (57) aritmetica -> . valor operador1 valor
    (58) aritmetica -> . valor operador2 valor
    (69) booleana -> . valor comparador2 valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor comparador valor
    (64) comparacion -> . valor IGUAL valor

    CADENA_COMILLAS shift and go to state 40
    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    CADENA_NO_COMILLAS shift and go to state 47
    PARENTESIS_ABRE shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 103
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 48
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 70

    (58) aritmetica -> valor operador2 . valor
    (26) valor -> . CADENA_COMILLAS
    (27) valor -> . num
    (28) valor -> . operacion
    (29) valor -> . bool
    (30) valor -> . NULL
    (31) valor -> . ajson_v
    (32) valor -> . CARACTER
    (33) valor -> . CADENA_NO_COMILLAS
    (34) valor -> . function_call
    (35) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (53) operacion -> . aritmetica
    (54) operacion -> . booleana
    (55) operacion -> . comparacion
    (56) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (14) bool -> . TR
    (15) bool -> . FL
    (46) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (88) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (89) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (57) aritmetica -> . valor operador1 valor
    (58) aritmetica -> . valor operador2 valor
    (69) booleana -> . valor comparador2 valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor comparador valor
    (64) comparacion -> . valor IGUAL valor

    CADENA_COMILLAS shift and go to state 40
    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    CADENA_NO_COMILLAS shift and go to state 47
    PARENTESIS_ABRE shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 104
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 48
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 71

    (69) booleana -> valor comparador2 . valor
    (26) valor -> . CADENA_COMILLAS
    (27) valor -> . num
    (28) valor -> . operacion
    (29) valor -> . bool
    (30) valor -> . NULL
    (31) valor -> . ajson_v
    (32) valor -> . CARACTER
    (33) valor -> . CADENA_NO_COMILLAS
    (34) valor -> . function_call
    (35) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (53) operacion -> . aritmetica
    (54) operacion -> . booleana
    (55) operacion -> . comparacion
    (56) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (14) bool -> . TR
    (15) bool -> . FL
    (46) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (88) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (89) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (57) aritmetica -> . valor operador1 valor
    (58) aritmetica -> . valor operador2 valor
    (69) booleana -> . valor comparador2 valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor comparador valor
    (64) comparacion -> . valor IGUAL valor

    CADENA_COMILLAS shift and go to state 40
    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    CADENA_NO_COMILLAS shift and go to state 47
    PARENTESIS_ABRE shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 105
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 48
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 72

    (63) comparacion -> valor comparador . valor
    (26) valor -> . CADENA_COMILLAS
    (27) valor -> . num
    (28) valor -> . operacion
    (29) valor -> . bool
    (30) valor -> . NULL
    (31) valor -> . ajson_v
    (32) valor -> . CARACTER
    (33) valor -> . CADENA_NO_COMILLAS
    (34) valor -> . function_call
    (35) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (53) operacion -> . aritmetica
    (54) operacion -> . booleana
    (55) operacion -> . comparacion
    (56) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (14) bool -> . TR
    (15) bool -> . FL
    (46) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (88) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (89) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (57) aritmetica -> . valor operador1 valor
    (58) aritmetica -> . valor operador2 valor
    (69) booleana -> . valor comparador2 valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor comparador valor
    (64) comparacion -> . valor IGUAL valor

    CADENA_COMILLAS shift and go to state 40
    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    CADENA_NO_COMILLAS shift and go to state 47
    PARENTESIS_ABRE shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 106
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 48
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 73

    (64) comparacion -> valor IGUAL . valor
    (26) valor -> . CADENA_COMILLAS
    (27) valor -> . num
    (28) valor -> . operacion
    (29) valor -> . bool
    (30) valor -> . NULL
    (31) valor -> . ajson_v
    (32) valor -> . CARACTER
    (33) valor -> . CADENA_NO_COMILLAS
    (34) valor -> . function_call
    (35) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (53) operacion -> . aritmetica
    (54) operacion -> . booleana
    (55) operacion -> . comparacion
    (56) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (14) bool -> . TR
    (15) bool -> . FL
    (46) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (88) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (89) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (57) aritmetica -> . valor operador1 valor
    (58) aritmetica -> . valor operador2 valor
    (69) booleana -> . valor comparador2 valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor comparador valor
    (64) comparacion -> . valor IGUAL valor

    CADENA_COMILLAS shift and go to state 40
    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    CADENA_NO_COMILLAS shift and go to state 47
    PARENTESIS_ABRE shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 107
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 48
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 74

    (59) operador1 -> SUMA .

    CADENA_COMILLAS reduce using rule 59 (operador1 -> SUMA .)
    NULL            reduce using rule 59 (operador1 -> SUMA .)
    CARACTER        reduce using rule 59 (operador1 -> SUMA .)
    CADENA_NO_COMILLAS reduce using rule 59 (operador1 -> SUMA .)
    PARENTESIS_ABRE reduce using rule 59 (operador1 -> SUMA .)
    ENTERO          reduce using rule 59 (operador1 -> SUMA .)
    DECIMAL         reduce using rule 59 (operador1 -> SUMA .)
    TR              reduce using rule 59 (operador1 -> SUMA .)
    FL              reduce using rule 59 (operador1 -> SUMA .)
    LLAVE_ABRE      reduce using rule 59 (operador1 -> SUMA .)
    NEGACION        reduce using rule 59 (operador1 -> SUMA .)


state 75

    (60) operador1 -> RESTA .

    CADENA_COMILLAS reduce using rule 60 (operador1 -> RESTA .)
    NULL            reduce using rule 60 (operador1 -> RESTA .)
    CARACTER        reduce using rule 60 (operador1 -> RESTA .)
    CADENA_NO_COMILLAS reduce using rule 60 (operador1 -> RESTA .)
    PARENTESIS_ABRE reduce using rule 60 (operador1 -> RESTA .)
    ENTERO          reduce using rule 60 (operador1 -> RESTA .)
    DECIMAL         reduce using rule 60 (operador1 -> RESTA .)
    TR              reduce using rule 60 (operador1 -> RESTA .)
    FL              reduce using rule 60 (operador1 -> RESTA .)
    LLAVE_ABRE      reduce using rule 60 (operador1 -> RESTA .)
    NEGACION        reduce using rule 60 (operador1 -> RESTA .)


state 76

    (61) operador2 -> MULTIPLICACION .

    CADENA_COMILLAS reduce using rule 61 (operador2 -> MULTIPLICACION .)
    NULL            reduce using rule 61 (operador2 -> MULTIPLICACION .)
    CARACTER        reduce using rule 61 (operador2 -> MULTIPLICACION .)
    CADENA_NO_COMILLAS reduce using rule 61 (operador2 -> MULTIPLICACION .)
    PARENTESIS_ABRE reduce using rule 61 (operador2 -> MULTIPLICACION .)
    ENTERO          reduce using rule 61 (operador2 -> MULTIPLICACION .)
    DECIMAL         reduce using rule 61 (operador2 -> MULTIPLICACION .)
    TR              reduce using rule 61 (operador2 -> MULTIPLICACION .)
    FL              reduce using rule 61 (operador2 -> MULTIPLICACION .)
    LLAVE_ABRE      reduce using rule 61 (operador2 -> MULTIPLICACION .)
    NEGACION        reduce using rule 61 (operador2 -> MULTIPLICACION .)


state 77

    (62) operador2 -> DIVISION .

    CADENA_COMILLAS reduce using rule 62 (operador2 -> DIVISION .)
    NULL            reduce using rule 62 (operador2 -> DIVISION .)
    CARACTER        reduce using rule 62 (operador2 -> DIVISION .)
    CADENA_NO_COMILLAS reduce using rule 62 (operador2 -> DIVISION .)
    PARENTESIS_ABRE reduce using rule 62 (operador2 -> DIVISION .)
    ENTERO          reduce using rule 62 (operador2 -> DIVISION .)
    DECIMAL         reduce using rule 62 (operador2 -> DIVISION .)
    TR              reduce using rule 62 (operador2 -> DIVISION .)
    FL              reduce using rule 62 (operador2 -> DIVISION .)
    LLAVE_ABRE      reduce using rule 62 (operador2 -> DIVISION .)
    NEGACION        reduce using rule 62 (operador2 -> DIVISION .)


state 78

    (71) comparador2 -> CONJUNCION .

    CADENA_COMILLAS reduce using rule 71 (comparador2 -> CONJUNCION .)
    NULL            reduce using rule 71 (comparador2 -> CONJUNCION .)
    CARACTER        reduce using rule 71 (comparador2 -> CONJUNCION .)
    CADENA_NO_COMILLAS reduce using rule 71 (comparador2 -> CONJUNCION .)
    PARENTESIS_ABRE reduce using rule 71 (comparador2 -> CONJUNCION .)
    ENTERO          reduce using rule 71 (comparador2 -> CONJUNCION .)
    DECIMAL         reduce using rule 71 (comparador2 -> CONJUNCION .)
    TR              reduce using rule 71 (comparador2 -> CONJUNCION .)
    FL              reduce using rule 71 (comparador2 -> CONJUNCION .)
    LLAVE_ABRE      reduce using rule 71 (comparador2 -> CONJUNCION .)
    NEGACION        reduce using rule 71 (comparador2 -> CONJUNCION .)


state 79

    (72) comparador2 -> DISYUNCION .

    CADENA_COMILLAS reduce using rule 72 (comparador2 -> DISYUNCION .)
    NULL            reduce using rule 72 (comparador2 -> DISYUNCION .)
    CARACTER        reduce using rule 72 (comparador2 -> DISYUNCION .)
    CADENA_NO_COMILLAS reduce using rule 72 (comparador2 -> DISYUNCION .)
    PARENTESIS_ABRE reduce using rule 72 (comparador2 -> DISYUNCION .)
    ENTERO          reduce using rule 72 (comparador2 -> DISYUNCION .)
    DECIMAL         reduce using rule 72 (comparador2 -> DISYUNCION .)
    TR              reduce using rule 72 (comparador2 -> DISYUNCION .)
    FL              reduce using rule 72 (comparador2 -> DISYUNCION .)
    LLAVE_ABRE      reduce using rule 72 (comparador2 -> DISYUNCION .)
    NEGACION        reduce using rule 72 (comparador2 -> DISYUNCION .)


state 80

    (65) comparador -> MAYOR .

    CADENA_COMILLAS reduce using rule 65 (comparador -> MAYOR .)
    NULL            reduce using rule 65 (comparador -> MAYOR .)
    CARACTER        reduce using rule 65 (comparador -> MAYOR .)
    CADENA_NO_COMILLAS reduce using rule 65 (comparador -> MAYOR .)
    PARENTESIS_ABRE reduce using rule 65 (comparador -> MAYOR .)
    ENTERO          reduce using rule 65 (comparador -> MAYOR .)
    DECIMAL         reduce using rule 65 (comparador -> MAYOR .)
    TR              reduce using rule 65 (comparador -> MAYOR .)
    FL              reduce using rule 65 (comparador -> MAYOR .)
    LLAVE_ABRE      reduce using rule 65 (comparador -> MAYOR .)
    NEGACION        reduce using rule 65 (comparador -> MAYOR .)


state 81

    (66) comparador -> MENOR .

    CADENA_COMILLAS reduce using rule 66 (comparador -> MENOR .)
    NULL            reduce using rule 66 (comparador -> MENOR .)
    CARACTER        reduce using rule 66 (comparador -> MENOR .)
    CADENA_NO_COMILLAS reduce using rule 66 (comparador -> MENOR .)
    PARENTESIS_ABRE reduce using rule 66 (comparador -> MENOR .)
    ENTERO          reduce using rule 66 (comparador -> MENOR .)
    DECIMAL         reduce using rule 66 (comparador -> MENOR .)
    TR              reduce using rule 66 (comparador -> MENOR .)
    FL              reduce using rule 66 (comparador -> MENOR .)
    LLAVE_ABRE      reduce using rule 66 (comparador -> MENOR .)
    NEGACION        reduce using rule 66 (comparador -> MENOR .)


state 82

    (67) comparador -> MAYOR_IGUAL .

    CADENA_COMILLAS reduce using rule 67 (comparador -> MAYOR_IGUAL .)
    NULL            reduce using rule 67 (comparador -> MAYOR_IGUAL .)
    CARACTER        reduce using rule 67 (comparador -> MAYOR_IGUAL .)
    CADENA_NO_COMILLAS reduce using rule 67 (comparador -> MAYOR_IGUAL .)
    PARENTESIS_ABRE reduce using rule 67 (comparador -> MAYOR_IGUAL .)
    ENTERO          reduce using rule 67 (comparador -> MAYOR_IGUAL .)
    DECIMAL         reduce using rule 67 (comparador -> MAYOR_IGUAL .)
    TR              reduce using rule 67 (comparador -> MAYOR_IGUAL .)
    FL              reduce using rule 67 (comparador -> MAYOR_IGUAL .)
    LLAVE_ABRE      reduce using rule 67 (comparador -> MAYOR_IGUAL .)
    NEGACION        reduce using rule 67 (comparador -> MAYOR_IGUAL .)


state 83

    (68) comparador -> MENOR_IGUAL .

    CADENA_COMILLAS reduce using rule 68 (comparador -> MENOR_IGUAL .)
    NULL            reduce using rule 68 (comparador -> MENOR_IGUAL .)
    CARACTER        reduce using rule 68 (comparador -> MENOR_IGUAL .)
    CADENA_NO_COMILLAS reduce using rule 68 (comparador -> MENOR_IGUAL .)
    PARENTESIS_ABRE reduce using rule 68 (comparador -> MENOR_IGUAL .)
    ENTERO          reduce using rule 68 (comparador -> MENOR_IGUAL .)
    DECIMAL         reduce using rule 68 (comparador -> MENOR_IGUAL .)
    TR              reduce using rule 68 (comparador -> MENOR_IGUAL .)
    FL              reduce using rule 68 (comparador -> MENOR_IGUAL .)
    LLAVE_ABRE      reduce using rule 68 (comparador -> MENOR_IGUAL .)
    NEGACION        reduce using rule 68 (comparador -> MENOR_IGUAL .)


state 84

    (88) function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE . valor PARENTESIS_CIERRA
    (89) function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE . PARENTESIS_CIERRA
    (26) valor -> . CADENA_COMILLAS
    (27) valor -> . num
    (28) valor -> . operacion
    (29) valor -> . bool
    (30) valor -> . NULL
    (31) valor -> . ajson_v
    (32) valor -> . CARACTER
    (33) valor -> . CADENA_NO_COMILLAS
    (34) valor -> . function_call
    (35) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (53) operacion -> . aritmetica
    (54) operacion -> . booleana
    (55) operacion -> . comparacion
    (56) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (14) bool -> . TR
    (15) bool -> . FL
    (46) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (88) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (89) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (57) aritmetica -> . valor operador1 valor
    (58) aritmetica -> . valor operador2 valor
    (69) booleana -> . valor comparador2 valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor comparador valor
    (64) comparacion -> . valor IGUAL valor

    PARENTESIS_CIERRA shift and go to state 109
    CADENA_COMILLAS shift and go to state 40
    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    CADENA_NO_COMILLAS shift and go to state 47
    PARENTESIS_ABRE shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 108
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 48
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 85

    (35) valor -> PARENTESIS_ABRE valor . PARENTESIS_CIERRA
    (57) aritmetica -> valor . operador1 valor
    (58) aritmetica -> valor . operador2 valor
    (69) booleana -> valor . comparador2 valor
    (63) comparacion -> valor . comparador valor
    (64) comparacion -> valor . IGUAL valor
    (59) operador1 -> . SUMA
    (60) operador1 -> . RESTA
    (61) operador2 -> . MULTIPLICACION
    (62) operador2 -> . DIVISION
    (71) comparador2 -> . CONJUNCION
    (72) comparador2 -> . DISYUNCION
    (65) comparador -> . MAYOR
    (66) comparador -> . MENOR
    (67) comparador -> . MAYOR_IGUAL
    (68) comparador -> . MENOR_IGUAL

    PARENTESIS_CIERRA shift and go to state 110
    IGUAL           shift and go to state 73
    SUMA            shift and go to state 74
    RESTA           shift and go to state 75
    MULTIPLICACION  shift and go to state 76
    DIVISION        shift and go to state 77
    CONJUNCION      shift and go to state 78
    DISYUNCION      shift and go to state 79
    MAYOR           shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR_IGUAL     shift and go to state 82
    MENOR_IGUAL     shift and go to state 83

    operador1                      shift and go to state 69
    operador2                      shift and go to state 70
    comparador2                    shift and go to state 71
    comparador                     shift and go to state 72

state 86

    (56) operacion -> PARENTESIS_ABRE operacion . PARENTESIS_CIERRA
    (28) valor -> operacion .

  ! shift/reduce conflict for PARENTESIS_CIERRA resolved as shift
    PARENTESIS_CIERRA shift and go to state 111
    IGUAL           reduce using rule 28 (valor -> operacion .)
    SUMA            reduce using rule 28 (valor -> operacion .)
    RESTA           reduce using rule 28 (valor -> operacion .)
    MULTIPLICACION  reduce using rule 28 (valor -> operacion .)
    DIVISION        reduce using rule 28 (valor -> operacion .)
    CONJUNCION      reduce using rule 28 (valor -> operacion .)
    DISYUNCION      reduce using rule 28 (valor -> operacion .)
    MAYOR           reduce using rule 28 (valor -> operacion .)
    MENOR           reduce using rule 28 (valor -> operacion .)
    MAYOR_IGUAL     reduce using rule 28 (valor -> operacion .)
    MENOR_IGUAL     reduce using rule 28 (valor -> operacion .)

  ! PARENTESIS_CIERRA [ reduce using rule 28 (valor -> operacion .) ]


state 87

    (46) ajson_v -> LLAVE_ABRE lista_v . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 112


state 88

    (47) lista_v -> elemento_v .
    (48) lista_v -> elemento_v . COMA
    (49) lista_v -> elemento_v . COMA lista_v

    LLAVE_CIERRA    reduce using rule 47 (lista_v -> elemento_v .)
    COMA            shift and go to state 113


state 89

    (50) elemento_v -> clave_v . DOS_PUNTOS valor

    DOS_PUNTOS      shift and go to state 114


state 90

    (51) clave_v -> CADENA_NO_COMILLAS .

    DOS_PUNTOS      reduce using rule 51 (clave_v -> CADENA_NO_COMILLAS .)


state 91

    (52) clave_v -> CADENA_COMILLAS .

    DOS_PUNTOS      reduce using rule 52 (clave_v -> CADENA_COMILLAS .)


state 92

    (70) booleana -> NEGACION valor .
    (57) aritmetica -> valor . operador1 valor
    (58) aritmetica -> valor . operador2 valor
    (69) booleana -> valor . comparador2 valor
    (63) comparacion -> valor . comparador valor
    (64) comparacion -> valor . IGUAL valor
    (59) operador1 -> . SUMA
    (60) operador1 -> . RESTA
    (61) operador2 -> . MULTIPLICACION
    (62) operador2 -> . DIVISION
    (71) comparador2 -> . CONJUNCION
    (72) comparador2 -> . DISYUNCION
    (65) comparador -> . MAYOR
    (66) comparador -> . MENOR
    (67) comparador -> . MAYOR_IGUAL
    (68) comparador -> . MENOR_IGUAL

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for CONJUNCION resolved as shift
  ! shift/reduce conflict for DISYUNCION resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
    PUNTO_Y_COMA    reduce using rule 70 (booleana -> NEGACION valor .)
    PARENTESIS_CIERRA reduce using rule 70 (booleana -> NEGACION valor .)
    COMA            reduce using rule 70 (booleana -> NEGACION valor .)
    LLAVE_CIERRA    reduce using rule 70 (booleana -> NEGACION valor .)
    IGUAL           shift and go to state 73
    SUMA            shift and go to state 74
    RESTA           shift and go to state 75
    MULTIPLICACION  shift and go to state 76
    DIVISION        shift and go to state 77
    CONJUNCION      shift and go to state 78
    DISYUNCION      shift and go to state 79
    MAYOR           shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR_IGUAL     shift and go to state 82
    MENOR_IGUAL     shift and go to state 83

  ! IGUAL           [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! SUMA            [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! RESTA           [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! MULTIPLICACION  [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! DIVISION        [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! CONJUNCION      [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! DISYUNCION      [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! MAYOR           [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! MENOR           [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! MAYOR_IGUAL     [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! MENOR_IGUAL     [ reduce using rule 70 (booleana -> NEGACION valor .) ]

    operador1                      shift and go to state 69
    operador2                      shift and go to state 70
    comparador2                    shift and go to state 71
    comparador                     shift and go to state 72

state 93

    (78) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA . LLAVE_ABRE statement LLAVE_CIERRA
    (79) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA . LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 115


state 94

    (83) loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA . LLAVE_ABRE statement LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 116


state 95

    (84) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id . PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (85) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id . PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    PARENTESIS_CIERRA shift and go to state 117


state 96

    (86) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA . DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (87) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA . DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    DOS_PUNTOS      shift and go to state 118


state 97

    (37) ajson -> LLAVE_ABRE lista . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 119


state 98

    (38) lista -> elemento .
    (39) lista -> elemento . COMA
    (40) lista -> elemento . COMA lista

    LLAVE_CIERRA    reduce using rule 38 (lista -> elemento .)
    COMA            shift and go to state 120


state 99

    (41) elemento -> clave . DOS_PUNTOS valor_t

    DOS_PUNTOS      shift and go to state 121


state 100

    (44) clave -> CADENA_NO_COMILLAS .

    DOS_PUNTOS      reduce using rule 44 (clave -> CADENA_NO_COMILLAS .)


state 101

    (45) clave -> CADENA_COMILLAS .

    DOS_PUNTOS      reduce using rule 45 (clave -> CADENA_COMILLAS .)


state 102

    (22) id -> variable ASIGNACION valor COMA . id
    (19) id -> . variable
    (20) id -> . variable COMA id
    (21) id -> . variable ASIGNACION valor
    (22) id -> . variable ASIGNACION valor COMA id
    (23) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (24) variable -> . CADENA_NO_COMILLAS

    CADENA_NO_COMILLAS shift and go to state 13

    variable                       shift and go to state 24
    id                             shift and go to state 122

state 103

    (57) aritmetica -> valor operador1 valor .
    (57) aritmetica -> valor . operador1 valor
    (58) aritmetica -> valor . operador2 valor
    (69) booleana -> valor . comparador2 valor
    (63) comparacion -> valor . comparador valor
    (64) comparacion -> valor . IGUAL valor
    (59) operador1 -> . SUMA
    (60) operador1 -> . RESTA
    (61) operador2 -> . MULTIPLICACION
    (62) operador2 -> . DIVISION
    (71) comparador2 -> . CONJUNCION
    (72) comparador2 -> . DISYUNCION
    (65) comparador -> . MAYOR
    (66) comparador -> . MENOR
    (67) comparador -> . MAYOR_IGUAL
    (68) comparador -> . MENOR_IGUAL

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for CONJUNCION resolved as shift
  ! shift/reduce conflict for DISYUNCION resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
    PUNTO_Y_COMA    reduce using rule 57 (aritmetica -> valor operador1 valor .)
    PARENTESIS_CIERRA reduce using rule 57 (aritmetica -> valor operador1 valor .)
    COMA            reduce using rule 57 (aritmetica -> valor operador1 valor .)
    LLAVE_CIERRA    reduce using rule 57 (aritmetica -> valor operador1 valor .)
    IGUAL           shift and go to state 73
    SUMA            shift and go to state 74
    RESTA           shift and go to state 75
    MULTIPLICACION  shift and go to state 76
    DIVISION        shift and go to state 77
    CONJUNCION      shift and go to state 78
    DISYUNCION      shift and go to state 79
    MAYOR           shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR_IGUAL     shift and go to state 82
    MENOR_IGUAL     shift and go to state 83

  ! IGUAL           [ reduce using rule 57 (aritmetica -> valor operador1 valor .) ]
  ! SUMA            [ reduce using rule 57 (aritmetica -> valor operador1 valor .) ]
  ! RESTA           [ reduce using rule 57 (aritmetica -> valor operador1 valor .) ]
  ! MULTIPLICACION  [ reduce using rule 57 (aritmetica -> valor operador1 valor .) ]
  ! DIVISION        [ reduce using rule 57 (aritmetica -> valor operador1 valor .) ]
  ! CONJUNCION      [ reduce using rule 57 (aritmetica -> valor operador1 valor .) ]
  ! DISYUNCION      [ reduce using rule 57 (aritmetica -> valor operador1 valor .) ]
  ! MAYOR           [ reduce using rule 57 (aritmetica -> valor operador1 valor .) ]
  ! MENOR           [ reduce using rule 57 (aritmetica -> valor operador1 valor .) ]
  ! MAYOR_IGUAL     [ reduce using rule 57 (aritmetica -> valor operador1 valor .) ]
  ! MENOR_IGUAL     [ reduce using rule 57 (aritmetica -> valor operador1 valor .) ]

    operador1                      shift and go to state 69
    operador2                      shift and go to state 70
    comparador2                    shift and go to state 71
    comparador                     shift and go to state 72

state 104

    (58) aritmetica -> valor operador2 valor .
    (57) aritmetica -> valor . operador1 valor
    (58) aritmetica -> valor . operador2 valor
    (69) booleana -> valor . comparador2 valor
    (63) comparacion -> valor . comparador valor
    (64) comparacion -> valor . IGUAL valor
    (59) operador1 -> . SUMA
    (60) operador1 -> . RESTA
    (61) operador2 -> . MULTIPLICACION
    (62) operador2 -> . DIVISION
    (71) comparador2 -> . CONJUNCION
    (72) comparador2 -> . DISYUNCION
    (65) comparador -> . MAYOR
    (66) comparador -> . MENOR
    (67) comparador -> . MAYOR_IGUAL
    (68) comparador -> . MENOR_IGUAL

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for CONJUNCION resolved as shift
  ! shift/reduce conflict for DISYUNCION resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
    PUNTO_Y_COMA    reduce using rule 58 (aritmetica -> valor operador2 valor .)
    PARENTESIS_CIERRA reduce using rule 58 (aritmetica -> valor operador2 valor .)
    COMA            reduce using rule 58 (aritmetica -> valor operador2 valor .)
    LLAVE_CIERRA    reduce using rule 58 (aritmetica -> valor operador2 valor .)
    IGUAL           shift and go to state 73
    SUMA            shift and go to state 74
    RESTA           shift and go to state 75
    MULTIPLICACION  shift and go to state 76
    DIVISION        shift and go to state 77
    CONJUNCION      shift and go to state 78
    DISYUNCION      shift and go to state 79
    MAYOR           shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR_IGUAL     shift and go to state 82
    MENOR_IGUAL     shift and go to state 83

  ! IGUAL           [ reduce using rule 58 (aritmetica -> valor operador2 valor .) ]
  ! SUMA            [ reduce using rule 58 (aritmetica -> valor operador2 valor .) ]
  ! RESTA           [ reduce using rule 58 (aritmetica -> valor operador2 valor .) ]
  ! MULTIPLICACION  [ reduce using rule 58 (aritmetica -> valor operador2 valor .) ]
  ! DIVISION        [ reduce using rule 58 (aritmetica -> valor operador2 valor .) ]
  ! CONJUNCION      [ reduce using rule 58 (aritmetica -> valor operador2 valor .) ]
  ! DISYUNCION      [ reduce using rule 58 (aritmetica -> valor operador2 valor .) ]
  ! MAYOR           [ reduce using rule 58 (aritmetica -> valor operador2 valor .) ]
  ! MENOR           [ reduce using rule 58 (aritmetica -> valor operador2 valor .) ]
  ! MAYOR_IGUAL     [ reduce using rule 58 (aritmetica -> valor operador2 valor .) ]
  ! MENOR_IGUAL     [ reduce using rule 58 (aritmetica -> valor operador2 valor .) ]

    operador2                      shift and go to state 70
    operador1                      shift and go to state 69
    comparador2                    shift and go to state 71
    comparador                     shift and go to state 72

state 105

    (69) booleana -> valor comparador2 valor .
    (57) aritmetica -> valor . operador1 valor
    (58) aritmetica -> valor . operador2 valor
    (69) booleana -> valor . comparador2 valor
    (63) comparacion -> valor . comparador valor
    (64) comparacion -> valor . IGUAL valor
    (59) operador1 -> . SUMA
    (60) operador1 -> . RESTA
    (61) operador2 -> . MULTIPLICACION
    (62) operador2 -> . DIVISION
    (71) comparador2 -> . CONJUNCION
    (72) comparador2 -> . DISYUNCION
    (65) comparador -> . MAYOR
    (66) comparador -> . MENOR
    (67) comparador -> . MAYOR_IGUAL
    (68) comparador -> . MENOR_IGUAL

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for CONJUNCION resolved as shift
  ! shift/reduce conflict for DISYUNCION resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
    PUNTO_Y_COMA    reduce using rule 69 (booleana -> valor comparador2 valor .)
    PARENTESIS_CIERRA reduce using rule 69 (booleana -> valor comparador2 valor .)
    COMA            reduce using rule 69 (booleana -> valor comparador2 valor .)
    LLAVE_CIERRA    reduce using rule 69 (booleana -> valor comparador2 valor .)
    IGUAL           shift and go to state 73
    SUMA            shift and go to state 74
    RESTA           shift and go to state 75
    MULTIPLICACION  shift and go to state 76
    DIVISION        shift and go to state 77
    CONJUNCION      shift and go to state 78
    DISYUNCION      shift and go to state 79
    MAYOR           shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR_IGUAL     shift and go to state 82
    MENOR_IGUAL     shift and go to state 83

  ! IGUAL           [ reduce using rule 69 (booleana -> valor comparador2 valor .) ]
  ! SUMA            [ reduce using rule 69 (booleana -> valor comparador2 valor .) ]
  ! RESTA           [ reduce using rule 69 (booleana -> valor comparador2 valor .) ]
  ! MULTIPLICACION  [ reduce using rule 69 (booleana -> valor comparador2 valor .) ]
  ! DIVISION        [ reduce using rule 69 (booleana -> valor comparador2 valor .) ]
  ! CONJUNCION      [ reduce using rule 69 (booleana -> valor comparador2 valor .) ]
  ! DISYUNCION      [ reduce using rule 69 (booleana -> valor comparador2 valor .) ]
  ! MAYOR           [ reduce using rule 69 (booleana -> valor comparador2 valor .) ]
  ! MENOR           [ reduce using rule 69 (booleana -> valor comparador2 valor .) ]
  ! MAYOR_IGUAL     [ reduce using rule 69 (booleana -> valor comparador2 valor .) ]
  ! MENOR_IGUAL     [ reduce using rule 69 (booleana -> valor comparador2 valor .) ]

    comparador2                    shift and go to state 71
    operador1                      shift and go to state 69
    operador2                      shift and go to state 70
    comparador                     shift and go to state 72

state 106

    (63) comparacion -> valor comparador valor .
    (57) aritmetica -> valor . operador1 valor
    (58) aritmetica -> valor . operador2 valor
    (69) booleana -> valor . comparador2 valor
    (63) comparacion -> valor . comparador valor
    (64) comparacion -> valor . IGUAL valor
    (59) operador1 -> . SUMA
    (60) operador1 -> . RESTA
    (61) operador2 -> . MULTIPLICACION
    (62) operador2 -> . DIVISION
    (71) comparador2 -> . CONJUNCION
    (72) comparador2 -> . DISYUNCION
    (65) comparador -> . MAYOR
    (66) comparador -> . MENOR
    (67) comparador -> . MAYOR_IGUAL
    (68) comparador -> . MENOR_IGUAL

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for CONJUNCION resolved as shift
  ! shift/reduce conflict for DISYUNCION resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
    PUNTO_Y_COMA    reduce using rule 63 (comparacion -> valor comparador valor .)
    PARENTESIS_CIERRA reduce using rule 63 (comparacion -> valor comparador valor .)
    COMA            reduce using rule 63 (comparacion -> valor comparador valor .)
    LLAVE_CIERRA    reduce using rule 63 (comparacion -> valor comparador valor .)
    IGUAL           shift and go to state 73
    SUMA            shift and go to state 74
    RESTA           shift and go to state 75
    MULTIPLICACION  shift and go to state 76
    DIVISION        shift and go to state 77
    CONJUNCION      shift and go to state 78
    DISYUNCION      shift and go to state 79
    MAYOR           shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR_IGUAL     shift and go to state 82
    MENOR_IGUAL     shift and go to state 83

  ! IGUAL           [ reduce using rule 63 (comparacion -> valor comparador valor .) ]
  ! SUMA            [ reduce using rule 63 (comparacion -> valor comparador valor .) ]
  ! RESTA           [ reduce using rule 63 (comparacion -> valor comparador valor .) ]
  ! MULTIPLICACION  [ reduce using rule 63 (comparacion -> valor comparador valor .) ]
  ! DIVISION        [ reduce using rule 63 (comparacion -> valor comparador valor .) ]
  ! CONJUNCION      [ reduce using rule 63 (comparacion -> valor comparador valor .) ]
  ! DISYUNCION      [ reduce using rule 63 (comparacion -> valor comparador valor .) ]
  ! MAYOR           [ reduce using rule 63 (comparacion -> valor comparador valor .) ]
  ! MENOR           [ reduce using rule 63 (comparacion -> valor comparador valor .) ]
  ! MAYOR_IGUAL     [ reduce using rule 63 (comparacion -> valor comparador valor .) ]
  ! MENOR_IGUAL     [ reduce using rule 63 (comparacion -> valor comparador valor .) ]

    comparador                     shift and go to state 72
    operador1                      shift and go to state 69
    operador2                      shift and go to state 70
    comparador2                    shift and go to state 71

state 107

    (64) comparacion -> valor IGUAL valor .
    (57) aritmetica -> valor . operador1 valor
    (58) aritmetica -> valor . operador2 valor
    (69) booleana -> valor . comparador2 valor
    (63) comparacion -> valor . comparador valor
    (64) comparacion -> valor . IGUAL valor
    (59) operador1 -> . SUMA
    (60) operador1 -> . RESTA
    (61) operador2 -> . MULTIPLICACION
    (62) operador2 -> . DIVISION
    (71) comparador2 -> . CONJUNCION
    (72) comparador2 -> . DISYUNCION
    (65) comparador -> . MAYOR
    (66) comparador -> . MENOR
    (67) comparador -> . MAYOR_IGUAL
    (68) comparador -> . MENOR_IGUAL

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for CONJUNCION resolved as shift
  ! shift/reduce conflict for DISYUNCION resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
    PUNTO_Y_COMA    reduce using rule 64 (comparacion -> valor IGUAL valor .)
    PARENTESIS_CIERRA reduce using rule 64 (comparacion -> valor IGUAL valor .)
    COMA            reduce using rule 64 (comparacion -> valor IGUAL valor .)
    LLAVE_CIERRA    reduce using rule 64 (comparacion -> valor IGUAL valor .)
    IGUAL           shift and go to state 73
    SUMA            shift and go to state 74
    RESTA           shift and go to state 75
    MULTIPLICACION  shift and go to state 76
    DIVISION        shift and go to state 77
    CONJUNCION      shift and go to state 78
    DISYUNCION      shift and go to state 79
    MAYOR           shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR_IGUAL     shift and go to state 82
    MENOR_IGUAL     shift and go to state 83

  ! IGUAL           [ reduce using rule 64 (comparacion -> valor IGUAL valor .) ]
  ! SUMA            [ reduce using rule 64 (comparacion -> valor IGUAL valor .) ]
  ! RESTA           [ reduce using rule 64 (comparacion -> valor IGUAL valor .) ]
  ! MULTIPLICACION  [ reduce using rule 64 (comparacion -> valor IGUAL valor .) ]
  ! DIVISION        [ reduce using rule 64 (comparacion -> valor IGUAL valor .) ]
  ! CONJUNCION      [ reduce using rule 64 (comparacion -> valor IGUAL valor .) ]
  ! DISYUNCION      [ reduce using rule 64 (comparacion -> valor IGUAL valor .) ]
  ! MAYOR           [ reduce using rule 64 (comparacion -> valor IGUAL valor .) ]
  ! MENOR           [ reduce using rule 64 (comparacion -> valor IGUAL valor .) ]
  ! MAYOR_IGUAL     [ reduce using rule 64 (comparacion -> valor IGUAL valor .) ]
  ! MENOR_IGUAL     [ reduce using rule 64 (comparacion -> valor IGUAL valor .) ]

    operador1                      shift and go to state 69
    operador2                      shift and go to state 70
    comparador2                    shift and go to state 71
    comparador                     shift and go to state 72

state 108

    (88) function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor . PARENTESIS_CIERRA
    (57) aritmetica -> valor . operador1 valor
    (58) aritmetica -> valor . operador2 valor
    (69) booleana -> valor . comparador2 valor
    (63) comparacion -> valor . comparador valor
    (64) comparacion -> valor . IGUAL valor
    (59) operador1 -> . SUMA
    (60) operador1 -> . RESTA
    (61) operador2 -> . MULTIPLICACION
    (62) operador2 -> . DIVISION
    (71) comparador2 -> . CONJUNCION
    (72) comparador2 -> . DISYUNCION
    (65) comparador -> . MAYOR
    (66) comparador -> . MENOR
    (67) comparador -> . MAYOR_IGUAL
    (68) comparador -> . MENOR_IGUAL

    PARENTESIS_CIERRA shift and go to state 123
    IGUAL           shift and go to state 73
    SUMA            shift and go to state 74
    RESTA           shift and go to state 75
    MULTIPLICACION  shift and go to state 76
    DIVISION        shift and go to state 77
    CONJUNCION      shift and go to state 78
    DISYUNCION      shift and go to state 79
    MAYOR           shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR_IGUAL     shift and go to state 82
    MENOR_IGUAL     shift and go to state 83

    operador1                      shift and go to state 69
    operador2                      shift and go to state 70
    comparador2                    shift and go to state 71
    comparador                     shift and go to state 72

state 109

    (89) function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .

    IGUAL           reduce using rule 89 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    SUMA            reduce using rule 89 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    RESTA           reduce using rule 89 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    MULTIPLICACION  reduce using rule 89 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    DIVISION        reduce using rule 89 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    CONJUNCION      reduce using rule 89 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    DISYUNCION      reduce using rule 89 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    MAYOR           reduce using rule 89 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    MENOR           reduce using rule 89 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    MAYOR_IGUAL     reduce using rule 89 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    MENOR_IGUAL     reduce using rule 89 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    PUNTO_Y_COMA    reduce using rule 89 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 89 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    COMA            reduce using rule 89 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    LLAVE_CIERRA    reduce using rule 89 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)


state 110

    (35) valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .

    IGUAL           reduce using rule 35 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    SUMA            reduce using rule 35 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    RESTA           reduce using rule 35 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    MULTIPLICACION  reduce using rule 35 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    DIVISION        reduce using rule 35 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    CONJUNCION      reduce using rule 35 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    DISYUNCION      reduce using rule 35 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    MAYOR           reduce using rule 35 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    MENOR           reduce using rule 35 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    MAYOR_IGUAL     reduce using rule 35 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    MENOR_IGUAL     reduce using rule 35 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    PUNTO_Y_COMA    reduce using rule 35 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 35 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    COMA            reduce using rule 35 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    LLAVE_CIERRA    reduce using rule 35 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)


state 111

    (56) operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA .

    IGUAL           reduce using rule 56 (operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA .)
    SUMA            reduce using rule 56 (operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA .)
    RESTA           reduce using rule 56 (operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA .)
    MULTIPLICACION  reduce using rule 56 (operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA .)
    DIVISION        reduce using rule 56 (operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA .)
    CONJUNCION      reduce using rule 56 (operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA .)
    DISYUNCION      reduce using rule 56 (operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA .)
    MAYOR           reduce using rule 56 (operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA .)
    MENOR           reduce using rule 56 (operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA .)
    MAYOR_IGUAL     reduce using rule 56 (operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA .)
    MENOR_IGUAL     reduce using rule 56 (operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA .)
    PUNTO_Y_COMA    reduce using rule 56 (operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 56 (operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA .)
    COMA            reduce using rule 56 (operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA .)
    LLAVE_CIERRA    reduce using rule 56 (operacion -> PARENTESIS_ABRE operacion PARENTESIS_CIERRA .)


state 112

    (46) ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .

    IGUAL           reduce using rule 46 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    SUMA            reduce using rule 46 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    RESTA           reduce using rule 46 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    MULTIPLICACION  reduce using rule 46 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    DIVISION        reduce using rule 46 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    CONJUNCION      reduce using rule 46 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    DISYUNCION      reduce using rule 46 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    MAYOR           reduce using rule 46 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    MENOR           reduce using rule 46 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    MAYOR_IGUAL     reduce using rule 46 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    MENOR_IGUAL     reduce using rule 46 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    PUNTO_Y_COMA    reduce using rule 46 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 46 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    COMA            reduce using rule 46 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 46 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)


state 113

    (48) lista_v -> elemento_v COMA .
    (49) lista_v -> elemento_v COMA . lista_v
    (47) lista_v -> . elemento_v
    (48) lista_v -> . elemento_v COMA
    (49) lista_v -> . elemento_v COMA lista_v
    (50) elemento_v -> . clave_v DOS_PUNTOS valor
    (51) clave_v -> . CADENA_NO_COMILLAS
    (52) clave_v -> . CADENA_COMILLAS

    LLAVE_CIERRA    reduce using rule 48 (lista_v -> elemento_v COMA .)
    CADENA_NO_COMILLAS shift and go to state 90
    CADENA_COMILLAS shift and go to state 91

    elemento_v                     shift and go to state 88
    lista_v                        shift and go to state 124
    clave_v                        shift and go to state 89

state 114

    (50) elemento_v -> clave_v DOS_PUNTOS . valor
    (26) valor -> . CADENA_COMILLAS
    (27) valor -> . num
    (28) valor -> . operacion
    (29) valor -> . bool
    (30) valor -> . NULL
    (31) valor -> . ajson_v
    (32) valor -> . CARACTER
    (33) valor -> . CADENA_NO_COMILLAS
    (34) valor -> . function_call
    (35) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (53) operacion -> . aritmetica
    (54) operacion -> . booleana
    (55) operacion -> . comparacion
    (56) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (14) bool -> . TR
    (15) bool -> . FL
    (46) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (88) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (89) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (57) aritmetica -> . valor operador1 valor
    (58) aritmetica -> . valor operador2 valor
    (69) booleana -> . valor comparador2 valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor comparador valor
    (64) comparacion -> . valor IGUAL valor

    CADENA_COMILLAS shift and go to state 40
    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    CADENA_NO_COMILLAS shift and go to state 47
    PARENTESIS_ABRE shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 125
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 48
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 115

    (78) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE . statement LLAVE_CIERRA
    (79) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE . statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (36) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (18) declare -> . LET id
    (25) assign -> . variable ASIGNACION valor
    (78) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (79) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (83) loop -> . WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (84) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (85) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (86) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (87) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (23) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (24) variable -> . CADENA_NO_COMILLAS

    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    statement                      shift and go to state 126
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 116

    (83) loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE . statement LLAVE_CIERRA
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (36) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (18) declare -> . LET id
    (25) assign -> . variable ASIGNACION valor
    (78) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (79) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (83) loop -> . WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (84) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (85) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (86) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (87) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (23) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (24) variable -> . CADENA_NO_COMILLAS

    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    statement                      shift and go to state 127
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 117

    (84) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA . DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (85) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA . DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    DOS_PUNTOS      shift and go to state 128


state 118

    (86) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS . tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (87) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS . tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (73) tipo -> . INT
    (74) tipo -> . FLOAT
    (75) tipo -> . CHARACTER
    (76) tipo -> . BOOLEAN
    (77) tipo -> . CADENA_NO_COMILLAS

    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    CHARACTER       shift and go to state 35
    BOOLEAN         shift and go to state 36
    CADENA_NO_COMILLAS shift and go to state 31

    tipo                           shift and go to state 129

state 119

    (37) ajson -> LLAVE_ABRE lista LLAVE_CIERRA .

    PUNTO_Y_COMA    reduce using rule 37 (ajson -> LLAVE_ABRE lista LLAVE_CIERRA .)
    COMA            reduce using rule 37 (ajson -> LLAVE_ABRE lista LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 37 (ajson -> LLAVE_ABRE lista LLAVE_CIERRA .)


state 120

    (39) lista -> elemento COMA .
    (40) lista -> elemento COMA . lista
    (38) lista -> . elemento
    (39) lista -> . elemento COMA
    (40) lista -> . elemento COMA lista
    (41) elemento -> . clave DOS_PUNTOS valor_t
    (44) clave -> . CADENA_NO_COMILLAS
    (45) clave -> . CADENA_COMILLAS

    LLAVE_CIERRA    reduce using rule 39 (lista -> elemento COMA .)
    CADENA_NO_COMILLAS shift and go to state 100
    CADENA_COMILLAS shift and go to state 101

    elemento                       shift and go to state 98
    lista                          shift and go to state 130
    clave                          shift and go to state 99

state 121

    (41) elemento -> clave DOS_PUNTOS . valor_t
    (42) valor_t -> . tipo
    (43) valor_t -> . ajson
    (73) tipo -> . INT
    (74) tipo -> . FLOAT
    (75) tipo -> . CHARACTER
    (76) tipo -> . BOOLEAN
    (77) tipo -> . CADENA_NO_COMILLAS
    (37) ajson -> . LLAVE_ABRE lista LLAVE_CIERRA

    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    CHARACTER       shift and go to state 35
    BOOLEAN         shift and go to state 36
    CADENA_NO_COMILLAS shift and go to state 31
    LLAVE_ABRE      shift and go to state 66

    valor_t                        shift and go to state 131
    tipo                           shift and go to state 132
    ajson                          shift and go to state 133

state 122

    (22) id -> variable ASIGNACION valor COMA id .

    PUNTO_Y_COMA    reduce using rule 22 (id -> variable ASIGNACION valor COMA id .)
    PARENTESIS_CIERRA reduce using rule 22 (id -> variable ASIGNACION valor COMA id .)


state 123

    (88) function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA .

    IGUAL           reduce using rule 88 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    SUMA            reduce using rule 88 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    RESTA           reduce using rule 88 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    MULTIPLICACION  reduce using rule 88 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    DIVISION        reduce using rule 88 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    CONJUNCION      reduce using rule 88 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    DISYUNCION      reduce using rule 88 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    MAYOR           reduce using rule 88 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    MENOR           reduce using rule 88 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    MAYOR_IGUAL     reduce using rule 88 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    MENOR_IGUAL     reduce using rule 88 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    PUNTO_Y_COMA    reduce using rule 88 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 88 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    COMA            reduce using rule 88 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    LLAVE_CIERRA    reduce using rule 88 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA .)


state 124

    (49) lista_v -> elemento_v COMA lista_v .

    LLAVE_CIERRA    reduce using rule 49 (lista_v -> elemento_v COMA lista_v .)


state 125

    (50) elemento_v -> clave_v DOS_PUNTOS valor .
    (57) aritmetica -> valor . operador1 valor
    (58) aritmetica -> valor . operador2 valor
    (69) booleana -> valor . comparador2 valor
    (63) comparacion -> valor . comparador valor
    (64) comparacion -> valor . IGUAL valor
    (59) operador1 -> . SUMA
    (60) operador1 -> . RESTA
    (61) operador2 -> . MULTIPLICACION
    (62) operador2 -> . DIVISION
    (71) comparador2 -> . CONJUNCION
    (72) comparador2 -> . DISYUNCION
    (65) comparador -> . MAYOR
    (66) comparador -> . MENOR
    (67) comparador -> . MAYOR_IGUAL
    (68) comparador -> . MENOR_IGUAL

    COMA            reduce using rule 50 (elemento_v -> clave_v DOS_PUNTOS valor .)
    LLAVE_CIERRA    reduce using rule 50 (elemento_v -> clave_v DOS_PUNTOS valor .)
    IGUAL           shift and go to state 73
    SUMA            shift and go to state 74
    RESTA           shift and go to state 75
    MULTIPLICACION  shift and go to state 76
    DIVISION        shift and go to state 77
    CONJUNCION      shift and go to state 78
    DISYUNCION      shift and go to state 79
    MAYOR           shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR_IGUAL     shift and go to state 82
    MENOR_IGUAL     shift and go to state 83

    operador1                      shift and go to state 69
    operador2                      shift and go to state 70
    comparador2                    shift and go to state 71
    comparador                     shift and go to state 72

state 126

    (78) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement . LLAVE_CIERRA
    (79) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement . LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 134


state 127

    (83) loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 135


state 128

    (84) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS . tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (85) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS . tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (73) tipo -> . INT
    (74) tipo -> . FLOAT
    (75) tipo -> . CHARACTER
    (76) tipo -> . BOOLEAN
    (77) tipo -> . CADENA_NO_COMILLAS

    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    CHARACTER       shift and go to state 35
    BOOLEAN         shift and go to state 36
    CADENA_NO_COMILLAS shift and go to state 31

    tipo                           shift and go to state 136

state 129

    (86) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo . LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (87) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo . LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 137


state 130

    (40) lista -> elemento COMA lista .

    LLAVE_CIERRA    reduce using rule 40 (lista -> elemento COMA lista .)


state 131

    (41) elemento -> clave DOS_PUNTOS valor_t .

    COMA            reduce using rule 41 (elemento -> clave DOS_PUNTOS valor_t .)
    LLAVE_CIERRA    reduce using rule 41 (elemento -> clave DOS_PUNTOS valor_t .)


state 132

    (42) valor_t -> tipo .

    COMA            reduce using rule 42 (valor_t -> tipo .)
    LLAVE_CIERRA    reduce using rule 42 (valor_t -> tipo .)


state 133

    (43) valor_t -> ajson .

    COMA            reduce using rule 43 (valor_t -> ajson .)
    LLAVE_CIERRA    reduce using rule 43 (valor_t -> ajson .)


state 134

    (78) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .
    (79) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA . ELSE LLAVE_ABRE statement LLAVE_CIERRA

    TYPE            reduce using rule 78 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    LET             reduce using rule 78 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    IF              reduce using rule 78 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    WHILE           reduce using rule 78 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    FUNCTION        reduce using rule 78 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 78 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    $end            reduce using rule 78 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 78 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    RETURN          reduce using rule 78 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    ELSE            shift and go to state 138


state 135

    (83) loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .

    TYPE            reduce using rule 83 (loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    LET             reduce using rule 83 (loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    IF              reduce using rule 83 (loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    WHILE           reduce using rule 83 (loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    FUNCTION        reduce using rule 83 (loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 83 (loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    $end            reduce using rule 83 (loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 83 (loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    RETURN          reduce using rule 83 (loop -> WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)


state 136

    (84) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo . LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (85) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo . LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 139


state 137

    (86) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE . statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (87) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE . RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (36) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (18) declare -> . LET id
    (25) assign -> . variable ASIGNACION valor
    (78) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (79) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (83) loop -> . WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (84) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (85) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (86) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (87) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (23) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (24) variable -> . CADENA_NO_COMILLAS

    RETURN          shift and go to state 141
    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    statement                      shift and go to state 140
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 138

    (79) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE . LLAVE_ABRE statement LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 142


state 139

    (84) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE . statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (85) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE . RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (36) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (18) declare -> . LET id
    (25) assign -> . variable ASIGNACION valor
    (78) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (79) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (83) loop -> . WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (84) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (85) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (86) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (87) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (23) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (24) variable -> . CADENA_NO_COMILLAS

    RETURN          shift and go to state 144
    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    statement                      shift and go to state 143
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 140

    (86) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement . RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    RETURN          shift and go to state 145


state 141

    (87) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN . valor PUNTO_Y_COMA LLAVE_CIERRA
    (26) valor -> . CADENA_COMILLAS
    (27) valor -> . num
    (28) valor -> . operacion
    (29) valor -> . bool
    (30) valor -> . NULL
    (31) valor -> . ajson_v
    (32) valor -> . CARACTER
    (33) valor -> . CADENA_NO_COMILLAS
    (34) valor -> . function_call
    (35) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (53) operacion -> . aritmetica
    (54) operacion -> . booleana
    (55) operacion -> . comparacion
    (56) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (14) bool -> . TR
    (15) bool -> . FL
    (46) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (88) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (89) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (57) aritmetica -> . valor operador1 valor
    (58) aritmetica -> . valor operador2 valor
    (69) booleana -> . valor comparador2 valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor comparador valor
    (64) comparacion -> . valor IGUAL valor

    CADENA_COMILLAS shift and go to state 40
    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    CADENA_NO_COMILLAS shift and go to state 47
    PARENTESIS_ABRE shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 146
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 48
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 142

    (79) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE . statement LLAVE_CIERRA
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (36) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (18) declare -> . LET id
    (25) assign -> . variable ASIGNACION valor
    (78) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (79) condition -> . IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (83) loop -> . WHILE PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (84) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (85) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (86) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (87) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (23) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo
    (24) variable -> . CADENA_NO_COMILLAS

    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    statement                      shift and go to state 147
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 143

    (84) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement . RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    RETURN          shift and go to state 148


state 144

    (85) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN . valor PUNTO_Y_COMA LLAVE_CIERRA
    (26) valor -> . CADENA_COMILLAS
    (27) valor -> . num
    (28) valor -> . operacion
    (29) valor -> . bool
    (30) valor -> . NULL
    (31) valor -> . ajson_v
    (32) valor -> . CARACTER
    (33) valor -> . CADENA_NO_COMILLAS
    (34) valor -> . function_call
    (35) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (53) operacion -> . aritmetica
    (54) operacion -> . booleana
    (55) operacion -> . comparacion
    (56) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (14) bool -> . TR
    (15) bool -> . FL
    (46) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (88) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (89) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (57) aritmetica -> . valor operador1 valor
    (58) aritmetica -> . valor operador2 valor
    (69) booleana -> . valor comparador2 valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor comparador valor
    (64) comparacion -> . valor IGUAL valor

    CADENA_COMILLAS shift and go to state 40
    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    CADENA_NO_COMILLAS shift and go to state 47
    PARENTESIS_ABRE shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 149
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 48
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 145

    (86) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN . valor PUNTO_Y_COMA LLAVE_CIERRA
    (26) valor -> . CADENA_COMILLAS
    (27) valor -> . num
    (28) valor -> . operacion
    (29) valor -> . bool
    (30) valor -> . NULL
    (31) valor -> . ajson_v
    (32) valor -> . CARACTER
    (33) valor -> . CADENA_NO_COMILLAS
    (34) valor -> . function_call
    (35) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (53) operacion -> . aritmetica
    (54) operacion -> . booleana
    (55) operacion -> . comparacion
    (56) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (14) bool -> . TR
    (15) bool -> . FL
    (46) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (88) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (89) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (57) aritmetica -> . valor operador1 valor
    (58) aritmetica -> . valor operador2 valor
    (69) booleana -> . valor comparador2 valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor comparador valor
    (64) comparacion -> . valor IGUAL valor

    CADENA_COMILLAS shift and go to state 40
    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    CADENA_NO_COMILLAS shift and go to state 47
    PARENTESIS_ABRE shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 150
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 48
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 146

    (87) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor . PUNTO_Y_COMA LLAVE_CIERRA
    (57) aritmetica -> valor . operador1 valor
    (58) aritmetica -> valor . operador2 valor
    (69) booleana -> valor . comparador2 valor
    (63) comparacion -> valor . comparador valor
    (64) comparacion -> valor . IGUAL valor
    (59) operador1 -> . SUMA
    (60) operador1 -> . RESTA
    (61) operador2 -> . MULTIPLICACION
    (62) operador2 -> . DIVISION
    (71) comparador2 -> . CONJUNCION
    (72) comparador2 -> . DISYUNCION
    (65) comparador -> . MAYOR
    (66) comparador -> . MENOR
    (67) comparador -> . MAYOR_IGUAL
    (68) comparador -> . MENOR_IGUAL

    PUNTO_Y_COMA    shift and go to state 151
    IGUAL           shift and go to state 73
    SUMA            shift and go to state 74
    RESTA           shift and go to state 75
    MULTIPLICACION  shift and go to state 76
    DIVISION        shift and go to state 77
    CONJUNCION      shift and go to state 78
    DISYUNCION      shift and go to state 79
    MAYOR           shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR_IGUAL     shift and go to state 82
    MENOR_IGUAL     shift and go to state 83

    operador1                      shift and go to state 69
    operador2                      shift and go to state 70
    comparador2                    shift and go to state 71
    comparador                     shift and go to state 72

state 147

    (79) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 152


state 148

    (84) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN . valor PUNTO_Y_COMA LLAVE_CIERRA
    (26) valor -> . CADENA_COMILLAS
    (27) valor -> . num
    (28) valor -> . operacion
    (29) valor -> . bool
    (30) valor -> . NULL
    (31) valor -> . ajson_v
    (32) valor -> . CARACTER
    (33) valor -> . CADENA_NO_COMILLAS
    (34) valor -> . function_call
    (35) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (53) operacion -> . aritmetica
    (54) operacion -> . booleana
    (55) operacion -> . comparacion
    (56) operacion -> . PARENTESIS_ABRE operacion PARENTESIS_CIERRA
    (14) bool -> . TR
    (15) bool -> . FL
    (46) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (88) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (89) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (57) aritmetica -> . valor operador1 valor
    (58) aritmetica -> . valor operador2 valor
    (69) booleana -> . valor comparador2 valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor comparador valor
    (64) comparacion -> . valor IGUAL valor

    CADENA_COMILLAS shift and go to state 40
    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    CADENA_NO_COMILLAS shift and go to state 47
    PARENTESIS_ABRE shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 153
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 48
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 149

    (85) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor . PUNTO_Y_COMA LLAVE_CIERRA
    (57) aritmetica -> valor . operador1 valor
    (58) aritmetica -> valor . operador2 valor
    (69) booleana -> valor . comparador2 valor
    (63) comparacion -> valor . comparador valor
    (64) comparacion -> valor . IGUAL valor
    (59) operador1 -> . SUMA
    (60) operador1 -> . RESTA
    (61) operador2 -> . MULTIPLICACION
    (62) operador2 -> . DIVISION
    (71) comparador2 -> . CONJUNCION
    (72) comparador2 -> . DISYUNCION
    (65) comparador -> . MAYOR
    (66) comparador -> . MENOR
    (67) comparador -> . MAYOR_IGUAL
    (68) comparador -> . MENOR_IGUAL

    PUNTO_Y_COMA    shift and go to state 154
    IGUAL           shift and go to state 73
    SUMA            shift and go to state 74
    RESTA           shift and go to state 75
    MULTIPLICACION  shift and go to state 76
    DIVISION        shift and go to state 77
    CONJUNCION      shift and go to state 78
    DISYUNCION      shift and go to state 79
    MAYOR           shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR_IGUAL     shift and go to state 82
    MENOR_IGUAL     shift and go to state 83

    operador1                      shift and go to state 69
    operador2                      shift and go to state 70
    comparador2                    shift and go to state 71
    comparador                     shift and go to state 72

state 150

    (86) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor . PUNTO_Y_COMA LLAVE_CIERRA
    (57) aritmetica -> valor . operador1 valor
    (58) aritmetica -> valor . operador2 valor
    (69) booleana -> valor . comparador2 valor
    (63) comparacion -> valor . comparador valor
    (64) comparacion -> valor . IGUAL valor
    (59) operador1 -> . SUMA
    (60) operador1 -> . RESTA
    (61) operador2 -> . MULTIPLICACION
    (62) operador2 -> . DIVISION
    (71) comparador2 -> . CONJUNCION
    (72) comparador2 -> . DISYUNCION
    (65) comparador -> . MAYOR
    (66) comparador -> . MENOR
    (67) comparador -> . MAYOR_IGUAL
    (68) comparador -> . MENOR_IGUAL

    PUNTO_Y_COMA    shift and go to state 155
    IGUAL           shift and go to state 73
    SUMA            shift and go to state 74
    RESTA           shift and go to state 75
    MULTIPLICACION  shift and go to state 76
    DIVISION        shift and go to state 77
    CONJUNCION      shift and go to state 78
    DISYUNCION      shift and go to state 79
    MAYOR           shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR_IGUAL     shift and go to state 82
    MENOR_IGUAL     shift and go to state 83

    operador1                      shift and go to state 69
    operador2                      shift and go to state 70
    comparador2                    shift and go to state 71
    comparador                     shift and go to state 72

state 151

    (87) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 156


state 152

    (79) condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .

    TYPE            reduce using rule 79 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    LET             reduce using rule 79 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    IF              reduce using rule 79 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    WHILE           reduce using rule 79 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    FUNCTION        reduce using rule 79 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 79 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    $end            reduce using rule 79 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 79 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    RETURN          reduce using rule 79 (condition -> IF PARENTESIS_ABRE expersion PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)


state 153

    (84) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor . PUNTO_Y_COMA LLAVE_CIERRA
    (57) aritmetica -> valor . operador1 valor
    (58) aritmetica -> valor . operador2 valor
    (69) booleana -> valor . comparador2 valor
    (63) comparacion -> valor . comparador valor
    (64) comparacion -> valor . IGUAL valor
    (59) operador1 -> . SUMA
    (60) operador1 -> . RESTA
    (61) operador2 -> . MULTIPLICACION
    (62) operador2 -> . DIVISION
    (71) comparador2 -> . CONJUNCION
    (72) comparador2 -> . DISYUNCION
    (65) comparador -> . MAYOR
    (66) comparador -> . MENOR
    (67) comparador -> . MAYOR_IGUAL
    (68) comparador -> . MENOR_IGUAL

    PUNTO_Y_COMA    shift and go to state 157
    IGUAL           shift and go to state 73
    SUMA            shift and go to state 74
    RESTA           shift and go to state 75
    MULTIPLICACION  shift and go to state 76
    DIVISION        shift and go to state 77
    CONJUNCION      shift and go to state 78
    DISYUNCION      shift and go to state 79
    MAYOR           shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR_IGUAL     shift and go to state 82
    MENOR_IGUAL     shift and go to state 83

    operador1                      shift and go to state 69
    operador2                      shift and go to state 70
    comparador2                    shift and go to state 71
    comparador                     shift and go to state 72

state 154

    (85) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 158


state 155

    (86) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 159


state 156

    (87) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .

    TYPE            reduce using rule 87 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LET             reduce using rule 87 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    IF              reduce using rule 87 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    WHILE           reduce using rule 87 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    FUNCTION        reduce using rule 87 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 87 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    $end            reduce using rule 87 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 87 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    RETURN          reduce using rule 87 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)


state 157

    (84) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 160


state 158

    (85) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .

    TYPE            reduce using rule 85 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LET             reduce using rule 85 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    IF              reduce using rule 85 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    WHILE           reduce using rule 85 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    FUNCTION        reduce using rule 85 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 85 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    $end            reduce using rule 85 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 85 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    RETURN          reduce using rule 85 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)


state 159

    (86) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .

    TYPE            reduce using rule 86 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LET             reduce using rule 86 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    IF              reduce using rule 86 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    WHILE           reduce using rule 86 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    FUNCTION        reduce using rule 86 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 86 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    $end            reduce using rule 86 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 86 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    RETURN          reduce using rule 86 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)


state 160

    (84) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .

    TYPE            reduce using rule 84 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LET             reduce using rule 84 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    IF              reduce using rule 84 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    WHILE           reduce using rule 84 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    FUNCTION        reduce using rule 84 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 84 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    $end            reduce using rule 84 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 84 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    RETURN          reduce using rule 84 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PARENTESIS_CIERRA in state 86 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 92 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 92 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 92 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 92 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 92 resolved as shift
WARNING: shift/reduce conflict for CONJUNCION in state 92 resolved as shift
WARNING: shift/reduce conflict for DISYUNCION in state 92 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 92 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 92 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 92 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 92 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 103 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 103 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 103 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 103 resolved as shift
WARNING: shift/reduce conflict for CONJUNCION in state 103 resolved as shift
WARNING: shift/reduce conflict for DISYUNCION in state 103 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 103 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 103 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 104 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 104 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 104 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 104 resolved as shift
WARNING: shift/reduce conflict for CONJUNCION in state 104 resolved as shift
WARNING: shift/reduce conflict for DISYUNCION in state 104 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 104 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 104 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 105 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 105 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 105 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 105 resolved as shift
WARNING: shift/reduce conflict for CONJUNCION in state 105 resolved as shift
WARNING: shift/reduce conflict for DISYUNCION in state 105 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 105 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 105 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 106 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 106 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 106 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 106 resolved as shift
WARNING: shift/reduce conflict for CONJUNCION in state 106 resolved as shift
WARNING: shift/reduce conflict for DISYUNCION in state 106 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 106 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 106 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 107 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 107 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 107 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 107 resolved as shift
WARNING: shift/reduce conflict for CONJUNCION in state 107 resolved as shift
WARNING: shift/reduce conflict for DISYUNCION in state 107 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 107 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 107 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 107 resolved as shift
WARNING: reduce/reduce conflict in state 61 resolved using rule (operacion -> booleana)
WARNING: rejected rule (expersion -> booleana) in state 61
WARNING: reduce/reduce conflict in state 62 resolved using rule (valor -> function_call)
WARNING: rejected rule (expersion -> function_call) in state 62
WARNING: Rule (expersion -> booleana) is never reduced
WARNING: Rule (expersion -> function_call) is never reduced
