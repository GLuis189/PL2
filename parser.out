Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> statement
Rule 2     programa -> empty
Rule 3     empty -> <empty>
Rule 4     statement -> content PUNTO_Y_COMA
Rule 5     statement -> content PUNTO_Y_COMA statement
Rule 6     statement -> no_semicolon
Rule 7     statement -> no_semicolon statement
Rule 8     content -> define
Rule 9     content -> declare
Rule 10    content -> assign
Rule 11    no_semicolon -> condition
Rule 12    no_semicolon -> loop
Rule 13    no_semicolon -> function_def
Rule 14    bool -> TR
Rule 15    bool -> FL
Rule 16    num -> ENTERO
Rule 17    num -> DECIMAL
Rule 18    ident -> CADENA_NO_COMILLAS
Rule 19    ident -> CADENA_NO_COMILLAS PUNTO ident
Rule 20    ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
Rule 21    ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
Rule 22    declare -> LET id
Rule 23    id -> variable
Rule 24    id -> variable COMA id
Rule 25    id -> variable ASIGNACION valor
Rule 26    id -> variable ASIGNACION valor COMA id
Rule 27    variable -> CADENA_NO_COMILLAS
Rule 28    variable -> CADENA_NO_COMILLAS DOS_PUNTOS tipo
Rule 29    assign -> variable ASIGNACION valor
Rule 30    valor -> ident
Rule 31    valor -> num
Rule 32    valor -> operacion
Rule 33    valor -> bool
Rule 34    valor -> NULL
Rule 35    valor -> ajson_v
Rule 36    valor -> CARACTER
Rule 37    valor -> function_call
Rule 38    valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA
Rule 39    define -> TYPE CADENA_NO_COMILLAS ASIGNACION ajson
Rule 40    ajson -> LLAVE_ABRE lista LLAVE_CIERRA
Rule 41    lista -> elemento
Rule 42    lista -> elemento COMA
Rule 43    lista -> elemento COMA lista
Rule 44    elemento -> clave DOS_PUNTOS valor_t
Rule 45    valor_t -> tipo
Rule 46    valor_t -> ajson
Rule 47    clave -> CADENA_NO_COMILLAS
Rule 48    clave -> CADENA_COMILLAS
Rule 49    ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA
Rule 50    lista_v -> elemento_v
Rule 51    lista_v -> elemento_v COMA
Rule 52    lista_v -> elemento_v COMA lista_v
Rule 53    elemento_v -> clave_v DOS_PUNTOS valor
Rule 54    clave_v -> CADENA_NO_COMILLAS
Rule 55    clave_v -> CADENA_COMILLAS
Rule 56    operacion -> aritmetica
Rule 57    operacion -> booleana
Rule 58    operacion -> comparacion
Rule 59    aritmetica -> valor SUMA valor
Rule 60    aritmetica -> valor RESTA valor
Rule 61    aritmetica -> valor MULTIPLICACION valor
Rule 62    aritmetica -> valor DIVISION valor
Rule 63    comparacion -> valor MAYOR valor
Rule 64    comparacion -> valor MENOR valor
Rule 65    comparacion -> valor MAYOR_IGUAL valor
Rule 66    comparacion -> valor MENOR_IGUAL valor
Rule 67    comparacion -> valor IGUAL valor
Rule 68    booleana -> valor CONJUNCION valor
Rule 69    booleana -> valor DISYUNCION valor
Rule 70    booleana -> NEGACION valor
Rule 71    tipo -> INT
Rule 72    tipo -> FLOAT
Rule 73    tipo -> CHARACTER
Rule 74    tipo -> BOOLEAN
Rule 75    tipo -> CADENA_NO_COMILLAS
Rule 76    condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
Rule 77    condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
Rule 78    loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
Rule 79    function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
Rule 80    function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
Rule 81    function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
Rule 82    function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
Rule 83    function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
Rule 84    function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
Rule 85    arg -> valor
Rule 86    arg -> valor COMA arg

Terminals, with rules where they appear

ASIGNACION           : 25 26 29 39
BOOLEAN              : 74
CADENA_COMILLAS      : 20 21 48 55
CADENA_NO_COMILLAS   : 18 19 20 21 27 28 39 47 54 75 79 80 81 82 83 84
CARACTER             : 36
CHARACTER            : 73
COMA                 : 24 26 42 43 51 52 86
CONJUNCION           : 68
CORCHETE_ABRE        : 20 21
CORCHETE_CIERRA      : 20 21
DECIMAL              : 17
DISYUNCION           : 69
DIVISION             : 62
DOS_PUNTOS           : 28 44 53 79 80 81 82
ELSE                 : 77
ENTERO               : 16
FL                   : 15
FLOAT                : 72
FUNCTION             : 79 80 81 82
IF                   : 76 77
IGUAL                : 67
INT                  : 71
LET                  : 22
LLAVE_ABRE           : 40 49 76 77 77 78 79 80 81 82
LLAVE_CIERRA         : 40 49 76 77 77 78 79 80 81 82
MAYOR                : 63
MAYOR_IGUAL          : 65
MENOR                : 64
MENOR_IGUAL          : 66
MULTIPLICACION       : 61
NEGACION             : 70
NULL                 : 34
PARENTESIS_ABRE      : 38 76 77 78 79 80 81 82 83 84
PARENTESIS_CIERRA    : 38 76 77 78 79 80 81 82 83 84
PUNTO                : 19 21
PUNTO_Y_COMA         : 4 5 79 80 81 82
RESTA                : 60
RETURN               : 79 80 81 82
SUMA                 : 59
TR                   : 14
TYPE                 : 39
WHILE                : 78
error                : 

Nonterminals, with rules where they appear

ajson                : 39 46
ajson_v              : 35
arg                  : 83 86
aritmetica           : 56
assign               : 10
bool                 : 33
booleana             : 57
clave                : 44
clave_v              : 53
comparacion          : 58
condition            : 11
content              : 4 5
declare              : 9
define               : 8
elemento             : 41 42 43
elemento_v           : 50 51 52
empty                : 2
function_call        : 37
function_def         : 13
id                   : 22 24 26 79 80
ident                : 19 21 30
lista                : 40 43
lista_v              : 49 52
loop                 : 12
no_semicolon         : 6 7
num                  : 31
operacion            : 32
programa             : 0
statement            : 1 5 7 76 77 77 78 79 81
tipo                 : 28 45 79 80 81 82
valor                : 25 26 29 38 53 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 76 77 78 79 80 81 82 85 86
valor_t              : 44
variable             : 23 24 25 26 29

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . statement
    (2) programa -> . empty
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (3) empty -> .
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (39) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (22) declare -> . LET id
    (29) assign -> . variable ASIGNACION valor
    (76) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (78) loop -> . WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (79) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (80) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (81) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (82) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (27) variable -> . CADENA_NO_COMILLAS
    (28) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo

    $end            reduce using rule 3 (empty -> .)
    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    programa                       shift and go to state 1
    statement                      shift and go to state 2
    empty                          shift and go to state 3
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 1

    (0) S' -> programa .



state 2

    (1) programa -> statement .

    $end            reduce using rule 1 (programa -> statement .)


state 3

    (2) programa -> empty .

    $end            reduce using rule 2 (programa -> empty .)


state 4

    (4) statement -> content . PUNTO_Y_COMA
    (5) statement -> content . PUNTO_Y_COMA statement

    PUNTO_Y_COMA    shift and go to state 19


state 5

    (6) statement -> no_semicolon .
    (7) statement -> no_semicolon . statement
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (39) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (22) declare -> . LET id
    (29) assign -> . variable ASIGNACION valor
    (76) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (78) loop -> . WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (79) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (80) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (81) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (82) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (27) variable -> . CADENA_NO_COMILLAS
    (28) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo

    $end            reduce using rule 6 (statement -> no_semicolon .)
    LLAVE_CIERRA    reduce using rule 6 (statement -> no_semicolon .)
    RETURN          reduce using rule 6 (statement -> no_semicolon .)
    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    no_semicolon                   shift and go to state 5
    statement                      shift and go to state 20
    content                        shift and go to state 4
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 6

    (8) content -> define .

    PUNTO_Y_COMA    reduce using rule 8 (content -> define .)


state 7

    (9) content -> declare .

    PUNTO_Y_COMA    reduce using rule 9 (content -> declare .)


state 8

    (10) content -> assign .

    PUNTO_Y_COMA    reduce using rule 10 (content -> assign .)


state 9

    (11) no_semicolon -> condition .

    TYPE            reduce using rule 11 (no_semicolon -> condition .)
    LET             reduce using rule 11 (no_semicolon -> condition .)
    IF              reduce using rule 11 (no_semicolon -> condition .)
    WHILE           reduce using rule 11 (no_semicolon -> condition .)
    FUNCTION        reduce using rule 11 (no_semicolon -> condition .)
    CADENA_NO_COMILLAS reduce using rule 11 (no_semicolon -> condition .)
    $end            reduce using rule 11 (no_semicolon -> condition .)
    LLAVE_CIERRA    reduce using rule 11 (no_semicolon -> condition .)
    RETURN          reduce using rule 11 (no_semicolon -> condition .)


state 10

    (12) no_semicolon -> loop .

    TYPE            reduce using rule 12 (no_semicolon -> loop .)
    LET             reduce using rule 12 (no_semicolon -> loop .)
    IF              reduce using rule 12 (no_semicolon -> loop .)
    WHILE           reduce using rule 12 (no_semicolon -> loop .)
    FUNCTION        reduce using rule 12 (no_semicolon -> loop .)
    CADENA_NO_COMILLAS reduce using rule 12 (no_semicolon -> loop .)
    $end            reduce using rule 12 (no_semicolon -> loop .)
    LLAVE_CIERRA    reduce using rule 12 (no_semicolon -> loop .)
    RETURN          reduce using rule 12 (no_semicolon -> loop .)


state 11

    (13) no_semicolon -> function_def .

    TYPE            reduce using rule 13 (no_semicolon -> function_def .)
    LET             reduce using rule 13 (no_semicolon -> function_def .)
    IF              reduce using rule 13 (no_semicolon -> function_def .)
    WHILE           reduce using rule 13 (no_semicolon -> function_def .)
    FUNCTION        reduce using rule 13 (no_semicolon -> function_def .)
    CADENA_NO_COMILLAS reduce using rule 13 (no_semicolon -> function_def .)
    $end            reduce using rule 13 (no_semicolon -> function_def .)
    LLAVE_CIERRA    reduce using rule 13 (no_semicolon -> function_def .)
    RETURN          reduce using rule 13 (no_semicolon -> function_def .)


state 12

    (39) define -> TYPE . CADENA_NO_COMILLAS ASIGNACION ajson

    CADENA_NO_COMILLAS shift and go to state 21


state 13

    (27) variable -> CADENA_NO_COMILLAS .
    (28) variable -> CADENA_NO_COMILLAS . DOS_PUNTOS tipo

    ASIGNACION      reduce using rule 27 (variable -> CADENA_NO_COMILLAS .)
    COMA            reduce using rule 27 (variable -> CADENA_NO_COMILLAS .)
    PUNTO_Y_COMA    reduce using rule 27 (variable -> CADENA_NO_COMILLAS .)
    PARENTESIS_CIERRA reduce using rule 27 (variable -> CADENA_NO_COMILLAS .)
    DOS_PUNTOS      shift and go to state 22


state 14

    (22) declare -> LET . id
    (23) id -> . variable
    (24) id -> . variable COMA id
    (25) id -> . variable ASIGNACION valor
    (26) id -> . variable ASIGNACION valor COMA id
    (27) variable -> . CADENA_NO_COMILLAS
    (28) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo

    CADENA_NO_COMILLAS shift and go to state 13

    id                             shift and go to state 23
    variable                       shift and go to state 24

state 15

    (29) assign -> variable . ASIGNACION valor

    ASIGNACION      shift and go to state 25


state 16

    (76) condition -> IF . PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> IF . PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA

    PARENTESIS_ABRE shift and go to state 26


state 17

    (78) loop -> WHILE . PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA

    PARENTESIS_ABRE shift and go to state 27


state 18

    (79) function_def -> FUNCTION . CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (80) function_def -> FUNCTION . CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (81) function_def -> FUNCTION . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (82) function_def -> FUNCTION . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    CADENA_NO_COMILLAS shift and go to state 28


state 19

    (4) statement -> content PUNTO_Y_COMA .
    (5) statement -> content PUNTO_Y_COMA . statement
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (39) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (22) declare -> . LET id
    (29) assign -> . variable ASIGNACION valor
    (76) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (78) loop -> . WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (79) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (80) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (81) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (82) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (27) variable -> . CADENA_NO_COMILLAS
    (28) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo

    $end            reduce using rule 4 (statement -> content PUNTO_Y_COMA .)
    LLAVE_CIERRA    reduce using rule 4 (statement -> content PUNTO_Y_COMA .)
    RETURN          reduce using rule 4 (statement -> content PUNTO_Y_COMA .)
    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    content                        shift and go to state 4
    statement                      shift and go to state 29
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 20

    (7) statement -> no_semicolon statement .

    $end            reduce using rule 7 (statement -> no_semicolon statement .)
    LLAVE_CIERRA    reduce using rule 7 (statement -> no_semicolon statement .)
    RETURN          reduce using rule 7 (statement -> no_semicolon statement .)


state 21

    (39) define -> TYPE CADENA_NO_COMILLAS . ASIGNACION ajson

    ASIGNACION      shift and go to state 30


state 22

    (28) variable -> CADENA_NO_COMILLAS DOS_PUNTOS . tipo
    (71) tipo -> . INT
    (72) tipo -> . FLOAT
    (73) tipo -> . CHARACTER
    (74) tipo -> . BOOLEAN
    (75) tipo -> . CADENA_NO_COMILLAS

    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    CHARACTER       shift and go to state 35
    BOOLEAN         shift and go to state 36
    CADENA_NO_COMILLAS shift and go to state 31

    tipo                           shift and go to state 32

state 23

    (22) declare -> LET id .

    PUNTO_Y_COMA    reduce using rule 22 (declare -> LET id .)


state 24

    (23) id -> variable .
    (24) id -> variable . COMA id
    (25) id -> variable . ASIGNACION valor
    (26) id -> variable . ASIGNACION valor COMA id

    PUNTO_Y_COMA    reduce using rule 23 (id -> variable .)
    PARENTESIS_CIERRA reduce using rule 23 (id -> variable .)
    COMA            shift and go to state 37
    ASIGNACION      shift and go to state 38


state 25

    (29) assign -> variable ASIGNACION . valor
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 39
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 26

    (76) condition -> IF PARENTESIS_ABRE . valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> IF PARENTESIS_ABRE . valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 59
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 27

    (78) loop -> WHILE PARENTESIS_ABRE . valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 60
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 28

    (79) function_def -> FUNCTION CADENA_NO_COMILLAS . PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (80) function_def -> FUNCTION CADENA_NO_COMILLAS . PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (81) function_def -> FUNCTION CADENA_NO_COMILLAS . PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (82) function_def -> FUNCTION CADENA_NO_COMILLAS . PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    PARENTESIS_ABRE shift and go to state 61


state 29

    (5) statement -> content PUNTO_Y_COMA statement .

    $end            reduce using rule 5 (statement -> content PUNTO_Y_COMA statement .)
    LLAVE_CIERRA    reduce using rule 5 (statement -> content PUNTO_Y_COMA statement .)
    RETURN          reduce using rule 5 (statement -> content PUNTO_Y_COMA statement .)


state 30

    (39) define -> TYPE CADENA_NO_COMILLAS ASIGNACION . ajson
    (40) ajson -> . LLAVE_ABRE lista LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 63

    ajson                          shift and go to state 62

state 31

    (75) tipo -> CADENA_NO_COMILLAS .

    ASIGNACION      reduce using rule 75 (tipo -> CADENA_NO_COMILLAS .)
    COMA            reduce using rule 75 (tipo -> CADENA_NO_COMILLAS .)
    PUNTO_Y_COMA    reduce using rule 75 (tipo -> CADENA_NO_COMILLAS .)
    PARENTESIS_CIERRA reduce using rule 75 (tipo -> CADENA_NO_COMILLAS .)
    LLAVE_ABRE      reduce using rule 75 (tipo -> CADENA_NO_COMILLAS .)
    LLAVE_CIERRA    reduce using rule 75 (tipo -> CADENA_NO_COMILLAS .)


state 32

    (28) variable -> CADENA_NO_COMILLAS DOS_PUNTOS tipo .

    ASIGNACION      reduce using rule 28 (variable -> CADENA_NO_COMILLAS DOS_PUNTOS tipo .)
    COMA            reduce using rule 28 (variable -> CADENA_NO_COMILLAS DOS_PUNTOS tipo .)
    PUNTO_Y_COMA    reduce using rule 28 (variable -> CADENA_NO_COMILLAS DOS_PUNTOS tipo .)
    PARENTESIS_CIERRA reduce using rule 28 (variable -> CADENA_NO_COMILLAS DOS_PUNTOS tipo .)


state 33

    (71) tipo -> INT .

    ASIGNACION      reduce using rule 71 (tipo -> INT .)
    COMA            reduce using rule 71 (tipo -> INT .)
    PUNTO_Y_COMA    reduce using rule 71 (tipo -> INT .)
    PARENTESIS_CIERRA reduce using rule 71 (tipo -> INT .)
    LLAVE_ABRE      reduce using rule 71 (tipo -> INT .)
    LLAVE_CIERRA    reduce using rule 71 (tipo -> INT .)


state 34

    (72) tipo -> FLOAT .

    ASIGNACION      reduce using rule 72 (tipo -> FLOAT .)
    COMA            reduce using rule 72 (tipo -> FLOAT .)
    PUNTO_Y_COMA    reduce using rule 72 (tipo -> FLOAT .)
    PARENTESIS_CIERRA reduce using rule 72 (tipo -> FLOAT .)
    LLAVE_ABRE      reduce using rule 72 (tipo -> FLOAT .)
    LLAVE_CIERRA    reduce using rule 72 (tipo -> FLOAT .)


state 35

    (73) tipo -> CHARACTER .

    ASIGNACION      reduce using rule 73 (tipo -> CHARACTER .)
    COMA            reduce using rule 73 (tipo -> CHARACTER .)
    PUNTO_Y_COMA    reduce using rule 73 (tipo -> CHARACTER .)
    PARENTESIS_CIERRA reduce using rule 73 (tipo -> CHARACTER .)
    LLAVE_ABRE      reduce using rule 73 (tipo -> CHARACTER .)
    LLAVE_CIERRA    reduce using rule 73 (tipo -> CHARACTER .)


state 36

    (74) tipo -> BOOLEAN .

    ASIGNACION      reduce using rule 74 (tipo -> BOOLEAN .)
    COMA            reduce using rule 74 (tipo -> BOOLEAN .)
    PUNTO_Y_COMA    reduce using rule 74 (tipo -> BOOLEAN .)
    PARENTESIS_CIERRA reduce using rule 74 (tipo -> BOOLEAN .)
    LLAVE_ABRE      reduce using rule 74 (tipo -> BOOLEAN .)
    LLAVE_CIERRA    reduce using rule 74 (tipo -> BOOLEAN .)


state 37

    (24) id -> variable COMA . id
    (23) id -> . variable
    (24) id -> . variable COMA id
    (25) id -> . variable ASIGNACION valor
    (26) id -> . variable ASIGNACION valor COMA id
    (27) variable -> . CADENA_NO_COMILLAS
    (28) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo

    CADENA_NO_COMILLAS shift and go to state 13

    variable                       shift and go to state 24
    id                             shift and go to state 64

state 38

    (25) id -> variable ASIGNACION . valor
    (26) id -> variable ASIGNACION . valor COMA id
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 65
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 39

    (29) assign -> variable ASIGNACION valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    PUNTO_Y_COMA    reduce using rule 29 (assign -> variable ASIGNACION valor .)
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    MULTIPLICACION  shift and go to state 68
    DIVISION        shift and go to state 69
    CONJUNCION      shift and go to state 70
    DISYUNCION      shift and go to state 71
    MAYOR           shift and go to state 72
    MENOR           shift and go to state 73
    MAYOR_IGUAL     shift and go to state 74
    MENOR_IGUAL     shift and go to state 75
    IGUAL           shift and go to state 76


state 40

    (30) valor -> ident .

    SUMA            reduce using rule 30 (valor -> ident .)
    RESTA           reduce using rule 30 (valor -> ident .)
    MULTIPLICACION  reduce using rule 30 (valor -> ident .)
    DIVISION        reduce using rule 30 (valor -> ident .)
    CONJUNCION      reduce using rule 30 (valor -> ident .)
    DISYUNCION      reduce using rule 30 (valor -> ident .)
    MAYOR           reduce using rule 30 (valor -> ident .)
    MENOR           reduce using rule 30 (valor -> ident .)
    MAYOR_IGUAL     reduce using rule 30 (valor -> ident .)
    MENOR_IGUAL     reduce using rule 30 (valor -> ident .)
    IGUAL           reduce using rule 30 (valor -> ident .)
    PUNTO_Y_COMA    reduce using rule 30 (valor -> ident .)
    PARENTESIS_CIERRA reduce using rule 30 (valor -> ident .)
    COMA            reduce using rule 30 (valor -> ident .)
    LLAVE_CIERRA    reduce using rule 30 (valor -> ident .)


state 41

    (31) valor -> num .

    SUMA            reduce using rule 31 (valor -> num .)
    RESTA           reduce using rule 31 (valor -> num .)
    MULTIPLICACION  reduce using rule 31 (valor -> num .)
    DIVISION        reduce using rule 31 (valor -> num .)
    CONJUNCION      reduce using rule 31 (valor -> num .)
    DISYUNCION      reduce using rule 31 (valor -> num .)
    MAYOR           reduce using rule 31 (valor -> num .)
    MENOR           reduce using rule 31 (valor -> num .)
    MAYOR_IGUAL     reduce using rule 31 (valor -> num .)
    MENOR_IGUAL     reduce using rule 31 (valor -> num .)
    IGUAL           reduce using rule 31 (valor -> num .)
    PUNTO_Y_COMA    reduce using rule 31 (valor -> num .)
    PARENTESIS_CIERRA reduce using rule 31 (valor -> num .)
    COMA            reduce using rule 31 (valor -> num .)
    LLAVE_CIERRA    reduce using rule 31 (valor -> num .)


state 42

    (32) valor -> operacion .

    SUMA            reduce using rule 32 (valor -> operacion .)
    RESTA           reduce using rule 32 (valor -> operacion .)
    MULTIPLICACION  reduce using rule 32 (valor -> operacion .)
    DIVISION        reduce using rule 32 (valor -> operacion .)
    CONJUNCION      reduce using rule 32 (valor -> operacion .)
    DISYUNCION      reduce using rule 32 (valor -> operacion .)
    MAYOR           reduce using rule 32 (valor -> operacion .)
    MENOR           reduce using rule 32 (valor -> operacion .)
    MAYOR_IGUAL     reduce using rule 32 (valor -> operacion .)
    MENOR_IGUAL     reduce using rule 32 (valor -> operacion .)
    IGUAL           reduce using rule 32 (valor -> operacion .)
    PUNTO_Y_COMA    reduce using rule 32 (valor -> operacion .)
    PARENTESIS_CIERRA reduce using rule 32 (valor -> operacion .)
    COMA            reduce using rule 32 (valor -> operacion .)
    LLAVE_CIERRA    reduce using rule 32 (valor -> operacion .)


state 43

    (33) valor -> bool .

    SUMA            reduce using rule 33 (valor -> bool .)
    RESTA           reduce using rule 33 (valor -> bool .)
    MULTIPLICACION  reduce using rule 33 (valor -> bool .)
    DIVISION        reduce using rule 33 (valor -> bool .)
    CONJUNCION      reduce using rule 33 (valor -> bool .)
    DISYUNCION      reduce using rule 33 (valor -> bool .)
    MAYOR           reduce using rule 33 (valor -> bool .)
    MENOR           reduce using rule 33 (valor -> bool .)
    MAYOR_IGUAL     reduce using rule 33 (valor -> bool .)
    MENOR_IGUAL     reduce using rule 33 (valor -> bool .)
    IGUAL           reduce using rule 33 (valor -> bool .)
    PUNTO_Y_COMA    reduce using rule 33 (valor -> bool .)
    PARENTESIS_CIERRA reduce using rule 33 (valor -> bool .)
    COMA            reduce using rule 33 (valor -> bool .)
    LLAVE_CIERRA    reduce using rule 33 (valor -> bool .)


state 44

    (34) valor -> NULL .

    SUMA            reduce using rule 34 (valor -> NULL .)
    RESTA           reduce using rule 34 (valor -> NULL .)
    MULTIPLICACION  reduce using rule 34 (valor -> NULL .)
    DIVISION        reduce using rule 34 (valor -> NULL .)
    CONJUNCION      reduce using rule 34 (valor -> NULL .)
    DISYUNCION      reduce using rule 34 (valor -> NULL .)
    MAYOR           reduce using rule 34 (valor -> NULL .)
    MENOR           reduce using rule 34 (valor -> NULL .)
    MAYOR_IGUAL     reduce using rule 34 (valor -> NULL .)
    MENOR_IGUAL     reduce using rule 34 (valor -> NULL .)
    IGUAL           reduce using rule 34 (valor -> NULL .)
    PUNTO_Y_COMA    reduce using rule 34 (valor -> NULL .)
    PARENTESIS_CIERRA reduce using rule 34 (valor -> NULL .)
    COMA            reduce using rule 34 (valor -> NULL .)
    LLAVE_CIERRA    reduce using rule 34 (valor -> NULL .)


state 45

    (35) valor -> ajson_v .

    SUMA            reduce using rule 35 (valor -> ajson_v .)
    RESTA           reduce using rule 35 (valor -> ajson_v .)
    MULTIPLICACION  reduce using rule 35 (valor -> ajson_v .)
    DIVISION        reduce using rule 35 (valor -> ajson_v .)
    CONJUNCION      reduce using rule 35 (valor -> ajson_v .)
    DISYUNCION      reduce using rule 35 (valor -> ajson_v .)
    MAYOR           reduce using rule 35 (valor -> ajson_v .)
    MENOR           reduce using rule 35 (valor -> ajson_v .)
    MAYOR_IGUAL     reduce using rule 35 (valor -> ajson_v .)
    MENOR_IGUAL     reduce using rule 35 (valor -> ajson_v .)
    IGUAL           reduce using rule 35 (valor -> ajson_v .)
    PUNTO_Y_COMA    reduce using rule 35 (valor -> ajson_v .)
    PARENTESIS_CIERRA reduce using rule 35 (valor -> ajson_v .)
    COMA            reduce using rule 35 (valor -> ajson_v .)
    LLAVE_CIERRA    reduce using rule 35 (valor -> ajson_v .)


state 46

    (36) valor -> CARACTER .

    SUMA            reduce using rule 36 (valor -> CARACTER .)
    RESTA           reduce using rule 36 (valor -> CARACTER .)
    MULTIPLICACION  reduce using rule 36 (valor -> CARACTER .)
    DIVISION        reduce using rule 36 (valor -> CARACTER .)
    CONJUNCION      reduce using rule 36 (valor -> CARACTER .)
    DISYUNCION      reduce using rule 36 (valor -> CARACTER .)
    MAYOR           reduce using rule 36 (valor -> CARACTER .)
    MENOR           reduce using rule 36 (valor -> CARACTER .)
    MAYOR_IGUAL     reduce using rule 36 (valor -> CARACTER .)
    MENOR_IGUAL     reduce using rule 36 (valor -> CARACTER .)
    IGUAL           reduce using rule 36 (valor -> CARACTER .)
    PUNTO_Y_COMA    reduce using rule 36 (valor -> CARACTER .)
    PARENTESIS_CIERRA reduce using rule 36 (valor -> CARACTER .)
    COMA            reduce using rule 36 (valor -> CARACTER .)
    LLAVE_CIERRA    reduce using rule 36 (valor -> CARACTER .)


state 47

    (37) valor -> function_call .

    SUMA            reduce using rule 37 (valor -> function_call .)
    RESTA           reduce using rule 37 (valor -> function_call .)
    MULTIPLICACION  reduce using rule 37 (valor -> function_call .)
    DIVISION        reduce using rule 37 (valor -> function_call .)
    CONJUNCION      reduce using rule 37 (valor -> function_call .)
    DISYUNCION      reduce using rule 37 (valor -> function_call .)
    MAYOR           reduce using rule 37 (valor -> function_call .)
    MENOR           reduce using rule 37 (valor -> function_call .)
    MAYOR_IGUAL     reduce using rule 37 (valor -> function_call .)
    MENOR_IGUAL     reduce using rule 37 (valor -> function_call .)
    IGUAL           reduce using rule 37 (valor -> function_call .)
    PUNTO_Y_COMA    reduce using rule 37 (valor -> function_call .)
    PARENTESIS_CIERRA reduce using rule 37 (valor -> function_call .)
    COMA            reduce using rule 37 (valor -> function_call .)
    LLAVE_CIERRA    reduce using rule 37 (valor -> function_call .)


state 48

    (38) valor -> PARENTESIS_ABRE . valor PARENTESIS_CIERRA
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 77
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 49

    (18) ident -> CADENA_NO_COMILLAS .
    (19) ident -> CADENA_NO_COMILLAS . PUNTO ident
    (20) ident -> CADENA_NO_COMILLAS . CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> CADENA_NO_COMILLAS . CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (83) function_call -> CADENA_NO_COMILLAS . PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> CADENA_NO_COMILLAS . PARENTESIS_ABRE PARENTESIS_CIERRA

    SUMA            reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    RESTA           reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    MULTIPLICACION  reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    DIVISION        reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    CONJUNCION      reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    DISYUNCION      reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    MAYOR           reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    MENOR           reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    MAYOR_IGUAL     reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    MENOR_IGUAL     reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    IGUAL           reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    PUNTO_Y_COMA    reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    PARENTESIS_CIERRA reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    COMA            reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    LLAVE_CIERRA    reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    PUNTO           shift and go to state 78
    CORCHETE_ABRE   shift and go to state 79
    PARENTESIS_ABRE shift and go to state 80


state 50

    (16) num -> ENTERO .

    SUMA            reduce using rule 16 (num -> ENTERO .)
    RESTA           reduce using rule 16 (num -> ENTERO .)
    MULTIPLICACION  reduce using rule 16 (num -> ENTERO .)
    DIVISION        reduce using rule 16 (num -> ENTERO .)
    CONJUNCION      reduce using rule 16 (num -> ENTERO .)
    DISYUNCION      reduce using rule 16 (num -> ENTERO .)
    MAYOR           reduce using rule 16 (num -> ENTERO .)
    MENOR           reduce using rule 16 (num -> ENTERO .)
    MAYOR_IGUAL     reduce using rule 16 (num -> ENTERO .)
    MENOR_IGUAL     reduce using rule 16 (num -> ENTERO .)
    IGUAL           reduce using rule 16 (num -> ENTERO .)
    PUNTO_Y_COMA    reduce using rule 16 (num -> ENTERO .)
    PARENTESIS_CIERRA reduce using rule 16 (num -> ENTERO .)
    COMA            reduce using rule 16 (num -> ENTERO .)
    LLAVE_CIERRA    reduce using rule 16 (num -> ENTERO .)


state 51

    (17) num -> DECIMAL .

    SUMA            reduce using rule 17 (num -> DECIMAL .)
    RESTA           reduce using rule 17 (num -> DECIMAL .)
    MULTIPLICACION  reduce using rule 17 (num -> DECIMAL .)
    DIVISION        reduce using rule 17 (num -> DECIMAL .)
    CONJUNCION      reduce using rule 17 (num -> DECIMAL .)
    DISYUNCION      reduce using rule 17 (num -> DECIMAL .)
    MAYOR           reduce using rule 17 (num -> DECIMAL .)
    MENOR           reduce using rule 17 (num -> DECIMAL .)
    MAYOR_IGUAL     reduce using rule 17 (num -> DECIMAL .)
    MENOR_IGUAL     reduce using rule 17 (num -> DECIMAL .)
    IGUAL           reduce using rule 17 (num -> DECIMAL .)
    PUNTO_Y_COMA    reduce using rule 17 (num -> DECIMAL .)
    PARENTESIS_CIERRA reduce using rule 17 (num -> DECIMAL .)
    COMA            reduce using rule 17 (num -> DECIMAL .)
    LLAVE_CIERRA    reduce using rule 17 (num -> DECIMAL .)


state 52

    (56) operacion -> aritmetica .

    SUMA            reduce using rule 56 (operacion -> aritmetica .)
    RESTA           reduce using rule 56 (operacion -> aritmetica .)
    MULTIPLICACION  reduce using rule 56 (operacion -> aritmetica .)
    DIVISION        reduce using rule 56 (operacion -> aritmetica .)
    CONJUNCION      reduce using rule 56 (operacion -> aritmetica .)
    DISYUNCION      reduce using rule 56 (operacion -> aritmetica .)
    MAYOR           reduce using rule 56 (operacion -> aritmetica .)
    MENOR           reduce using rule 56 (operacion -> aritmetica .)
    MAYOR_IGUAL     reduce using rule 56 (operacion -> aritmetica .)
    MENOR_IGUAL     reduce using rule 56 (operacion -> aritmetica .)
    IGUAL           reduce using rule 56 (operacion -> aritmetica .)
    PUNTO_Y_COMA    reduce using rule 56 (operacion -> aritmetica .)
    PARENTESIS_CIERRA reduce using rule 56 (operacion -> aritmetica .)
    COMA            reduce using rule 56 (operacion -> aritmetica .)
    LLAVE_CIERRA    reduce using rule 56 (operacion -> aritmetica .)


state 53

    (57) operacion -> booleana .

    SUMA            reduce using rule 57 (operacion -> booleana .)
    RESTA           reduce using rule 57 (operacion -> booleana .)
    MULTIPLICACION  reduce using rule 57 (operacion -> booleana .)
    DIVISION        reduce using rule 57 (operacion -> booleana .)
    CONJUNCION      reduce using rule 57 (operacion -> booleana .)
    DISYUNCION      reduce using rule 57 (operacion -> booleana .)
    MAYOR           reduce using rule 57 (operacion -> booleana .)
    MENOR           reduce using rule 57 (operacion -> booleana .)
    MAYOR_IGUAL     reduce using rule 57 (operacion -> booleana .)
    MENOR_IGUAL     reduce using rule 57 (operacion -> booleana .)
    IGUAL           reduce using rule 57 (operacion -> booleana .)
    PUNTO_Y_COMA    reduce using rule 57 (operacion -> booleana .)
    PARENTESIS_CIERRA reduce using rule 57 (operacion -> booleana .)
    COMA            reduce using rule 57 (operacion -> booleana .)
    LLAVE_CIERRA    reduce using rule 57 (operacion -> booleana .)


state 54

    (58) operacion -> comparacion .

    SUMA            reduce using rule 58 (operacion -> comparacion .)
    RESTA           reduce using rule 58 (operacion -> comparacion .)
    MULTIPLICACION  reduce using rule 58 (operacion -> comparacion .)
    DIVISION        reduce using rule 58 (operacion -> comparacion .)
    CONJUNCION      reduce using rule 58 (operacion -> comparacion .)
    DISYUNCION      reduce using rule 58 (operacion -> comparacion .)
    MAYOR           reduce using rule 58 (operacion -> comparacion .)
    MENOR           reduce using rule 58 (operacion -> comparacion .)
    MAYOR_IGUAL     reduce using rule 58 (operacion -> comparacion .)
    MENOR_IGUAL     reduce using rule 58 (operacion -> comparacion .)
    IGUAL           reduce using rule 58 (operacion -> comparacion .)
    PUNTO_Y_COMA    reduce using rule 58 (operacion -> comparacion .)
    PARENTESIS_CIERRA reduce using rule 58 (operacion -> comparacion .)
    COMA            reduce using rule 58 (operacion -> comparacion .)
    LLAVE_CIERRA    reduce using rule 58 (operacion -> comparacion .)


state 55

    (14) bool -> TR .

    SUMA            reduce using rule 14 (bool -> TR .)
    RESTA           reduce using rule 14 (bool -> TR .)
    MULTIPLICACION  reduce using rule 14 (bool -> TR .)
    DIVISION        reduce using rule 14 (bool -> TR .)
    CONJUNCION      reduce using rule 14 (bool -> TR .)
    DISYUNCION      reduce using rule 14 (bool -> TR .)
    MAYOR           reduce using rule 14 (bool -> TR .)
    MENOR           reduce using rule 14 (bool -> TR .)
    MAYOR_IGUAL     reduce using rule 14 (bool -> TR .)
    MENOR_IGUAL     reduce using rule 14 (bool -> TR .)
    IGUAL           reduce using rule 14 (bool -> TR .)
    PUNTO_Y_COMA    reduce using rule 14 (bool -> TR .)
    PARENTESIS_CIERRA reduce using rule 14 (bool -> TR .)
    COMA            reduce using rule 14 (bool -> TR .)
    LLAVE_CIERRA    reduce using rule 14 (bool -> TR .)


state 56

    (15) bool -> FL .

    SUMA            reduce using rule 15 (bool -> FL .)
    RESTA           reduce using rule 15 (bool -> FL .)
    MULTIPLICACION  reduce using rule 15 (bool -> FL .)
    DIVISION        reduce using rule 15 (bool -> FL .)
    CONJUNCION      reduce using rule 15 (bool -> FL .)
    DISYUNCION      reduce using rule 15 (bool -> FL .)
    MAYOR           reduce using rule 15 (bool -> FL .)
    MENOR           reduce using rule 15 (bool -> FL .)
    MAYOR_IGUAL     reduce using rule 15 (bool -> FL .)
    MENOR_IGUAL     reduce using rule 15 (bool -> FL .)
    IGUAL           reduce using rule 15 (bool -> FL .)
    PUNTO_Y_COMA    reduce using rule 15 (bool -> FL .)
    PARENTESIS_CIERRA reduce using rule 15 (bool -> FL .)
    COMA            reduce using rule 15 (bool -> FL .)
    LLAVE_CIERRA    reduce using rule 15 (bool -> FL .)


state 57

    (49) ajson_v -> LLAVE_ABRE . lista_v LLAVE_CIERRA
    (50) lista_v -> . elemento_v
    (51) lista_v -> . elemento_v COMA
    (52) lista_v -> . elemento_v COMA lista_v
    (53) elemento_v -> . clave_v DOS_PUNTOS valor
    (54) clave_v -> . CADENA_NO_COMILLAS
    (55) clave_v -> . CADENA_COMILLAS

    CADENA_NO_COMILLAS shift and go to state 84
    CADENA_COMILLAS shift and go to state 85

    lista_v                        shift and go to state 81
    elemento_v                     shift and go to state 82
    clave_v                        shift and go to state 83

state 58

    (70) booleana -> NEGACION . valor
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 86
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 59

    (76) condition -> IF PARENTESIS_ABRE valor . PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> IF PARENTESIS_ABRE valor . PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    PARENTESIS_CIERRA shift and go to state 87
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    MULTIPLICACION  shift and go to state 68
    DIVISION        shift and go to state 69
    CONJUNCION      shift and go to state 70
    DISYUNCION      shift and go to state 71
    MAYOR           shift and go to state 72
    MENOR           shift and go to state 73
    MAYOR_IGUAL     shift and go to state 74
    MENOR_IGUAL     shift and go to state 75
    IGUAL           shift and go to state 76


state 60

    (78) loop -> WHILE PARENTESIS_ABRE valor . PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    PARENTESIS_CIERRA shift and go to state 88
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    MULTIPLICACION  shift and go to state 68
    DIVISION        shift and go to state 69
    CONJUNCION      shift and go to state 70
    DISYUNCION      shift and go to state 71
    MAYOR           shift and go to state 72
    MENOR           shift and go to state 73
    MAYOR_IGUAL     shift and go to state 74
    MENOR_IGUAL     shift and go to state 75
    IGUAL           shift and go to state 76


state 61

    (79) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE . id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (80) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE . id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (81) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE . PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (82) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE . PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (23) id -> . variable
    (24) id -> . variable COMA id
    (25) id -> . variable ASIGNACION valor
    (26) id -> . variable ASIGNACION valor COMA id
    (27) variable -> . CADENA_NO_COMILLAS
    (28) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo

    PARENTESIS_CIERRA shift and go to state 90
    CADENA_NO_COMILLAS shift and go to state 13

    id                             shift and go to state 89
    variable                       shift and go to state 24

state 62

    (39) define -> TYPE CADENA_NO_COMILLAS ASIGNACION ajson .

    PUNTO_Y_COMA    reduce using rule 39 (define -> TYPE CADENA_NO_COMILLAS ASIGNACION ajson .)


state 63

    (40) ajson -> LLAVE_ABRE . lista LLAVE_CIERRA
    (41) lista -> . elemento
    (42) lista -> . elemento COMA
    (43) lista -> . elemento COMA lista
    (44) elemento -> . clave DOS_PUNTOS valor_t
    (47) clave -> . CADENA_NO_COMILLAS
    (48) clave -> . CADENA_COMILLAS

    CADENA_NO_COMILLAS shift and go to state 94
    CADENA_COMILLAS shift and go to state 95

    lista                          shift and go to state 91
    elemento                       shift and go to state 92
    clave                          shift and go to state 93

state 64

    (24) id -> variable COMA id .

    PUNTO_Y_COMA    reduce using rule 24 (id -> variable COMA id .)
    PARENTESIS_CIERRA reduce using rule 24 (id -> variable COMA id .)


state 65

    (25) id -> variable ASIGNACION valor .
    (26) id -> variable ASIGNACION valor . COMA id
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    PUNTO_Y_COMA    reduce using rule 25 (id -> variable ASIGNACION valor .)
    PARENTESIS_CIERRA reduce using rule 25 (id -> variable ASIGNACION valor .)
    COMA            shift and go to state 96
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    MULTIPLICACION  shift and go to state 68
    DIVISION        shift and go to state 69
    CONJUNCION      shift and go to state 70
    DISYUNCION      shift and go to state 71
    MAYOR           shift and go to state 72
    MENOR           shift and go to state 73
    MAYOR_IGUAL     shift and go to state 74
    MENOR_IGUAL     shift and go to state 75
    IGUAL           shift and go to state 76


state 66

    (59) aritmetica -> valor SUMA . valor
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 97
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 67

    (60) aritmetica -> valor RESTA . valor
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 98
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 68

    (61) aritmetica -> valor MULTIPLICACION . valor
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 99
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 69

    (62) aritmetica -> valor DIVISION . valor
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 100
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 70

    (68) booleana -> valor CONJUNCION . valor
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 101
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 71

    (69) booleana -> valor DISYUNCION . valor
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 102
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 72

    (63) comparacion -> valor MAYOR . valor
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 103
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 73

    (64) comparacion -> valor MENOR . valor
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 104
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 74

    (65) comparacion -> valor MAYOR_IGUAL . valor
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 105
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 75

    (66) comparacion -> valor MENOR_IGUAL . valor
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 106
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 76

    (67) comparacion -> valor IGUAL . valor
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 107
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 77

    (38) valor -> PARENTESIS_ABRE valor . PARENTESIS_CIERRA
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    PARENTESIS_CIERRA shift and go to state 108
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    MULTIPLICACION  shift and go to state 68
    DIVISION        shift and go to state 69
    CONJUNCION      shift and go to state 70
    DISYUNCION      shift and go to state 71
    MAYOR           shift and go to state 72
    MENOR           shift and go to state 73
    MAYOR_IGUAL     shift and go to state 74
    MENOR_IGUAL     shift and go to state 75
    IGUAL           shift and go to state 76


state 78

    (19) ident -> CADENA_NO_COMILLAS PUNTO . ident
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident

    CADENA_NO_COMILLAS shift and go to state 109

    ident                          shift and go to state 110

state 79

    (20) ident -> CADENA_NO_COMILLAS CORCHETE_ABRE . CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> CADENA_NO_COMILLAS CORCHETE_ABRE . CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident

    CADENA_COMILLAS shift and go to state 111


state 80

    (83) function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE . arg PARENTESIS_CIERRA
    (84) function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE . PARENTESIS_CIERRA
    (85) arg -> . valor
    (86) arg -> . valor COMA arg
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    PARENTESIS_CIERRA shift and go to state 113
    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    arg                            shift and go to state 112
    valor                          shift and go to state 114
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 81

    (49) ajson_v -> LLAVE_ABRE lista_v . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 115


state 82

    (50) lista_v -> elemento_v .
    (51) lista_v -> elemento_v . COMA
    (52) lista_v -> elemento_v . COMA lista_v

    LLAVE_CIERRA    reduce using rule 50 (lista_v -> elemento_v .)
    COMA            shift and go to state 116


state 83

    (53) elemento_v -> clave_v . DOS_PUNTOS valor

    DOS_PUNTOS      shift and go to state 117


state 84

    (54) clave_v -> CADENA_NO_COMILLAS .

    DOS_PUNTOS      reduce using rule 54 (clave_v -> CADENA_NO_COMILLAS .)


state 85

    (55) clave_v -> CADENA_COMILLAS .

    DOS_PUNTOS      reduce using rule 55 (clave_v -> CADENA_COMILLAS .)


state 86

    (70) booleana -> NEGACION valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    SUMA            reduce using rule 70 (booleana -> NEGACION valor .)
    RESTA           reduce using rule 70 (booleana -> NEGACION valor .)
    MULTIPLICACION  reduce using rule 70 (booleana -> NEGACION valor .)
    DIVISION        reduce using rule 70 (booleana -> NEGACION valor .)
    CONJUNCION      reduce using rule 70 (booleana -> NEGACION valor .)
    DISYUNCION      reduce using rule 70 (booleana -> NEGACION valor .)
    PUNTO_Y_COMA    reduce using rule 70 (booleana -> NEGACION valor .)
    PARENTESIS_CIERRA reduce using rule 70 (booleana -> NEGACION valor .)
    COMA            reduce using rule 70 (booleana -> NEGACION valor .)
    LLAVE_CIERRA    reduce using rule 70 (booleana -> NEGACION valor .)
    MAYOR           shift and go to state 72
    MENOR           shift and go to state 73
    MAYOR_IGUAL     shift and go to state 74
    MENOR_IGUAL     shift and go to state 75
    IGUAL           shift and go to state 76

  ! MAYOR           [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! MENOR           [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! MAYOR_IGUAL     [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! MENOR_IGUAL     [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! IGUAL           [ reduce using rule 70 (booleana -> NEGACION valor .) ]
  ! SUMA            [ shift and go to state 66 ]
  ! RESTA           [ shift and go to state 67 ]
  ! MULTIPLICACION  [ shift and go to state 68 ]
  ! DIVISION        [ shift and go to state 69 ]
  ! CONJUNCION      [ shift and go to state 70 ]
  ! DISYUNCION      [ shift and go to state 71 ]


state 87

    (76) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA . LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA . LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 118


state 88

    (78) loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA . LLAVE_ABRE statement LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 119


state 89

    (79) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id . PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (80) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id . PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    PARENTESIS_CIERRA shift and go to state 120


state 90

    (81) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA . DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (82) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA . DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    DOS_PUNTOS      shift and go to state 121


state 91

    (40) ajson -> LLAVE_ABRE lista . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 122


state 92

    (41) lista -> elemento .
    (42) lista -> elemento . COMA
    (43) lista -> elemento . COMA lista

    LLAVE_CIERRA    reduce using rule 41 (lista -> elemento .)
    COMA            shift and go to state 123


state 93

    (44) elemento -> clave . DOS_PUNTOS valor_t

    DOS_PUNTOS      shift and go to state 124


state 94

    (47) clave -> CADENA_NO_COMILLAS .

    DOS_PUNTOS      reduce using rule 47 (clave -> CADENA_NO_COMILLAS .)


state 95

    (48) clave -> CADENA_COMILLAS .

    DOS_PUNTOS      reduce using rule 48 (clave -> CADENA_COMILLAS .)


state 96

    (26) id -> variable ASIGNACION valor COMA . id
    (23) id -> . variable
    (24) id -> . variable COMA id
    (25) id -> . variable ASIGNACION valor
    (26) id -> . variable ASIGNACION valor COMA id
    (27) variable -> . CADENA_NO_COMILLAS
    (28) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo

    CADENA_NO_COMILLAS shift and go to state 13

    variable                       shift and go to state 24
    id                             shift and go to state 125

state 97

    (59) aritmetica -> valor SUMA valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    SUMA            reduce using rule 59 (aritmetica -> valor SUMA valor .)
    RESTA           reduce using rule 59 (aritmetica -> valor SUMA valor .)
    PUNTO_Y_COMA    reduce using rule 59 (aritmetica -> valor SUMA valor .)
    PARENTESIS_CIERRA reduce using rule 59 (aritmetica -> valor SUMA valor .)
    COMA            reduce using rule 59 (aritmetica -> valor SUMA valor .)
    LLAVE_CIERRA    reduce using rule 59 (aritmetica -> valor SUMA valor .)
    MULTIPLICACION  shift and go to state 68
    DIVISION        shift and go to state 69
    CONJUNCION      shift and go to state 70
    DISYUNCION      shift and go to state 71
    MAYOR           shift and go to state 72
    MENOR           shift and go to state 73
    MAYOR_IGUAL     shift and go to state 74
    MENOR_IGUAL     shift and go to state 75
    IGUAL           shift and go to state 76

  ! MULTIPLICACION  [ reduce using rule 59 (aritmetica -> valor SUMA valor .) ]
  ! DIVISION        [ reduce using rule 59 (aritmetica -> valor SUMA valor .) ]
  ! CONJUNCION      [ reduce using rule 59 (aritmetica -> valor SUMA valor .) ]
  ! DISYUNCION      [ reduce using rule 59 (aritmetica -> valor SUMA valor .) ]
  ! MAYOR           [ reduce using rule 59 (aritmetica -> valor SUMA valor .) ]
  ! MENOR           [ reduce using rule 59 (aritmetica -> valor SUMA valor .) ]
  ! MAYOR_IGUAL     [ reduce using rule 59 (aritmetica -> valor SUMA valor .) ]
  ! MENOR_IGUAL     [ reduce using rule 59 (aritmetica -> valor SUMA valor .) ]
  ! IGUAL           [ reduce using rule 59 (aritmetica -> valor SUMA valor .) ]
  ! SUMA            [ shift and go to state 66 ]
  ! RESTA           [ shift and go to state 67 ]


state 98

    (60) aritmetica -> valor RESTA valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    SUMA            reduce using rule 60 (aritmetica -> valor RESTA valor .)
    RESTA           reduce using rule 60 (aritmetica -> valor RESTA valor .)
    PUNTO_Y_COMA    reduce using rule 60 (aritmetica -> valor RESTA valor .)
    PARENTESIS_CIERRA reduce using rule 60 (aritmetica -> valor RESTA valor .)
    COMA            reduce using rule 60 (aritmetica -> valor RESTA valor .)
    LLAVE_CIERRA    reduce using rule 60 (aritmetica -> valor RESTA valor .)
    MULTIPLICACION  shift and go to state 68
    DIVISION        shift and go to state 69
    CONJUNCION      shift and go to state 70
    DISYUNCION      shift and go to state 71
    MAYOR           shift and go to state 72
    MENOR           shift and go to state 73
    MAYOR_IGUAL     shift and go to state 74
    MENOR_IGUAL     shift and go to state 75
    IGUAL           shift and go to state 76

  ! MULTIPLICACION  [ reduce using rule 60 (aritmetica -> valor RESTA valor .) ]
  ! DIVISION        [ reduce using rule 60 (aritmetica -> valor RESTA valor .) ]
  ! CONJUNCION      [ reduce using rule 60 (aritmetica -> valor RESTA valor .) ]
  ! DISYUNCION      [ reduce using rule 60 (aritmetica -> valor RESTA valor .) ]
  ! MAYOR           [ reduce using rule 60 (aritmetica -> valor RESTA valor .) ]
  ! MENOR           [ reduce using rule 60 (aritmetica -> valor RESTA valor .) ]
  ! MAYOR_IGUAL     [ reduce using rule 60 (aritmetica -> valor RESTA valor .) ]
  ! MENOR_IGUAL     [ reduce using rule 60 (aritmetica -> valor RESTA valor .) ]
  ! IGUAL           [ reduce using rule 60 (aritmetica -> valor RESTA valor .) ]
  ! SUMA            [ shift and go to state 66 ]
  ! RESTA           [ shift and go to state 67 ]


state 99

    (61) aritmetica -> valor MULTIPLICACION valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    SUMA            reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    RESTA           reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    MULTIPLICACION  reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    DIVISION        reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    PUNTO_Y_COMA    reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    PARENTESIS_CIERRA reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    COMA            reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    LLAVE_CIERRA    reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .)
    CONJUNCION      shift and go to state 70
    DISYUNCION      shift and go to state 71
    MAYOR           shift and go to state 72
    MENOR           shift and go to state 73
    MAYOR_IGUAL     shift and go to state 74
    MENOR_IGUAL     shift and go to state 75
    IGUAL           shift and go to state 76

  ! CONJUNCION      [ reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .) ]
  ! DISYUNCION      [ reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .) ]
  ! MAYOR           [ reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .) ]
  ! MENOR           [ reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .) ]
  ! MAYOR_IGUAL     [ reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .) ]
  ! MENOR_IGUAL     [ reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .) ]
  ! IGUAL           [ reduce using rule 61 (aritmetica -> valor MULTIPLICACION valor .) ]
  ! SUMA            [ shift and go to state 66 ]
  ! RESTA           [ shift and go to state 67 ]
  ! MULTIPLICACION  [ shift and go to state 68 ]
  ! DIVISION        [ shift and go to state 69 ]


state 100

    (62) aritmetica -> valor DIVISION valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    SUMA            reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    RESTA           reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    MULTIPLICACION  reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    DIVISION        reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    PUNTO_Y_COMA    reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    PARENTESIS_CIERRA reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    COMA            reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    LLAVE_CIERRA    reduce using rule 62 (aritmetica -> valor DIVISION valor .)
    CONJUNCION      shift and go to state 70
    DISYUNCION      shift and go to state 71
    MAYOR           shift and go to state 72
    MENOR           shift and go to state 73
    MAYOR_IGUAL     shift and go to state 74
    MENOR_IGUAL     shift and go to state 75
    IGUAL           shift and go to state 76

  ! CONJUNCION      [ reduce using rule 62 (aritmetica -> valor DIVISION valor .) ]
  ! DISYUNCION      [ reduce using rule 62 (aritmetica -> valor DIVISION valor .) ]
  ! MAYOR           [ reduce using rule 62 (aritmetica -> valor DIVISION valor .) ]
  ! MENOR           [ reduce using rule 62 (aritmetica -> valor DIVISION valor .) ]
  ! MAYOR_IGUAL     [ reduce using rule 62 (aritmetica -> valor DIVISION valor .) ]
  ! MENOR_IGUAL     [ reduce using rule 62 (aritmetica -> valor DIVISION valor .) ]
  ! IGUAL           [ reduce using rule 62 (aritmetica -> valor DIVISION valor .) ]
  ! SUMA            [ shift and go to state 66 ]
  ! RESTA           [ shift and go to state 67 ]
  ! MULTIPLICACION  [ shift and go to state 68 ]
  ! DIVISION        [ shift and go to state 69 ]


state 101

    (68) booleana -> valor CONJUNCION valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    SUMA            reduce using rule 68 (booleana -> valor CONJUNCION valor .)
    RESTA           reduce using rule 68 (booleana -> valor CONJUNCION valor .)
    MULTIPLICACION  reduce using rule 68 (booleana -> valor CONJUNCION valor .)
    DIVISION        reduce using rule 68 (booleana -> valor CONJUNCION valor .)
    CONJUNCION      reduce using rule 68 (booleana -> valor CONJUNCION valor .)
    DISYUNCION      reduce using rule 68 (booleana -> valor CONJUNCION valor .)
    PUNTO_Y_COMA    reduce using rule 68 (booleana -> valor CONJUNCION valor .)
    PARENTESIS_CIERRA reduce using rule 68 (booleana -> valor CONJUNCION valor .)
    COMA            reduce using rule 68 (booleana -> valor CONJUNCION valor .)
    LLAVE_CIERRA    reduce using rule 68 (booleana -> valor CONJUNCION valor .)
    MAYOR           shift and go to state 72
    MENOR           shift and go to state 73
    MAYOR_IGUAL     shift and go to state 74
    MENOR_IGUAL     shift and go to state 75
    IGUAL           shift and go to state 76

  ! MAYOR           [ reduce using rule 68 (booleana -> valor CONJUNCION valor .) ]
  ! MENOR           [ reduce using rule 68 (booleana -> valor CONJUNCION valor .) ]
  ! MAYOR_IGUAL     [ reduce using rule 68 (booleana -> valor CONJUNCION valor .) ]
  ! MENOR_IGUAL     [ reduce using rule 68 (booleana -> valor CONJUNCION valor .) ]
  ! IGUAL           [ reduce using rule 68 (booleana -> valor CONJUNCION valor .) ]
  ! SUMA            [ shift and go to state 66 ]
  ! RESTA           [ shift and go to state 67 ]
  ! MULTIPLICACION  [ shift and go to state 68 ]
  ! DIVISION        [ shift and go to state 69 ]
  ! CONJUNCION      [ shift and go to state 70 ]
  ! DISYUNCION      [ shift and go to state 71 ]


state 102

    (69) booleana -> valor DISYUNCION valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    SUMA            reduce using rule 69 (booleana -> valor DISYUNCION valor .)
    RESTA           reduce using rule 69 (booleana -> valor DISYUNCION valor .)
    MULTIPLICACION  reduce using rule 69 (booleana -> valor DISYUNCION valor .)
    DIVISION        reduce using rule 69 (booleana -> valor DISYUNCION valor .)
    CONJUNCION      reduce using rule 69 (booleana -> valor DISYUNCION valor .)
    DISYUNCION      reduce using rule 69 (booleana -> valor DISYUNCION valor .)
    PUNTO_Y_COMA    reduce using rule 69 (booleana -> valor DISYUNCION valor .)
    PARENTESIS_CIERRA reduce using rule 69 (booleana -> valor DISYUNCION valor .)
    COMA            reduce using rule 69 (booleana -> valor DISYUNCION valor .)
    LLAVE_CIERRA    reduce using rule 69 (booleana -> valor DISYUNCION valor .)
    MAYOR           shift and go to state 72
    MENOR           shift and go to state 73
    MAYOR_IGUAL     shift and go to state 74
    MENOR_IGUAL     shift and go to state 75
    IGUAL           shift and go to state 76

  ! MAYOR           [ reduce using rule 69 (booleana -> valor DISYUNCION valor .) ]
  ! MENOR           [ reduce using rule 69 (booleana -> valor DISYUNCION valor .) ]
  ! MAYOR_IGUAL     [ reduce using rule 69 (booleana -> valor DISYUNCION valor .) ]
  ! MENOR_IGUAL     [ reduce using rule 69 (booleana -> valor DISYUNCION valor .) ]
  ! IGUAL           [ reduce using rule 69 (booleana -> valor DISYUNCION valor .) ]
  ! SUMA            [ shift and go to state 66 ]
  ! RESTA           [ shift and go to state 67 ]
  ! MULTIPLICACION  [ shift and go to state 68 ]
  ! DIVISION        [ shift and go to state 69 ]
  ! CONJUNCION      [ shift and go to state 70 ]
  ! DISYUNCION      [ shift and go to state 71 ]


state 103

    (63) comparacion -> valor MAYOR valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    SUMA            reduce using rule 63 (comparacion -> valor MAYOR valor .)
    RESTA           reduce using rule 63 (comparacion -> valor MAYOR valor .)
    MULTIPLICACION  reduce using rule 63 (comparacion -> valor MAYOR valor .)
    DIVISION        reduce using rule 63 (comparacion -> valor MAYOR valor .)
    CONJUNCION      reduce using rule 63 (comparacion -> valor MAYOR valor .)
    DISYUNCION      reduce using rule 63 (comparacion -> valor MAYOR valor .)
    MAYOR           reduce using rule 63 (comparacion -> valor MAYOR valor .)
    MENOR           reduce using rule 63 (comparacion -> valor MAYOR valor .)
    MAYOR_IGUAL     reduce using rule 63 (comparacion -> valor MAYOR valor .)
    MENOR_IGUAL     reduce using rule 63 (comparacion -> valor MAYOR valor .)
    IGUAL           reduce using rule 63 (comparacion -> valor MAYOR valor .)
    PUNTO_Y_COMA    reduce using rule 63 (comparacion -> valor MAYOR valor .)
    PARENTESIS_CIERRA reduce using rule 63 (comparacion -> valor MAYOR valor .)
    COMA            reduce using rule 63 (comparacion -> valor MAYOR valor .)
    LLAVE_CIERRA    reduce using rule 63 (comparacion -> valor MAYOR valor .)

  ! SUMA            [ shift and go to state 66 ]
  ! RESTA           [ shift and go to state 67 ]
  ! MULTIPLICACION  [ shift and go to state 68 ]
  ! DIVISION        [ shift and go to state 69 ]
  ! CONJUNCION      [ shift and go to state 70 ]
  ! DISYUNCION      [ shift and go to state 71 ]
  ! MAYOR           [ shift and go to state 72 ]
  ! MENOR           [ shift and go to state 73 ]
  ! MAYOR_IGUAL     [ shift and go to state 74 ]
  ! MENOR_IGUAL     [ shift and go to state 75 ]
  ! IGUAL           [ shift and go to state 76 ]


state 104

    (64) comparacion -> valor MENOR valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    SUMA            reduce using rule 64 (comparacion -> valor MENOR valor .)
    RESTA           reduce using rule 64 (comparacion -> valor MENOR valor .)
    MULTIPLICACION  reduce using rule 64 (comparacion -> valor MENOR valor .)
    DIVISION        reduce using rule 64 (comparacion -> valor MENOR valor .)
    CONJUNCION      reduce using rule 64 (comparacion -> valor MENOR valor .)
    DISYUNCION      reduce using rule 64 (comparacion -> valor MENOR valor .)
    MAYOR           reduce using rule 64 (comparacion -> valor MENOR valor .)
    MENOR           reduce using rule 64 (comparacion -> valor MENOR valor .)
    MAYOR_IGUAL     reduce using rule 64 (comparacion -> valor MENOR valor .)
    MENOR_IGUAL     reduce using rule 64 (comparacion -> valor MENOR valor .)
    IGUAL           reduce using rule 64 (comparacion -> valor MENOR valor .)
    PUNTO_Y_COMA    reduce using rule 64 (comparacion -> valor MENOR valor .)
    PARENTESIS_CIERRA reduce using rule 64 (comparacion -> valor MENOR valor .)
    COMA            reduce using rule 64 (comparacion -> valor MENOR valor .)
    LLAVE_CIERRA    reduce using rule 64 (comparacion -> valor MENOR valor .)

  ! SUMA            [ shift and go to state 66 ]
  ! RESTA           [ shift and go to state 67 ]
  ! MULTIPLICACION  [ shift and go to state 68 ]
  ! DIVISION        [ shift and go to state 69 ]
  ! CONJUNCION      [ shift and go to state 70 ]
  ! DISYUNCION      [ shift and go to state 71 ]
  ! MAYOR           [ shift and go to state 72 ]
  ! MENOR           [ shift and go to state 73 ]
  ! MAYOR_IGUAL     [ shift and go to state 74 ]
  ! MENOR_IGUAL     [ shift and go to state 75 ]
  ! IGUAL           [ shift and go to state 76 ]


state 105

    (65) comparacion -> valor MAYOR_IGUAL valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    SUMA            reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    RESTA           reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    MULTIPLICACION  reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    DIVISION        reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    CONJUNCION      reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    DISYUNCION      reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    MAYOR           reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    MENOR           reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    MAYOR_IGUAL     reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    MENOR_IGUAL     reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    IGUAL           reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    PUNTO_Y_COMA    reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    PARENTESIS_CIERRA reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    COMA            reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)
    LLAVE_CIERRA    reduce using rule 65 (comparacion -> valor MAYOR_IGUAL valor .)

  ! SUMA            [ shift and go to state 66 ]
  ! RESTA           [ shift and go to state 67 ]
  ! MULTIPLICACION  [ shift and go to state 68 ]
  ! DIVISION        [ shift and go to state 69 ]
  ! CONJUNCION      [ shift and go to state 70 ]
  ! DISYUNCION      [ shift and go to state 71 ]
  ! MAYOR           [ shift and go to state 72 ]
  ! MENOR           [ shift and go to state 73 ]
  ! MAYOR_IGUAL     [ shift and go to state 74 ]
  ! MENOR_IGUAL     [ shift and go to state 75 ]
  ! IGUAL           [ shift and go to state 76 ]


state 106

    (66) comparacion -> valor MENOR_IGUAL valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    SUMA            reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    RESTA           reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    MULTIPLICACION  reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    DIVISION        reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    CONJUNCION      reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    DISYUNCION      reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    MAYOR           reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    MENOR           reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    MAYOR_IGUAL     reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    MENOR_IGUAL     reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    IGUAL           reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    PUNTO_Y_COMA    reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    PARENTESIS_CIERRA reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    COMA            reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)
    LLAVE_CIERRA    reduce using rule 66 (comparacion -> valor MENOR_IGUAL valor .)

  ! SUMA            [ shift and go to state 66 ]
  ! RESTA           [ shift and go to state 67 ]
  ! MULTIPLICACION  [ shift and go to state 68 ]
  ! DIVISION        [ shift and go to state 69 ]
  ! CONJUNCION      [ shift and go to state 70 ]
  ! DISYUNCION      [ shift and go to state 71 ]
  ! MAYOR           [ shift and go to state 72 ]
  ! MENOR           [ shift and go to state 73 ]
  ! MAYOR_IGUAL     [ shift and go to state 74 ]
  ! MENOR_IGUAL     [ shift and go to state 75 ]
  ! IGUAL           [ shift and go to state 76 ]


state 107

    (67) comparacion -> valor IGUAL valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    SUMA            reduce using rule 67 (comparacion -> valor IGUAL valor .)
    RESTA           reduce using rule 67 (comparacion -> valor IGUAL valor .)
    MULTIPLICACION  reduce using rule 67 (comparacion -> valor IGUAL valor .)
    DIVISION        reduce using rule 67 (comparacion -> valor IGUAL valor .)
    CONJUNCION      reduce using rule 67 (comparacion -> valor IGUAL valor .)
    DISYUNCION      reduce using rule 67 (comparacion -> valor IGUAL valor .)
    MAYOR           reduce using rule 67 (comparacion -> valor IGUAL valor .)
    MENOR           reduce using rule 67 (comparacion -> valor IGUAL valor .)
    MAYOR_IGUAL     reduce using rule 67 (comparacion -> valor IGUAL valor .)
    MENOR_IGUAL     reduce using rule 67 (comparacion -> valor IGUAL valor .)
    IGUAL           reduce using rule 67 (comparacion -> valor IGUAL valor .)
    PUNTO_Y_COMA    reduce using rule 67 (comparacion -> valor IGUAL valor .)
    PARENTESIS_CIERRA reduce using rule 67 (comparacion -> valor IGUAL valor .)
    COMA            reduce using rule 67 (comparacion -> valor IGUAL valor .)
    LLAVE_CIERRA    reduce using rule 67 (comparacion -> valor IGUAL valor .)

  ! SUMA            [ shift and go to state 66 ]
  ! RESTA           [ shift and go to state 67 ]
  ! MULTIPLICACION  [ shift and go to state 68 ]
  ! DIVISION        [ shift and go to state 69 ]
  ! CONJUNCION      [ shift and go to state 70 ]
  ! DISYUNCION      [ shift and go to state 71 ]
  ! MAYOR           [ shift and go to state 72 ]
  ! MENOR           [ shift and go to state 73 ]
  ! MAYOR_IGUAL     [ shift and go to state 74 ]
  ! MENOR_IGUAL     [ shift and go to state 75 ]
  ! IGUAL           [ shift and go to state 76 ]


state 108

    (38) valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .

    SUMA            reduce using rule 38 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    RESTA           reduce using rule 38 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    MULTIPLICACION  reduce using rule 38 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    DIVISION        reduce using rule 38 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    CONJUNCION      reduce using rule 38 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    DISYUNCION      reduce using rule 38 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    MAYOR           reduce using rule 38 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    MENOR           reduce using rule 38 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    MAYOR_IGUAL     reduce using rule 38 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    MENOR_IGUAL     reduce using rule 38 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    IGUAL           reduce using rule 38 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    PUNTO_Y_COMA    reduce using rule 38 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 38 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    COMA            reduce using rule 38 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)
    LLAVE_CIERRA    reduce using rule 38 (valor -> PARENTESIS_ABRE valor PARENTESIS_CIERRA .)


state 109

    (18) ident -> CADENA_NO_COMILLAS .
    (19) ident -> CADENA_NO_COMILLAS . PUNTO ident
    (20) ident -> CADENA_NO_COMILLAS . CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> CADENA_NO_COMILLAS . CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident

    SUMA            reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    RESTA           reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    MULTIPLICACION  reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    DIVISION        reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    CONJUNCION      reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    DISYUNCION      reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    MAYOR           reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    MENOR           reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    MAYOR_IGUAL     reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    MENOR_IGUAL     reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    IGUAL           reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    PUNTO_Y_COMA    reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    PARENTESIS_CIERRA reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    COMA            reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    LLAVE_CIERRA    reduce using rule 18 (ident -> CADENA_NO_COMILLAS .)
    PUNTO           shift and go to state 78
    CORCHETE_ABRE   shift and go to state 79


state 110

    (19) ident -> CADENA_NO_COMILLAS PUNTO ident .

    SUMA            reduce using rule 19 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    RESTA           reduce using rule 19 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    MULTIPLICACION  reduce using rule 19 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    DIVISION        reduce using rule 19 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    CONJUNCION      reduce using rule 19 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    DISYUNCION      reduce using rule 19 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    MAYOR           reduce using rule 19 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    MENOR           reduce using rule 19 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    MAYOR_IGUAL     reduce using rule 19 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    MENOR_IGUAL     reduce using rule 19 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    IGUAL           reduce using rule 19 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    PUNTO_Y_COMA    reduce using rule 19 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    PARENTESIS_CIERRA reduce using rule 19 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    COMA            reduce using rule 19 (ident -> CADENA_NO_COMILLAS PUNTO ident .)
    LLAVE_CIERRA    reduce using rule 19 (ident -> CADENA_NO_COMILLAS PUNTO ident .)


state 111

    (20) ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS . CORCHETE_CIERRA
    (21) ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS . CORCHETE_CIERRA PUNTO ident

    CORCHETE_CIERRA shift and go to state 126


state 112

    (83) function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg . PARENTESIS_CIERRA

    PARENTESIS_CIERRA shift and go to state 127


state 113

    (84) function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .

    SUMA            reduce using rule 84 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    RESTA           reduce using rule 84 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    MULTIPLICACION  reduce using rule 84 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    DIVISION        reduce using rule 84 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    CONJUNCION      reduce using rule 84 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    DISYUNCION      reduce using rule 84 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    MAYOR           reduce using rule 84 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    MENOR           reduce using rule 84 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    MAYOR_IGUAL     reduce using rule 84 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    MENOR_IGUAL     reduce using rule 84 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    IGUAL           reduce using rule 84 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    PUNTO_Y_COMA    reduce using rule 84 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 84 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    COMA            reduce using rule 84 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)
    LLAVE_CIERRA    reduce using rule 84 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA .)


state 114

    (85) arg -> valor .
    (86) arg -> valor . COMA arg
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    PARENTESIS_CIERRA reduce using rule 85 (arg -> valor .)
    COMA            shift and go to state 128
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    MULTIPLICACION  shift and go to state 68
    DIVISION        shift and go to state 69
    CONJUNCION      shift and go to state 70
    DISYUNCION      shift and go to state 71
    MAYOR           shift and go to state 72
    MENOR           shift and go to state 73
    MAYOR_IGUAL     shift and go to state 74
    MENOR_IGUAL     shift and go to state 75
    IGUAL           shift and go to state 76


state 115

    (49) ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .

    SUMA            reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    RESTA           reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    MULTIPLICACION  reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    DIVISION        reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    CONJUNCION      reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    DISYUNCION      reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    MAYOR           reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    MENOR           reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    MAYOR_IGUAL     reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    MENOR_IGUAL     reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    IGUAL           reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    PUNTO_Y_COMA    reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    COMA            reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 49 (ajson_v -> LLAVE_ABRE lista_v LLAVE_CIERRA .)


state 116

    (51) lista_v -> elemento_v COMA .
    (52) lista_v -> elemento_v COMA . lista_v
    (50) lista_v -> . elemento_v
    (51) lista_v -> . elemento_v COMA
    (52) lista_v -> . elemento_v COMA lista_v
    (53) elemento_v -> . clave_v DOS_PUNTOS valor
    (54) clave_v -> . CADENA_NO_COMILLAS
    (55) clave_v -> . CADENA_COMILLAS

    LLAVE_CIERRA    reduce using rule 51 (lista_v -> elemento_v COMA .)
    CADENA_NO_COMILLAS shift and go to state 84
    CADENA_COMILLAS shift and go to state 85

    elemento_v                     shift and go to state 82
    lista_v                        shift and go to state 129
    clave_v                        shift and go to state 83

state 117

    (53) elemento_v -> clave_v DOS_PUNTOS . valor
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 130
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 118

    (76) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE . statement LLAVE_CIERRA
    (77) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE . statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (39) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (22) declare -> . LET id
    (29) assign -> . variable ASIGNACION valor
    (76) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (78) loop -> . WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (79) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (80) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (81) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (82) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (27) variable -> . CADENA_NO_COMILLAS
    (28) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo

    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    statement                      shift and go to state 131
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 119

    (78) loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE . statement LLAVE_CIERRA
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (39) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (22) declare -> . LET id
    (29) assign -> . variable ASIGNACION valor
    (76) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (78) loop -> . WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (79) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (80) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (81) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (82) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (27) variable -> . CADENA_NO_COMILLAS
    (28) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo

    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    statement                      shift and go to state 132
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 120

    (79) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA . DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (80) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA . DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    DOS_PUNTOS      shift and go to state 133


state 121

    (81) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS . tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (82) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS . tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (71) tipo -> . INT
    (72) tipo -> . FLOAT
    (73) tipo -> . CHARACTER
    (74) tipo -> . BOOLEAN
    (75) tipo -> . CADENA_NO_COMILLAS

    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    CHARACTER       shift and go to state 35
    BOOLEAN         shift and go to state 36
    CADENA_NO_COMILLAS shift and go to state 31

    tipo                           shift and go to state 134

state 122

    (40) ajson -> LLAVE_ABRE lista LLAVE_CIERRA .

    PUNTO_Y_COMA    reduce using rule 40 (ajson -> LLAVE_ABRE lista LLAVE_CIERRA .)
    COMA            reduce using rule 40 (ajson -> LLAVE_ABRE lista LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 40 (ajson -> LLAVE_ABRE lista LLAVE_CIERRA .)


state 123

    (42) lista -> elemento COMA .
    (43) lista -> elemento COMA . lista
    (41) lista -> . elemento
    (42) lista -> . elemento COMA
    (43) lista -> . elemento COMA lista
    (44) elemento -> . clave DOS_PUNTOS valor_t
    (47) clave -> . CADENA_NO_COMILLAS
    (48) clave -> . CADENA_COMILLAS

    LLAVE_CIERRA    reduce using rule 42 (lista -> elemento COMA .)
    CADENA_NO_COMILLAS shift and go to state 94
    CADENA_COMILLAS shift and go to state 95

    elemento                       shift and go to state 92
    lista                          shift and go to state 135
    clave                          shift and go to state 93

state 124

    (44) elemento -> clave DOS_PUNTOS . valor_t
    (45) valor_t -> . tipo
    (46) valor_t -> . ajson
    (71) tipo -> . INT
    (72) tipo -> . FLOAT
    (73) tipo -> . CHARACTER
    (74) tipo -> . BOOLEAN
    (75) tipo -> . CADENA_NO_COMILLAS
    (40) ajson -> . LLAVE_ABRE lista LLAVE_CIERRA

    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    CHARACTER       shift and go to state 35
    BOOLEAN         shift and go to state 36
    CADENA_NO_COMILLAS shift and go to state 31
    LLAVE_ABRE      shift and go to state 63

    valor_t                        shift and go to state 136
    tipo                           shift and go to state 137
    ajson                          shift and go to state 138

state 125

    (26) id -> variable ASIGNACION valor COMA id .

    PUNTO_Y_COMA    reduce using rule 26 (id -> variable ASIGNACION valor COMA id .)
    PARENTESIS_CIERRA reduce using rule 26 (id -> variable ASIGNACION valor COMA id .)


state 126

    (20) ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .
    (21) ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA . PUNTO ident

    SUMA            reduce using rule 20 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    RESTA           reduce using rule 20 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    MULTIPLICACION  reduce using rule 20 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    DIVISION        reduce using rule 20 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    CONJUNCION      reduce using rule 20 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    DISYUNCION      reduce using rule 20 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    MAYOR           reduce using rule 20 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    MENOR           reduce using rule 20 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    MAYOR_IGUAL     reduce using rule 20 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    MENOR_IGUAL     reduce using rule 20 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    IGUAL           reduce using rule 20 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    PUNTO_Y_COMA    reduce using rule 20 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 20 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    COMA            reduce using rule 20 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 20 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA .)
    PUNTO           shift and go to state 139


state 127

    (83) function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .

    SUMA            reduce using rule 83 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    RESTA           reduce using rule 83 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    MULTIPLICACION  reduce using rule 83 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    DIVISION        reduce using rule 83 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    CONJUNCION      reduce using rule 83 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    DISYUNCION      reduce using rule 83 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    MAYOR           reduce using rule 83 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    MENOR           reduce using rule 83 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    MAYOR_IGUAL     reduce using rule 83 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    MENOR_IGUAL     reduce using rule 83 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    IGUAL           reduce using rule 83 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    PUNTO_Y_COMA    reduce using rule 83 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    PARENTESIS_CIERRA reduce using rule 83 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    COMA            reduce using rule 83 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)
    LLAVE_CIERRA    reduce using rule 83 (function_call -> CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA .)


state 128

    (86) arg -> valor COMA . arg
    (85) arg -> . valor
    (86) arg -> . valor COMA arg
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 114
    arg                            shift and go to state 140
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 129

    (52) lista_v -> elemento_v COMA lista_v .

    LLAVE_CIERRA    reduce using rule 52 (lista_v -> elemento_v COMA lista_v .)


state 130

    (53) elemento_v -> clave_v DOS_PUNTOS valor .
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    COMA            reduce using rule 53 (elemento_v -> clave_v DOS_PUNTOS valor .)
    LLAVE_CIERRA    reduce using rule 53 (elemento_v -> clave_v DOS_PUNTOS valor .)
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    MULTIPLICACION  shift and go to state 68
    DIVISION        shift and go to state 69
    CONJUNCION      shift and go to state 70
    DISYUNCION      shift and go to state 71
    MAYOR           shift and go to state 72
    MENOR           shift and go to state 73
    MAYOR_IGUAL     shift and go to state 74
    MENOR_IGUAL     shift and go to state 75
    IGUAL           shift and go to state 76


state 131

    (76) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement . LLAVE_CIERRA
    (77) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement . LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 141


state 132

    (78) loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 142


state 133

    (79) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS . tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (80) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS . tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (71) tipo -> . INT
    (72) tipo -> . FLOAT
    (73) tipo -> . CHARACTER
    (74) tipo -> . BOOLEAN
    (75) tipo -> . CADENA_NO_COMILLAS

    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    CHARACTER       shift and go to state 35
    BOOLEAN         shift and go to state 36
    CADENA_NO_COMILLAS shift and go to state 31

    tipo                           shift and go to state 143

state 134

    (81) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo . LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (82) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo . LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 144


state 135

    (43) lista -> elemento COMA lista .

    LLAVE_CIERRA    reduce using rule 43 (lista -> elemento COMA lista .)


state 136

    (44) elemento -> clave DOS_PUNTOS valor_t .

    COMA            reduce using rule 44 (elemento -> clave DOS_PUNTOS valor_t .)
    LLAVE_CIERRA    reduce using rule 44 (elemento -> clave DOS_PUNTOS valor_t .)


state 137

    (45) valor_t -> tipo .

    COMA            reduce using rule 45 (valor_t -> tipo .)
    LLAVE_CIERRA    reduce using rule 45 (valor_t -> tipo .)


state 138

    (46) valor_t -> ajson .

    COMA            reduce using rule 46 (valor_t -> ajson .)
    LLAVE_CIERRA    reduce using rule 46 (valor_t -> ajson .)


state 139

    (21) ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO . ident
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident

    CADENA_NO_COMILLAS shift and go to state 109

    ident                          shift and go to state 145

state 140

    (86) arg -> valor COMA arg .

    PARENTESIS_CIERRA reduce using rule 86 (arg -> valor COMA arg .)


state 141

    (76) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .
    (77) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA . ELSE LLAVE_ABRE statement LLAVE_CIERRA

    TYPE            reduce using rule 76 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    LET             reduce using rule 76 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    IF              reduce using rule 76 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    WHILE           reduce using rule 76 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    FUNCTION        reduce using rule 76 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 76 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    $end            reduce using rule 76 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 76 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    RETURN          reduce using rule 76 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    ELSE            shift and go to state 146


state 142

    (78) loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .

    TYPE            reduce using rule 78 (loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    LET             reduce using rule 78 (loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    IF              reduce using rule 78 (loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    WHILE           reduce using rule 78 (loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    FUNCTION        reduce using rule 78 (loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 78 (loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    $end            reduce using rule 78 (loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 78 (loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)
    RETURN          reduce using rule 78 (loop -> WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA .)


state 143

    (79) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo . LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (80) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo . LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 147


state 144

    (81) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE . statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (82) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE . RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (39) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (22) declare -> . LET id
    (29) assign -> . variable ASIGNACION valor
    (76) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (78) loop -> . WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (79) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (80) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (81) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (82) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (27) variable -> . CADENA_NO_COMILLAS
    (28) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo

    RETURN          shift and go to state 149
    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    statement                      shift and go to state 148
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 145

    (21) ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .

    SUMA            reduce using rule 21 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    RESTA           reduce using rule 21 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    MULTIPLICACION  reduce using rule 21 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    DIVISION        reduce using rule 21 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    CONJUNCION      reduce using rule 21 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    DISYUNCION      reduce using rule 21 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    MAYOR           reduce using rule 21 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    MENOR           reduce using rule 21 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    MAYOR_IGUAL     reduce using rule 21 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    MENOR_IGUAL     reduce using rule 21 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    IGUAL           reduce using rule 21 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    PUNTO_Y_COMA    reduce using rule 21 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    PARENTESIS_CIERRA reduce using rule 21 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    COMA            reduce using rule 21 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)
    LLAVE_CIERRA    reduce using rule 21 (ident -> CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident .)


state 146

    (77) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE . LLAVE_ABRE statement LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 150


state 147

    (79) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE . statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (80) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE . RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (39) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (22) declare -> . LET id
    (29) assign -> . variable ASIGNACION valor
    (76) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (78) loop -> . WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (79) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (80) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (81) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (82) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (27) variable -> . CADENA_NO_COMILLAS
    (28) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo

    RETURN          shift and go to state 152
    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    statement                      shift and go to state 151
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 148

    (81) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement . RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    RETURN          shift and go to state 153


state 149

    (82) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN . valor PUNTO_Y_COMA LLAVE_CIERRA
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 154
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 150

    (77) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE . statement LLAVE_CIERRA
    (4) statement -> . content PUNTO_Y_COMA
    (5) statement -> . content PUNTO_Y_COMA statement
    (6) statement -> . no_semicolon
    (7) statement -> . no_semicolon statement
    (8) content -> . define
    (9) content -> . declare
    (10) content -> . assign
    (11) no_semicolon -> . condition
    (12) no_semicolon -> . loop
    (13) no_semicolon -> . function_def
    (39) define -> . TYPE CADENA_NO_COMILLAS ASIGNACION ajson
    (22) declare -> . LET id
    (29) assign -> . variable ASIGNACION valor
    (76) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (77) condition -> . IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA
    (78) loop -> . WHILE PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA
    (79) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (80) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (81) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (82) function_def -> . FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA
    (27) variable -> . CADENA_NO_COMILLAS
    (28) variable -> . CADENA_NO_COMILLAS DOS_PUNTOS tipo

    TYPE            shift and go to state 12
    LET             shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FUNCTION        shift and go to state 18
    CADENA_NO_COMILLAS shift and go to state 13

    statement                      shift and go to state 155
    content                        shift and go to state 4
    no_semicolon                   shift and go to state 5
    define                         shift and go to state 6
    declare                        shift and go to state 7
    assign                         shift and go to state 8
    condition                      shift and go to state 9
    loop                           shift and go to state 10
    function_def                   shift and go to state 11
    variable                       shift and go to state 15

state 151

    (79) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement . RETURN valor PUNTO_Y_COMA LLAVE_CIERRA

    RETURN          shift and go to state 156


state 152

    (80) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN . valor PUNTO_Y_COMA LLAVE_CIERRA
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 157
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 153

    (81) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN . valor PUNTO_Y_COMA LLAVE_CIERRA
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 158
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 154

    (82) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor . PUNTO_Y_COMA LLAVE_CIERRA
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    PUNTO_Y_COMA    shift and go to state 159
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    MULTIPLICACION  shift and go to state 68
    DIVISION        shift and go to state 69
    CONJUNCION      shift and go to state 70
    DISYUNCION      shift and go to state 71
    MAYOR           shift and go to state 72
    MENOR           shift and go to state 73
    MAYOR_IGUAL     shift and go to state 74
    MENOR_IGUAL     shift and go to state 75
    IGUAL           shift and go to state 76


state 155

    (77) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 160


state 156

    (79) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN . valor PUNTO_Y_COMA LLAVE_CIERRA
    (30) valor -> . ident
    (31) valor -> . num
    (32) valor -> . operacion
    (33) valor -> . bool
    (34) valor -> . NULL
    (35) valor -> . ajson_v
    (36) valor -> . CARACTER
    (37) valor -> . function_call
    (38) valor -> . PARENTESIS_ABRE valor PARENTESIS_CIERRA
    (18) ident -> . CADENA_NO_COMILLAS
    (19) ident -> . CADENA_NO_COMILLAS PUNTO ident
    (20) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA
    (21) ident -> . CADENA_NO_COMILLAS CORCHETE_ABRE CADENA_COMILLAS CORCHETE_CIERRA PUNTO ident
    (16) num -> . ENTERO
    (17) num -> . DECIMAL
    (56) operacion -> . aritmetica
    (57) operacion -> . booleana
    (58) operacion -> . comparacion
    (14) bool -> . TR
    (15) bool -> . FL
    (49) ajson_v -> . LLAVE_ABRE lista_v LLAVE_CIERRA
    (83) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE arg PARENTESIS_CIERRA
    (84) function_call -> . CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA
    (59) aritmetica -> . valor SUMA valor
    (60) aritmetica -> . valor RESTA valor
    (61) aritmetica -> . valor MULTIPLICACION valor
    (62) aritmetica -> . valor DIVISION valor
    (68) booleana -> . valor CONJUNCION valor
    (69) booleana -> . valor DISYUNCION valor
    (70) booleana -> . NEGACION valor
    (63) comparacion -> . valor MAYOR valor
    (64) comparacion -> . valor MENOR valor
    (65) comparacion -> . valor MAYOR_IGUAL valor
    (66) comparacion -> . valor MENOR_IGUAL valor
    (67) comparacion -> . valor IGUAL valor

    NULL            shift and go to state 44
    CARACTER        shift and go to state 46
    PARENTESIS_ABRE shift and go to state 48
    CADENA_NO_COMILLAS shift and go to state 49
    ENTERO          shift and go to state 50
    DECIMAL         shift and go to state 51
    TR              shift and go to state 55
    FL              shift and go to state 56
    LLAVE_ABRE      shift and go to state 57
    NEGACION        shift and go to state 58

    valor                          shift and go to state 161
    ident                          shift and go to state 40
    num                            shift and go to state 41
    operacion                      shift and go to state 42
    bool                           shift and go to state 43
    ajson_v                        shift and go to state 45
    function_call                  shift and go to state 47
    aritmetica                     shift and go to state 52
    booleana                       shift and go to state 53
    comparacion                    shift and go to state 54

state 157

    (80) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor . PUNTO_Y_COMA LLAVE_CIERRA
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    PUNTO_Y_COMA    shift and go to state 162
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    MULTIPLICACION  shift and go to state 68
    DIVISION        shift and go to state 69
    CONJUNCION      shift and go to state 70
    DISYUNCION      shift and go to state 71
    MAYOR           shift and go to state 72
    MENOR           shift and go to state 73
    MAYOR_IGUAL     shift and go to state 74
    MENOR_IGUAL     shift and go to state 75
    IGUAL           shift and go to state 76


state 158

    (81) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor . PUNTO_Y_COMA LLAVE_CIERRA
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    PUNTO_Y_COMA    shift and go to state 163
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    MULTIPLICACION  shift and go to state 68
    DIVISION        shift and go to state 69
    CONJUNCION      shift and go to state 70
    DISYUNCION      shift and go to state 71
    MAYOR           shift and go to state 72
    MENOR           shift and go to state 73
    MAYOR_IGUAL     shift and go to state 74
    MENOR_IGUAL     shift and go to state 75
    IGUAL           shift and go to state 76


state 159

    (82) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 164


state 160

    (77) condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .

    TYPE            reduce using rule 77 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    LET             reduce using rule 77 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    IF              reduce using rule 77 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    WHILE           reduce using rule 77 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    FUNCTION        reduce using rule 77 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 77 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    $end            reduce using rule 77 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 77 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)
    RETURN          reduce using rule 77 (condition -> IF PARENTESIS_ABRE valor PARENTESIS_CIERRA LLAVE_ABRE statement LLAVE_CIERRA ELSE LLAVE_ABRE statement LLAVE_CIERRA .)


state 161

    (79) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor . PUNTO_Y_COMA LLAVE_CIERRA
    (59) aritmetica -> valor . SUMA valor
    (60) aritmetica -> valor . RESTA valor
    (61) aritmetica -> valor . MULTIPLICACION valor
    (62) aritmetica -> valor . DIVISION valor
    (68) booleana -> valor . CONJUNCION valor
    (69) booleana -> valor . DISYUNCION valor
    (63) comparacion -> valor . MAYOR valor
    (64) comparacion -> valor . MENOR valor
    (65) comparacion -> valor . MAYOR_IGUAL valor
    (66) comparacion -> valor . MENOR_IGUAL valor
    (67) comparacion -> valor . IGUAL valor

    PUNTO_Y_COMA    shift and go to state 165
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    MULTIPLICACION  shift and go to state 68
    DIVISION        shift and go to state 69
    CONJUNCION      shift and go to state 70
    DISYUNCION      shift and go to state 71
    MAYOR           shift and go to state 72
    MENOR           shift and go to state 73
    MAYOR_IGUAL     shift and go to state 74
    MENOR_IGUAL     shift and go to state 75
    IGUAL           shift and go to state 76


state 162

    (80) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 166


state 163

    (81) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 167


state 164

    (82) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .

    TYPE            reduce using rule 82 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LET             reduce using rule 82 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    IF              reduce using rule 82 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    WHILE           reduce using rule 82 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    FUNCTION        reduce using rule 82 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 82 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    $end            reduce using rule 82 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 82 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    RETURN          reduce using rule 82 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)


state 165

    (79) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 168


state 166

    (80) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .

    TYPE            reduce using rule 80 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LET             reduce using rule 80 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    IF              reduce using rule 80 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    WHILE           reduce using rule 80 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    FUNCTION        reduce using rule 80 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 80 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    $end            reduce using rule 80 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 80 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    RETURN          reduce using rule 80 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)


state 167

    (81) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .

    TYPE            reduce using rule 81 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LET             reduce using rule 81 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    IF              reduce using rule 81 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    WHILE           reduce using rule 81 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    FUNCTION        reduce using rule 81 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 81 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    $end            reduce using rule 81 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 81 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    RETURN          reduce using rule 81 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)


state 168

    (79) function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .

    TYPE            reduce using rule 79 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LET             reduce using rule 79 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    IF              reduce using rule 79 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    WHILE           reduce using rule 79 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    FUNCTION        reduce using rule 79 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    CADENA_NO_COMILLAS reduce using rule 79 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    $end            reduce using rule 79 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 79 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)
    RETURN          reduce using rule 79 (function_def -> FUNCTION CADENA_NO_COMILLAS PARENTESIS_ABRE id PARENTESIS_CIERRA DOS_PUNTOS tipo LLAVE_ABRE statement RETURN valor PUNTO_Y_COMA LLAVE_CIERRA .)

